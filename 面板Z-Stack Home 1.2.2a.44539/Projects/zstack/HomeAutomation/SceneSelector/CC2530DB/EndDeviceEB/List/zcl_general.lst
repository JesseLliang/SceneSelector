###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                18/Jan/2018  14:04:34
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_general.c
#    Command line       =  
#        -f "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=120000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=60000) -f
#        "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_general.c" -D
#        SCENE_SELECTOR_TOUCHKEY -D xSCENE_SELECTOR -D ISR_KEYINTERRUPT -D
#        OSC32K_CRYSTAL_INSTALLED=FALSE -D xxHAL_PA_LNA -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_SCENES
#        -D ZCL_ON_OFF -D ZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        -lA "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o
#        "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddSceneSelector\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddCommon\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\Source\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Source\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\zcl_general.lst
#    Object file        =  
#        C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\zcl_general.r51
#
###############################################################################

C:\Users\JC_liang\Desktop\LIFUD\面板Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "zcl_general.h"
     47          //#include "ZDApp.h"
     48          #include "zcl_ezmode.h"
     49          
     50          //###################################################################
     51          //###################################################################
     52          #include "add_common.h"
     53          //###################################################################
     54          //###################################################################
     55          
     56          #if defined ( INTER_PAN )
     57            #include "stub_aps.h"
     58          #endif
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     64          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     65          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     66          
     67          #ifdef ZCL_SCENES
     68          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     69          #endif // ZCL_SCENES
     70          
     71          /*********************************************************************
     72           * CONSTANTS
     73           */
     74          
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          typedef struct zclGenCBRec
     79          {
     80            struct zclGenCBRec        *next;
     81            uint8                     endpoint; // Used to link it into the endpoint descriptor
     82            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     83          } zclGenCBRec_t;
     84          
     85          typedef struct zclGenSceneItem
     86          {
     87            struct zclGenSceneItem    *next;
     88            uint8                     endpoint; // Used to link it into the endpoint descriptor
     89            zclGeneral_Scene_t        scene;    // Scene info
     90          } zclGenSceneItem_t;
     91          
     92          typedef struct zclGenAlarmItem
     93          {
     94            struct zclGenAlarmItem    *next;
     95            uint8                     endpoint; // Used to link it into the endpoint descriptor
     96            zclGeneral_Alarm_t        alarm;    // Alarm info
     97          } zclGenAlarmItem_t;
     98          
     99          // Scene NV types
    100          typedef struct
    101          {
    102            uint16                    numRecs;
    103          } nvGenScenesHdr_t;
    104          
    105          typedef struct zclGenSceneNVItem
    106          {
    107            uint8                     endpoint;
    108            zclGeneral_Scene_t        scene;
    109          } zclGenSceneNVItem_t;
    110          
    111          /*********************************************************************
    112           * GLOBAL VARIABLES
    113           */
    114          
    115          /*********************************************************************
    116           * GLOBAL FUNCTIONS
    117           */
    118          
    119          /*********************************************************************
    120           * LOCAL VARIABLES
    121           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          #if defined( ZCL_SCENES )
    126            #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
   \                     zclGenSceneTable:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    128            #endif
    129          #endif // ZCL_SCENES
    130          
    131          #ifdef ZCL_ALARMS
    132          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    133          #endif // ZCL_ALARMS
    134          
    135          /*********************************************************************
    136           * LOCAL FUNCTIONS
    137           */
    138          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    139          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    140          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    141          
    142          // Device Configuration and Installation clusters
    143          #ifdef ZCL_BASIC
    144          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    145          #endif // ZCL_BASIC
    146          
    147          #ifdef ZCL_IDENTIFY
    148          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    149          #endif // ZCL_IDENTIFY
    150          
    151          // Groups and Scenes clusters
    152          #ifdef ZCL_GROUPS
    153          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    154          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    155          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    156          #endif // ZCL_GROUPS
    157          
    158          #ifdef ZCL_SCENES
    159          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    160          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    161          #endif // ZCL_SCENES
    162          
    163          // On/Off and Level Control Configuration clusters
    164          #ifdef ZCL_ON_OFF
    165          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    166          #endif // ZCL_ONOFF
    167          
    168          #ifdef ZCL_LEVEL_CTRL
    169          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    170          #endif // ZCL_LEVEL_CTRL
    171          
    172          // Alarms cluster
    173          #ifdef ZCL_ALARMS
    174          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    175          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    176          #endif // ZCL_ALARMS
    177          
    178          // Location cluster
    179          #ifdef ZCL_LOCATION
    180          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    181          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    182          #endif // ZCL_LOCATION
    183          
    184          #ifdef ZCL_SCENES
    185            #if !defined ( ZCL_STANDALONE )
    186              static uint8 zclGeneral_ScenesInitNV( void );
    187              static void zclGeneral_ScenesSetDefaultNV( void );
    188              static void zclGeneral_ScenesWriteNV( void );
    189              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    190            #endif
    191          #endif // ZCL_SCENES
    192          
    193          /*********************************************************************
    194           * @fn      zclGeneral_RegisterCmdCallbacks
    195           *
    196           * @brief   Register an applications command callbacks
    197           *
    198           * @param   endpoint - application's endpoint
    199           * @param   callbacks - pointer to the callback record.
    200           *
    201           * @return  ZMemError if not able to allocate
    202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    205            zclGenCBRec_t *pNewItem;
    206            zclGenCBRec_t *pLoop;
    207          
    208            // Register as a ZCL Plugin
    209            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV     DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7024         JNZ     ??zclGeneral_RegisterCmdCallbacks_0
    210            {
    211              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    212                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    213                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V2,#??zclGeneral_HdlIncoming?relay & 0xff
   \   000014   75....       MOV     ?V3,#(??zclGeneral_HdlIncoming?relay >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV     R4,#0x14
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   ??zcl_registerPlugin?relay; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
    214          
    215          #ifdef ZCL_SCENES
    216              // Initialize the Scenes Table
    217              zclGeneral_ScenesInit();
   \   00002C                ; Setup parameters for call to function zclGeneral_ScenesInit
   \   00002C   12....       LCALL   ??zclGeneral_ScenesInit?relay; Banked call to: zclGeneral_ScenesInit
    218          #endif // ZCL_SCENES
    219          
    220              zclGenPluginRegisted = TRUE;
   \   00002F   90....       MOV     DPTR,#zclGenPluginRegisted
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    221            }
    222          
    223            // Fill in the new profile list
    224            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7A05         MOV     R2,#0x5
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   \   000040   A8..         MOV     R0,?V2
   \   000042   A9..         MOV     R1,?V3
    225            if ( pNewItem == NULL )
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   7004         JNZ     ??zclGeneral_RegisterCmdCallbacks_1
    226              return (ZMemError);
   \   000048   7910         MOV     R1,#0x10
   \   00004A   803F         SJMP    ??zclGeneral_RegisterCmdCallbacks_2
    227          
    228            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    229            pNewItem->endpoint = endpoint;
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E5..         MOV     A,?V0
   \   00005C   F0           MOVX    @DPTR,A
    230            pNewItem->CBs = callbacks;
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   EF           MOV     A,R7
   \   000068   F0           MOVX    @DPTR,A
    231          
    232            // Find spot in list
    233            if (  zclGenCBs == NULL )
   \   000069   90....       MOV     DPTR,#zclGenCBs
   \   00006C   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00006F   90....       MOV     DPTR,#zclGenCBs
   \   000072   6012         JZ      ??zclGeneral_RegisterCmdCallbacks_3
    234            {
    235              zclGenCBs = pNewItem;
    236            }
    237            else
    238            {
    239              // Look for end of list
    240              pLoop = zclGenCBs;
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   8003         SJMP    ??zclGeneral_RegisterCmdCallbacks_4
    241              while ( pLoop->next != NULL )
    242                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   00007A   EA           MOV     A,R2
   \   00007B   FC           MOV     R4,A
   \   00007C   EB           MOV     A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   00007D   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000080   70F8         JNZ     ??zclGeneral_RegisterCmdCallbacks_5
    243          
    244              // Put new item at end of list
    245              pLoop->next = pNewItem;
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
    246            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   000086   12....       LCALL   ?Subroutine56 & 0xFFFF
    247          
    248            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_178:
   \   000089   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   00008B   02....       LJMP    ??Subroutine82_0 & 0xFFFF
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine85_0
   \   000001                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine92_0
   \   000005                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET
    250          
    251          #ifdef ZCL_IDENTIFY
    252          /*********************************************************************
    253           * @fn      zclGeneral_SendIdentify
    254           *
    255           * @brief   Call to send out an Identify Command
    256           *
    257           * @param   srcEP - Sending application's endpoint
    258           * @param   dstAddr - where you want the message to go
    259           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    260           * @param   seqNum - identification number for the transaction
    261           *
    262           * @return  ZStatus_t
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    265                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    267            uint8 buf[2];
    268          
    269            buf[0] = LO_UINT16( identifyTime );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    270            buf[1] = HI_UINT16( identifyTime );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine47 & 0xFFFF
    271          
    272            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    273                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    274                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_131:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV     ?V0,#0x0
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV     ?V0,#0x1
   \   000053   02....       LJMP    ?Subroutine1 & 0xFFFF
    275          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   ED           MOV     A,R5
   \   000001                REQUIRE ??Subroutine76_0
   \   000001                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   78..         MOV     R0,#?V0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   7C03         MOV     R4,#0x3
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   7402         MOV     A,#0x2
   \   00001D                REQUIRE ??Subroutine101_0
   \   00001D                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    276          
    277          /*********************************************************************
    278           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    279           *
    280           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    281           *
    282           * @param   srcEP - Sending application's endpoint
    283           * @param   dstAddr - where you want the message to go
    284           * @param   action - describes the EZ-Mode action to be performed
    285           * @param   seqNum - identification number for the transaction
    286           *
    287           * @return  ZStatus_t
    288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    290                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    291          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    292            uint8 buf[1];
    293          
    294            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   12....       LCALL   ??Subroutine77_0 & 0xFFFF
    295          
    296            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    297                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    298                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \                     ??CrossCallReturnLabel_138:
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV     ?V2,#0x1
   \   00001C   75..00       MOV     ?V3,#0x0
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV     A,#0x11
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR     A
   \   000030   F5..         MOV     ?V2,A
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV     A,R5
   \   000038   F5..         MOV     ?V1,A
   \   00003A   78..         MOV     R0,#?V1
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV     ?V1,#0x1
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV     ?V1,#0x2
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7C03         MOV     R4,#0x3
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000060   740B         MOV     A,#0xb
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   7401         MOV     A,#0x1
   \   000067   02....       LJMP    ??Subroutine81_0 & 0xFFFF
    299          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V2,R0
   \   000007   89..         MOV     ?V3,R1
   \   000009   78..         MOV     R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V1,A
   \   000003   78..         MOV     R0,#?V1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine82_0
   \   000003                ; // Fall through to label ??Subroutine82_0
    300          
    301          /*********************************************************************
    302           * @fn      zclGeneral_SendIdentifyUpdateCommState
    303           *
    304           * @brief   Call to send out an Identify Update Commission State Command
    305           *
    306           * @param   srcEP - Sending application's endpoint
    307           * @param   dstAddr - where you want the message to go
    308           * @param   action - describes the EZ-Mode action to be performed
    309           * @param   commissionStateMask - updates the device's commission state
    310           * @param   seqNum - identification number for the transaction
    311           *
    312           * @return  ZStatus_t
    313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    315                                                            uint8 action, uint8 commissionStateMask,
    316                                                            uint8 disableDefaultRsp, uint8 seqNum )
    317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    318            uint8 buf[2];
    319          
    320            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    321            buf[1] = commissionStateMask;
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   ED           MOV     A,R5
   \   00001A   12....       LCALL   ??Subroutine77_0 & 0xFFFF
    322          
    323            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    324                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    325                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_139:
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV     ?V2,#0x2
   \   000023   75..00       MOV     ?V3,#0x0
   \   000026   78..         MOV     R0,#?V2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV     A,#0x13
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR     A
   \   000037   F5..         MOV     ?V2,A
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV     A,#0x15
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V1,#0x0
   \   00004C   78..         MOV     R0,#?V1
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V1,#0x1
   \   000054   78..         MOV     R0,#?V1
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV     ?V1,#0x3
   \   00005C   78..         MOV     R0,#?V1
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   7C03         MOV     R4,#0x3
   \   000063   02....       LJMP    ?Subroutine0 & 0xFFFF
    326          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004                REQUIRE ??Subroutine80_0
   \   000004                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000003   740B         MOV     A,#0xb
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7402         MOV     A,#0x2
   \   00000A                REQUIRE ??Subroutine81_0
   \   00000A                ; // Fall through to label ??Subroutine81_0
    327          
    328          #ifdef ZCL_LIGHT_LINK_ENHANCE
    329          /*********************************************************************
    330           * @fn      zclGeneral_SendIdentifyTriggerEffect
    331           *
    332           * @brief   Call to send out a Trigger Effect Command
    333           *
    334           * @param   srcEP - Sending application's endpoint
    335           * @param   dstAddr - where you want the message to go
    336           * @param   effectId - identify effect to use
    337           * @param   effectVariant - which variant of effect to be triggered
    338           * @param   disableDefaultRsp - whether to disable the Default Response command
    339           * @param   seqNum - identification number for the transaction
    340           *
    341           * @return  ZStatus_t
    342           */
    343          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
    344                                                          uint8 effectId, uint8 effectVariant,
    345                                                          uint8 disableDefaultRsp, uint8 seqNum )
    346          {
    347            uint8 buf[2];
    348          
    349            buf[0] = effectId;
    350            buf[1] = effectVariant;
    351          
    352            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    353                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    354                                    disableDefaultRsp, 0, seqNum, 2, buf );
    355          }
    356          #endif // ZCL_LIGHT_LINK_ENHANCE
    357          
    358          /*********************************************************************
    359           * @fn      zclGeneral_SendIdentifyQueryResponse
    360           *
    361           * @brief   Call to send out an Identify Query Response Command
    362           *
    363           * @param   srcEP - Sending application's endpoint
    364           * @param   dstAddr - where you want the message to go
    365           * @param   timeout - how long the device will continue to identify itself (in seconds)
    366           * @param   seqNum - identification number for the transaction
    367           *
    368           * @return  ZStatus_t
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    371                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    373            uint8 buf[2];
    374          
    375            buf[0] = LO_UINT16( timeout );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    376            buf[1] = HI_UINT16( timeout );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine47 & 0xFFFF
    377          
    378            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    379                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    380                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_132:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   02....       LJMP    ?Subroutine1 & 0xFFFF
    381          }
    382          #endif // ZCL_IDENTIFY
    383          
    384          #ifdef ZCL_GROUPS
    385          /*********************************************************************
    386           * @fn      zclGeneral_SendGroupRequest
    387           *
    388           * @brief   Send a Group Request to a device.  You can also use the
    389           *          appropriate macro.
    390           *
    391           * @param   srcEP - Sending Apps endpoint
    392           * @param   dstAddr - where to send the request
    393           * @param   cmd - one of the following:
    394           *              COMMAND_GROUP_VIEW
    395           *              COMMAND_GROUP_REMOVE
    396           * @param   groupID -
    397           *
    398           * @return  ZStatus_t
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    401                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   740E         MOV     A,#0xe
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
    403            uint8 buf[2];
    404          
    405            buf[0] = LO_UINT16( groupID );
    406            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_36:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine46 & 0xFFFF
    407          
    408            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    409                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    410                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_134:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV     ?V2,#0x2
   \   000024   75..00       MOV     ?V3,#0x0
   \   000027   78..         MOV     R0,#?V2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V2,A
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   EF           MOV     A,R7
   \   000040   F5..         MOV     ?V1,A
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V1,#0x1
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   EE           MOV     A,R6
   \   000058   F5..         MOV     ?V1,A
   \   00005A   78..         MOV     R0,#?V1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   7C04         MOV     R4,#0x4
   \   000061   7D00         MOV     R5,#0x0
   \   000063   A9..         MOV     R1,?V0
   \   000065   02....       LJMP    ??Subroutine80_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine77_0
   \   000001                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET
    411          }
    412          
    413          /*********************************************************************
    414           * @fn      zclGeneral_SendAddGroupRequest
    415           *
    416           * @brief   Send the Add Group Request to a device
    417           *
    418           * @param   srcEP - Sending Apps endpoint
    419           * @param   dstAddr - where to send the request
    420           * @param   cmd - one of the following:
    421           *                COMMAND_GROUP_ADD
    422           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    423           * @param   groupID - pointer to the group structure
    424           * @param   groupName - pointer to Group Name.  This is a Zigbee
    425           *          string data type, so the first byte is the length of the
    426           *          name (in bytes), then the name.
    427           *
    428           * @return  ZStatus_t
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    431                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    432                                                    uint8 disableDefaultRsp, uint8 seqNum )
    433          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V7,R1
   \   000007   8A..         MOV     ?V12,R2
   \   000009   8B..         MOV     ?V13,R3
   \   00000B   8C..         MOV     ?V11,R4
   \   00000D   8D..         MOV     ?V10,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V1,A
    434            uint8 *buf;
    435            uint8 *pBuf;
    436            uint8 len;
    437            ZStatus_t status;
    438          
    439            len = 2;    // Group ID
    440            len += groupName[0] + 1;  // String + 1 for length
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2403         ADD     A,#0x3
   \   000023   FE           MOV     R6,A
    441          
    442            buf = zcl_mem_alloc( len );
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV     R2,A
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V2,R2
   \   00002C   8B..         MOV     ?V3,R3
    443            if ( buf )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V3
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
    444            {
    445              pBuf = buf;
   \   000036   7416         MOV     A,#0x16
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine29 & 0xFFFF
    446              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_38:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
    447              *pBuf++ = HI_UINT16( groupID );
   \   000044   E9           MOV     A,R1
   \   000045   12....       LCALL   ?Subroutine50 & 0xFFFF
    448              *pBuf++ = groupName[0]; // string length
   \                     ??CrossCallReturnLabel_92:
   \   000048   E0           MOVX    A,@DPTR
   \   000049   85..82       MOV     DPL,?V8
   \   00004C   85..83       MOV     DPH,?V9
   \   00004F   12....       LCALL   ?Subroutine50 & 0xFFFF
    449              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_93:
   \   000052   A3           INC     DPTR
   \   000053   A982         MOV     R1,DPL
   \   000055   AA83         MOV     R2,DPH
   \   000057   89..         MOV     ?V4,R1
   \   000059   8A..         MOV     ?V5,R2
   \   00005B   75..00       MOV     ?V6,#0x0
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   85..82       MOV     DPL,?V0
   \   000066   85..83       MOV     DPH,?V1
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FC           MOV     R4,A
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   AA..         MOV     R2,?V8
   \   00006F   AB..         MOV     R3,?V9
   \   000071   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    450          
    451              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    452                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    453                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000079                ; Setup parameters for call to function zcl_SendCommand
   \   000079   78..         MOV     R0,#?V2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   8E..         MOV     ?V0,R6
   \   000080   75..00       MOV     ?V1,#0x0
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   741E         MOV     A,#0x1e
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   E4           CLR     A
   \   000094   F5..         MOV     ?V0,A
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   E5..         MOV     A,?V10
   \   00009D   F5..         MOV     ?V0,A
   \   00009F   78..         MOV     R0,#?V0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   75..00       MOV     ?V0,#0x0
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   75..01       MOV     ?V0,#0x1
   \   0000AF   78..         MOV     R0,#?V0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   E5..         MOV     A,?V11
   \   0000B6   F5..         MOV     ?V0,A
   \   0000B8   78..         MOV     R0,#?V0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   7C04         MOV     R4,#0x4
   \   0000BF   7D00         MOV     R5,#0x0
   \   0000C1   AA..         MOV     R2,?V12
   \   0000C3   AB..         MOV     R3,?V13
   \   0000C5   A9..         MOV     R1,?V7
   \   0000C7   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   0000CA   740B         MOV     A,#0xb
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CF   E9           MOV     A,R1
   \   0000D0   FE           MOV     R6,A
    454              zcl_mem_free( buf );
   \   0000D1                ; Setup parameters for call to function osal_mem_free
   \   0000D1   AA..         MOV     R2,?V2
   \   0000D3   AB..         MOV     R3,?V3
   \   0000D5   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000D8   8002         SJMP    ??zclGeneral_SendAddGroupRequest_1
    455            }
    456            else
    457              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000DA   7E10         MOV     R6,#0x10
    458          
    459            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000DC                REQUIRE ?Subroutine8
   \   0000DC                ; // Fall through to label ?Subroutine8
    460          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   02....       LJMP    ??Subroutine99_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V8,DPL
   \   000005   8583..       MOV     ?V9,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   85..82       MOV     DPL,?V0
   \   00000B   85..83       MOV     DPH,?V1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    461          
    462          /*********************************************************************
    463           * @fn      zclGeneral_SendGroupGetMembershipRequest
    464           *
    465           * @brief   Send a Get Group Membership (Resposne) Command to a device
    466           *
    467           * @param   srcEP - Sending Apps endpoint
    468           * @param   dstAddr - where to send the request
    469           * @param   cmd - one of the following:
    470           *                COMMAND_GROUP_GET_MEMBERSHIP
    471           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    472           * @param   groupID - pointer to the group structure
    473           * @param   groupName - pointer to Group Name.  This is a Zigbee
    474           *          string data type, so the first byte is the length of the
    475           *          name (in bytes), then the name.
    476           *
    477           * @return  ZStatus_t
    478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    480                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    481                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    483            uint8 *buf;
    484            uint8 *pBuf;
    485            uint8 len = 0;
   \   00000F   7800         MOV     R0,#0x0
    486            uint8 i;
    487            ZStatus_t status;
    488          
    489            if ( rspCmd )
   \   000011   6002         JZ      ??zclGeneral_SendGroupGetMembershipRequest_0
    490              len++;  // Capacity
   \   000013   7801         MOV     R0,#0x1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V3,A
    491          
    492            len++;  // Group Count
    493            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00001D   C3           CLR     C
   \   00001E   33           RLC     A
   \   00001F   04           INC     A
   \   000020   28           ADD     A,R0
   \   000021   F8           MOV     R0,A
    494          
    495            buf = zcl_mem_alloc( len );
   \   000022   88..         MOV     ?V4,R0
   \   000024   75..00       MOV     ?V5,#0x0
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV     R2,A
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    496            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    497            {
    498              pBuf = buf;
   \   000039   A8..         MOV     R0,?V0
   \   00003B   A9..         MOV     R1,?V1
    499              if ( rspCmd )
   \   00003D   EF           MOV     A,R7
   \   00003E   6008         JZ      ??CrossCallReturnLabel_29
    500                *pBuf++ = capacity;
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine24 & 0xFFFF
    501          
    502              *pBuf++ = grpCnt;
   \                     ??CrossCallReturnLabel_29:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   E5..         MOV     A,?V3
   \   00004E   12....       LCALL   ?Subroutine68 & 0xFFFF
    503              for ( i = 0; i < grpCnt; i++ )
   \                     ??CrossCallReturnLabel_117:
   \   000051   75..00       MOV     ?V8,#0x0
   \   000054   7417         MOV     A,#0x17
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00005C   EA           MOV     A,R2
   \   00005D   FC           MOV     R4,A
   \   00005E   EB           MOV     A,R3
   \   00005F   FD           MOV     R5,A
   \   000060   8026         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_2
    504              {
    505                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000062   AA..         MOV     R2,?V8
   \   000064   EA           MOV     A,R2
   \   000065   2A           ADD     A,R2
   \   000066   FA           MOV     R2,A
   \   000067   E4           CLR     A
   \   000068   33           RLC     A
   \   000069   FB           MOV     R3,A
   \   00006A   EC           MOV     A,R4
   \   00006B   2A           ADD     A,R2
   \   00006C   FA           MOV     R2,A
   \   00006D   ED           MOV     A,R5
   \   00006E   3B           ADDC    A,R3
   \   00006F   FB           MOV     R3,A
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   12....       LCALL   ?Subroutine24 & 0xFFFF
    506                *pBuf++ = HI_UINT16( grpList[i] );
   \                     ??CrossCallReturnLabel_30:
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   08           INC     R0
   \   000084   A983         MOV     R1,DPH
    507              }
   \   000086   05..         INC     ?V8
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   000088   E5..         MOV     A,?V8
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V3
   \   00008D   40D3         JC      ??zclGeneral_SendGroupGetMembershipRequest_3
    508          
    509              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    510                                        cmd, TRUE, direction,
    511                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   00008F                ; Setup parameters for call to function zcl_SendCommand
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   741E         MOV     A,#0x1e
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   E4           CLR     A
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   78..         MOV     R0,#?V4
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7420         MOV     A,#0x20
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   741C         MOV     A,#0x1c
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   75..01       MOV     ?V3,#0x1
   \   0000C5   78..         MOV     R0,#?V3
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   EE           MOV     A,R6
   \   0000CB   F5..         MOV     ?V3,A
   \   0000CD   78..         MOV     R0,#?V3
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   7C04         MOV     R4,#0x4
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   AA..         MOV     R2,?V6
   \   0000D8   AB..         MOV     R3,?V7
   \   0000DA   A9..         MOV     R1,?V2
   \   0000DC   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   0000DF   740B         MOV     A,#0xb
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV     A,R1
   \   0000E5   F5..         MOV     ?V3,A
    512              zcl_mem_free( buf );
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   AA..         MOV     R2,?V0
   \   0000E9   AB..         MOV     R3,?V1
   \   0000EB   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000EE   8003         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_4
    513            }
    514            else
    515              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   0000F0   75..10       MOV     ?V3,#0x10
    516          
    517            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   0000F3   A9..         MOV     R1,?V3
   \   0000F5   7F0C         MOV     R7,#0xc
   \   0000F7   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V3,A
   \   000003   78..         MOV     R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   22           RET
    519          
    520          /*********************************************************************
    521           * @fn      zclGeneral_SendGroupResponse
    522           *
    523           * @brief   Send Group Response (not Group View Response)
    524           *
    525           * @param   srcEP - Sending application's endpoint
    526           * @param   dstAddr - where you want the message to go
    527           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    528           * @param   status - group command status
    529           * @param   groupID - what group
    530           *
    531           * @return  ZStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    534                                                  uint8 cmd, uint8 status, uint16 groupID,
    535                                                  uint8 disableDefaultRsp, uint8 seqNum )
    536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    537            uint8 buf[3];
    538          
    539            buf[0] = status;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   740F         MOV     A,#0xf
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine34 & 0xFFFF
    540            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_54:
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
    541            buf[2] = HI_UINT16( groupID );
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine46 & 0xFFFF
    542          
    543            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    544                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    545                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_135:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..03       MOV     ?V2,#0x3
   \   000031   75..00       MOV     ?V3,#0x0
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7416         MOV     A,#0x16
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   E4           CLR     A
   \   000045   F5..         MOV     ?V2,A
   \   000047   78..         MOV     R0,#?V2
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7418         MOV     A,#0x18
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV     ?V1,#0x1
   \   00005A   78..         MOV     R0,#?V1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   78..         MOV     R0,#?V1
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   EF           MOV     A,R7
   \   000065   F5..         MOV     ?V1,A
   \   000067   78..         MOV     R0,#?V1
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   7C04         MOV     R4,#0x4
   \   00006E                REQUIRE ?Subroutine6
   \   00006E                ; // Fall through to label ?Subroutine6
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7403         MOV     A,#0x3
   \   00000E   02....       LJMP    ??Subroutine81_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET
    547          
    548          /*********************************************************************
    549           * @fn      zclGeneral_SendGroupViewResponse
    550           *
    551           * @brief   Call to send Group Response Command
    552           *
    553           * @param   srcEP - Sending application's endpoint
    554           * @param   dstAddr - where you want the message to go
    555           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    556           * @param   status - group command status
    557           * @param   grp - group info
    558           *
    559           * @return  ZStatus_t
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    562                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V8,R1
   \   000007   8A..         MOV     ?V12,R2
   \   000009   8B..         MOV     ?V13,R3
   \   00000B   8C..         MOV     ?V7,R4
   \   00000D   8D..         MOV     ?V9,R5
    564            uint8 *buf;
    565            uint8 len;
    566            ZStatus_t stat;
    567          
    568            len = 1 + 2 + 1; // Status + Group ID + name length
   \   00000F   7E04         MOV     R6,#0x4
   \   000011   7416         MOV     A,#0x16
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V4,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V5,A
    569          
    570            if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   E5..         MOV     A,?V4
   \   00001F   2402         ADD     A,#0x2
   \   000021   F5..         MOV     ?V2,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V5
   \   000026   F5..         MOV     ?V3,A
   \   000028   EC           MOV     A,R4
   \   000029   7009         JNZ     ??zclGeneral_SendGroupViewResponse_0
    571            {
    572              len += grp->name[0];  // String length
   \   00002B   85..82       MOV     DPL,?V2
   \   00002E   85..83       MOV     DPH,?V3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2E           ADD     A,R6
   \   000033   FE           MOV     R6,A
    573            }
    574          
    575            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8B..         MOV     ?V1,R3
    576            if ( buf )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    577            {
    578              buf[0] = status;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V7
   \   00004D   F0           MOVX    @DPTR,A
    579              buf[1] = LO_UINT16( grp->ID );
   \   00004E   85..82       MOV     DPL,?V4
   \   000051   85..83       MOV     DPH,?V5
   \   000054   E0           MOVX    A,@DPTR
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ?Subroutine57 & 0xFFFF
    580              buf[2] = HI_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_100:
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   F0           MOVX    @DPTR,A
    581          
    582              if ( status == ZCL_STATUS_SUCCESS )
   \   000065   EA           MOV     A,R2
   \   000066   2403         ADD     A,#0x3
   \   000068   F8           MOV     R0,A
   \   000069   E4           CLR     A
   \   00006A   35..         ADDC    A,?V1
   \   00006C   F9           MOV     R1,A
   \   00006D   E5..         MOV     A,?V7
   \   00006F   703D         JNZ     ??zclGeneral_SendGroupViewResponse_2
    583              {
    584                buf[3] = grp->name[0]; // string length
   \   000071   85..82       MOV     DPL,?V2
   \   000074   85..83       MOV     DPH,?V3
   \   000077   E0           MOVX    A,@DPTR
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   12....       LCALL   ?Subroutine57 & 0xFFFF
    585                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
    586              }
   \                     ??CrossCallReturnLabel_101:
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A982         MOV     R1,DPL
   \   000083   AA83         MOV     R2,DPH
   \   000085   89..         MOV     ?V4,R1
   \   000087   8A..         MOV     ?V5,R2
   \   000089   75..00       MOV     ?V6,#0x0
   \   00008C   78..         MOV     R0,#?V4
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000091   85..82       MOV     DPL,?V2
   \   000094   85..83       MOV     DPH,?V3
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FC           MOV     R4,A
   \   000099   7D00         MOV     R5,#0x0
   \   00009B   E5..         MOV     A,?V0
   \   00009D   2404         ADD     A,#0x4
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   35..         ADDC    A,?V1
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000A7   7403         MOV     A,#0x3
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   8006         SJMP    ??zclGeneral_SendGroupViewResponse_3
    587              else //ZCL_STATUS_NOT_FOUND
    588              {
    589                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   E4           CLR     A
   \   0000B3   F0           MOVX    @DPTR,A
    590              }
    591          
    592              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    593                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    594                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   0000B4                ; Setup parameters for call to function zcl_SendCommand
   \   0000B4   78..         MOV     R0,#?V0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   8E..         MOV     ?V2,R6
   \   0000BB   75..00       MOV     ?V3,#0x0
   \   0000BE   78..         MOV     R0,#?V2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   741C         MOV     A,#0x1c
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F5..         MOV     ?V2,A
   \   0000CB   78..         MOV     R0,#?V2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   E4           CLR     A
   \   0000D1   F5..         MOV     ?V2,A
   \   0000D3   78..         MOV     R0,#?V2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   E5..         MOV     A,?V9
   \   0000DA   F5..         MOV     ?V2,A
   \   0000DC   78..         MOV     R0,#?V2
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E1   75..01       MOV     ?V2,#0x1
   \   0000E4   78..         MOV     R0,#?V2
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E9   78..         MOV     R0,#?V2
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EE   78..         MOV     R0,#?V2
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F3   7C04         MOV     R4,#0x4
   \   0000F5   7D00         MOV     R5,#0x0
   \   0000F7   AA..         MOV     R2,?V12
   \   0000F9   AB..         MOV     R3,?V13
   \   0000FB   A9..         MOV     R1,?V8
   \   0000FD   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000100   740B         MOV     A,#0xb
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   E9           MOV     A,R1
   \   000106   FE           MOV     R6,A
    595              zcl_mem_free( buf );
   \   000107                ; Setup parameters for call to function osal_mem_free
   \   000107   AA..         MOV     R2,?V0
   \   000109   AB..         MOV     R3,?V1
   \   00010B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00010E   8002         SJMP    ??zclGeneral_SendGroupViewResponse_4
    596            }
    597            else
    598            {
    599              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   000110   7E10         MOV     R6,#0x10
    600            }
    601          
    602            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   000112   02....       LJMP    ?Subroutine8 & 0xFFFF
    603          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    604          #endif // ZCL_GROUPS
    605          
    606          #ifdef ZCL_SCENES
    607          /*********************************************************************
    608           * @fn      zclGeneral_SendAddSceneRequest
    609           *
    610           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    611           *           also use the appropriate macro.
    612           *
    613           * @param   srcEP - Sending Apps endpoint
    614           * @param   dstAddr - where to send the request
    615           * @param   scene - pointer to the scene structure
    616           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    617           * @param   disableDefaultRsp - whether to disable the Default Response command
    618           * @param   seqNum - sequence number
    619           *
    620           * @return  ZStatus_t
    621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    622          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddSceneRequest:
    623                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    624                                                    uint8 disableDefaultRsp, uint8 seqNum )
    625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00000D   89..         MOV     ?V7,R1
   \   00000F   8C..         MOV     ?V15,R4
   \   000011   8D..         MOV     ?V14,R5
   \   000013   741A         MOV     A,#0x1a
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine14 & 0xFFFF
    626            uint8 *buf;
    627            uint8 *pBuf;
    628            uint8 len;
    629            ZStatus_t status;
    630          
    631            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    632            len += scene->name[0] + 1; // String + 1 for length
    633          
    634            // Add something for the extension field length
    635            len += scene->extLen;
   \                     ??CrossCallReturnLabel_4:
   \   00001B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00001E   2406         ADD     A,#0x6
   \   000020   F5..         MOV     ?V0,A
    636          
    637            buf = zcl_mem_alloc( len );
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   FA           MOV     R2,A
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V8,R2
   \   00002D   8B..         MOV     ?V9,R3
    638            if ( buf )
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V9
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??zclGeneral_SendAddSceneRequest_0 & 0xFFFF
    639            {
    640              pBuf = buf;
   \   000037   AE..         MOV     R6,?V8
   \   000039   AF..         MOV     R7,?V9
    641              *pBuf++ = LO_UINT16( scene->groupID );
   \   00003B   85..82       MOV     DPL,?V2
   \   00003E   85..83       MOV     DPH,?V3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   AE82         MOV     R6,DPL
   \   00004A   12....       LCALL   ?Subroutine17 & 0xFFFF
    642              *pBuf++ = HI_UINT16( scene->groupID );
    643              *pBuf++ = scene->ID;
    644              *pBuf++ = LO_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_9:
   \   00004D   E5..         MOV     A,?V2
   \   00004F   2403         ADD     A,#0x3
   \   000051   F8           MOV     R0,A
   \   000052   E4           CLR     A
   \   000053   35..         ADDC    A,?V3
   \   000055   F9           MOV     R1,A
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00005D   AF83         MOV     R7,DPH
    645              *pBuf++ = HI_UINT16( scene->transTime );
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   12....       LCALL   ?Subroutine25 & 0xFFFF
    646              *pBuf++ = scene->name[0]; // string length
   \                     ??CrossCallReturnLabel_32:
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   0E           INC     R6
   \   00006E   AF83         MOV     R7,DPH
    647              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   000070                ; Setup parameters for call to function osal_memcpy
   \   000070   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   85..82       MOV     DPL,?V10
   \   000079   85..83       MOV     DPH,?V11
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FC           MOV     R4,A
   \   00007E   7D00         MOV     R5,#0x0
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000087   7403         MOV     A,#0x3
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
    648              pBuf += scene->name[0]; // move pass name
    649          
    650              // Add the extension fields
    651              if ( scene->extLen > 0 )
   \   00008C   85..82       MOV     DPL,?V12
   \   00008F   85..83       MOV     DPH,?V13
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FC           MOV     R4,A
   \   000094   6028         JZ      ??zclGeneral_SendAddSceneRequest_1
    652                zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   E5..         MOV     A,?V2
   \   000098   2418         ADD     A,#0x18
   \   00009A   F5..         MOV     ?V4,A
   \   00009C   E4           CLR     A
   \   00009D   35..         ADDC    A,?V3
   \   00009F   F5..         MOV     ?V5,A
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   85..82       MOV     DPL,?V10
   \   0000AB   85..83       MOV     DPH,?V11
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   EE           MOV     A,R6
   \   0000B1   28           ADD     A,R0
   \   0000B2   FA           MOV     R2,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    653          
    654              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    655                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    656                                        disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendAddSceneRequest_1:
   \   0000BE                ; Setup parameters for call to function zcl_SendCommand
   \   0000BE   78..         MOV     R0,#?V8
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   78..         MOV     R0,#?V0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   7420         MOV     A,#0x20
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   E4           CLR     A
   \   0000D4   F5..         MOV     ?V0,A
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   E5..         MOV     A,?V14
   \   0000DD   F5..         MOV     ?V0,A
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   75..00       MOV     ?V0,#0x0
   \   0000E7   78..         MOV     R0,#?V0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EC   75..01       MOV     ?V0,#0x1
   \   0000EF   78..         MOV     R0,#?V0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F4   E5..         MOV     A,?V15
   \   0000F6   F5..         MOV     ?V0,A
   \   0000F8   78..         MOV     R0,#?V0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   7C05         MOV     R4,#0x5
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   740B         MOV     A,#0xb
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000109   A9..         MOV     R1,?V7
   \   00010B   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   00010E   740B         MOV     A,#0xb
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   E9           MOV     A,R1
   \   000114   FE           MOV     R6,A
    657              zcl_mem_free( buf );
   \   000115                ; Setup parameters for call to function osal_mem_free
   \   000115   AA..         MOV     R2,?V8
   \   000117   AB..         MOV     R3,?V9
   \   000119   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00011C   8002         SJMP    ??zclGeneral_SendAddSceneRequest_2
    658            }
    659            else
    660              status = ZMemError;
   \                     ??zclGeneral_SendAddSceneRequest_0:
   \   00011E   7E10         MOV     R6,#0x10
    661          
    662            return ( status );
   \                     ??zclGeneral_SendAddSceneRequest_2:
   \   000120                REQUIRE ?Subroutine3
   \   000120                ; // Fall through to label ?Subroutine3
    663          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7402         MOV     A,#0x2
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F10         MOV     R7,#0x10
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV     A,?V2
   \   000002   2408         ADD     A,#0x8
   \   000004                REQUIRE ??Subroutine78_0
   \   000004                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V3
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   85..82       MOV     DPL,?V10
   \   00000B   85..83       MOV     DPH,?V11
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   28           ADD     A,R0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   85..82       MOV     DPL,?V10
   \   000006   85..83       MOV     DPH,?V11
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AF83         MOV     R7,DPH
   \   000002   85..82       MOV     DPL,?V2
   \   000005   85..83       MOV     DPH,?V3
   \   000008   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00000B   85..82       MOV     DPL,?V2
   \   00000E   85..83       MOV     DPH,?V3
   \   000011   A3           INC     DPTR
   \   000012   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine83_0
   \   000001                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   AF83         MOV     R7,DPH
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   E5..         MOV     A,?V2
   \   000009   2417         ADD     A,#0x17
   \   00000B   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F5..         MOV     ?V12,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V3
   \   000005   F5..         MOV     ?V13,A
   \   000007   E5..         MOV     A,?V2
   \   000009   2407         ADD     A,#0x7
   \   00000B   F5..         MOV     ?V10,A
   \   00000D   E4           CLR     A
   \   00000E   35..         ADDC    A,?V3
   \   000010   F5..         MOV     ?V11,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine89_0
   \   000006                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine90_0
   \   000001                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    664          
    665          /*********************************************************************
    666           * @fn      zclGeneral_SendSceneRequest
    667           *
    668           * @brief   Send a Scene Request to a device.  You can also use the
    669           *          appropriate macro.
    670           *
    671           * @param   srcEP - Sending Apps endpoint
    672           * @param   dstAddr - where to send the request
    673           * @param   cmd - one of the following:
    674           *              COMMAND_SCENE_VIEW
    675           *              COMMAND_SCENE_REMOVE
    676           *              COMMAND_SCENE_REMOVE_ALL
    677           *              COMMAND_SCENE_STORE
    678           *              COMMAND_SCENE_RECALL
    679           *              COMMAND_SCENE_GET_MEMBERSHIP
    680           *              COMMAND_SCENE_ENHANCED_VIEW
    681           * @param   groupID - group ID
    682           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    683           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    684           * @param   disableDefaultRsp - whether to disable the Default Response command
    685           * @param   seqNum - sequence number
    686           * @return  ZStatus_t
    687           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    688          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneRequest:
    689                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    690                                                 uint8 disableDefaultRsp, uint8 seqNum )
    691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    692            uint8 buf[3];
    693            uint8 len = 2;
   \   00000E   7C02         MOV     R4,#0x2
   \   000010   740F         MOV     A,#0xf
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
    694          
    695            buf[0] = LO_UINT16( groupID );
    696            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_37:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    697          
    698            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
   \   00001D   7403         MOV     A,#0x3
   \   00001F   6F           XRL     A,R7
   \   000020   600D         JZ      ??zclGeneral_SendSceneRequest_0
   \   000022   7406         MOV     A,#0x6
   \   000024   6F           XRL     A,R7
   \   000025   6008         JZ      ??zclGeneral_SendSceneRequest_0
    699            {
    700              buf[2] = sceneID;
   \   000027   EC           MOV     A,R4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
    701              len++;
   \   00002D   7C03         MOV     R4,#0x3
    702            }
    703          
    704            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    705                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    706                                      disableDefaultRsp, 0, seqNum, len, buf ) );
   \                     ??zclGeneral_SendSceneRequest_0:
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   A8..         MOV     R0,?XSP + 0
   \   000031   A9..         MOV     R1,?XSP + 1
   \   000033   88..         MOV     ?V2,R0
   \   000035   89..         MOV     ?V3,R1
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   8C..         MOV     ?V2,R4
   \   00003E   75..00       MOV     ?V3,#0x0
   \   000041   78..         MOV     R0,#?V2
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V2,A
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7418         MOV     A,#0x18
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75..00       MOV     ?V1,#0x0
   \   000067   78..         MOV     R0,#?V1
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   75..01       MOV     ?V1,#0x1
   \   00006F   78..         MOV     R0,#?V1
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   EF           MOV     A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V1
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   7C05         MOV     R4,#0x5
   \   00007E   02....       LJMP    ?Subroutine6 & 0xFFFF
    707          }
    708          
    709          /*********************************************************************
    710           * @fn      zclGeneral_SendSceneResponse
    711           *
    712           * @brief   Send Group Response (not Group View Response)
    713           *
    714           * @param   srcEP - Sending application's endpoint
    715           * @param   dstAddr - where you want the message to go
    716           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    717           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    718           * @param   status - scene command status
    719           * @param   groupID - what group
    720           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    721           *
    722           * @return  ZStatus_t
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneResponse:
    725                                                  uint8 cmd, uint8 status, uint16 groupID,
    726                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    728            uint8 buf[4];
    729            uint8 len = 1 + 2; // Status + Group ID
   \   00000E   7C03         MOV     R4,#0x3
    730          
    731            buf[0] = status;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   ED           MOV     A,R5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   7410         MOV     A,#0x10
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine34 & 0xFFFF
    732            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_55:
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
    733            buf[2] = HI_UINT16( groupID );
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E9           MOV     A,R1
   \   00002B   F0           MOVX    @DPTR,A
    734          
    735            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   00002C   EC           MOV     A,R4
   \   00002D   6F           XRL     A,R7
   \   00002E   6011         JZ      ??zclGeneral_SendSceneResponse_0
    736            {
    737              buf[3] = sceneID;
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   C0E0         PUSH    A
   \   000038   EC           MOV     A,R4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
    738              len++;
   \   00003F   7C04         MOV     R4,#0x4
    739            }
    740          
    741            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    742                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    743                                    disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneResponse_0:
   \   000041                ; Setup parameters for call to function zcl_SendCommand
   \   000041   A8..         MOV     R0,?XSP + 0
   \   000043   A9..         MOV     R1,?XSP + 1
   \   000045   88..         MOV     ?V2,R0
   \   000047   89..         MOV     ?V3,R1
   \   000049   78..         MOV     R0,#?V2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   8C..         MOV     ?V2,R4
   \   000050   75..00       MOV     ?V3,#0x0
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7418         MOV     A,#0x18
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   E4           CLR     A
   \   000064   F5..         MOV     ?V2,A
   \   000066   78..         MOV     R0,#?V2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   741A         MOV     A,#0x1a
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75..01       MOV     ?V1,#0x1
   \   000079   78..         MOV     R0,#?V1
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   78..         MOV     R0,#?V1
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V1,A
   \   000086   78..         MOV     R0,#?V1
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   7C05         MOV     R4,#0x5
   \   00008D                REQUIRE ?Subroutine7
   \   00008D                ; // Fall through to label ?Subroutine7
    744          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7404         MOV     A,#0x4
   \   00000E   80..         SJMP    ??Subroutine81_0
    745          
    746          /*********************************************************************
    747           * @fn      zclGeneral_SendSceneViewResponse
    748           *
    749           * @brief   Call to send Scene (Enahced) View Response Command. You can
    750           *           also use the appropriate macro.
    751           *
    752           * @param   srcEP - Sending application's endpoint
    753           * @param   dstAddr - where you want the message to go
    754           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    755           * @param   status - scene command status
    756           * @param   scene - scene info
    757           *
    758           * @return  ZStatus_t
    759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    760          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneViewRsp:
    761                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    762                                                 uint8 disableDefaultRsp, uint8 seqNum )
    763          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00000D   89..         MOV     ?V15,R1
   \   00000F   8C..         MOV     ?V14,R4
   \   000011   8D..         MOV     ?V7,R5
    764            uint8 *buf;
    765            uint8 *pBuf;
    766            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
   \   000013   7804         MOV     R0,#0x4
   \   000015   741A         MOV     A,#0x1a
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine14 & 0xFFFF
    767            ZStatus_t stat;
    768          
    769            if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_5:
   \   00001D   ED           MOV     A,R5
   \   00001E   7006         JNZ     ??zclGeneral_SendSceneViewRsp_0
    770            {
    771              len += 2; // Transition Time
    772              len += scene->name[0] + 1; // string + 1 for length
    773          
    774              // Add something for the extension field length
    775              len += scene->extLen;
   \   000020   12....       LCALL   ?Subroutine40 & 0xFFFF
    776            }
   \                     ??CrossCallReturnLabel_76:
   \   000023   2407         ADD     A,#0x7
   \   000025   F8           MOV     R0,A
    777          
    778            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneViewRsp_0:
   \   000026   88..         MOV     ?V0,R0
   \   000028   75..00       MOV     ?V1,#0x0
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   AA..         MOV     R2,?V0
   \   00002D   AB..         MOV     R3,?V1
   \   00002F   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000032   8A..         MOV     ?V8,R2
   \   000034   8B..         MOV     ?V9,R3
    779            if ( buf )
   \   000036   EA           MOV     A,R2
   \   000037   45..         ORL     A,?V9
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??zclGeneral_SendSceneViewRsp_1 & 0xFFFF
    780            {
    781              pBuf = buf;
   \   00003E   AE..         MOV     R6,?V8
   \   000040   AF..         MOV     R7,?V9
    782              *pBuf++ = status;
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E5..         MOV     A,?V7
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   AE82         MOV     R6,DPL
   \   00004C   AF83         MOV     R7,DPH
    783              *pBuf++ = LO_UINT16( scene->groupID );
   \   00004E   85..82       MOV     DPL,?V2
   \   000051   85..83       MOV     DPH,?V3
   \   000054   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000057   12....       LCALL   ?Subroutine17 & 0xFFFF
    784              *pBuf++ = HI_UINT16( scene->groupID );
    785              *pBuf++ = scene->ID;
    786              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_10:
   \   00005A   E5..         MOV     A,?V7
   \   00005C   6003         JZ      $+5
   \   00005E   02....       LJMP    ??zclGeneral_SendSceneViewRsp_2 & 0xFFFF
    787              {
    788                uint16 transTime = scene->transTime;
   \   000061   85..82       MOV     DPL,?V2
   \   000064   85..83       MOV     DPH,?V3
   \   000067   12....       LCALL   ?Subroutine35 & 0xFFFF
    789                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
   \                     ??CrossCallReturnLabel_246:
   \   00006A   7441         MOV     A,#0x41
   \   00006C   65..         XRL     A,?V14
   \   00006E   7021         JNZ     ??zclGeneral_SendSceneViewRsp_3
    790                {
    791                  // Transition time is in 1/10s
    792                  transTime *= 10;
    793                  transTime += scene->transTime100ms;
   \   000070   E8           MOV     A,R0
   \   000071   75F00A       MOV     B,#0xa
   \   000074   A4           MUL     AB
   \   000075   F8           MOV     R0,A
   \   000076   AAF0         MOV     R2,B
   \   000078   75F00A       MOV     B,#0xa
   \   00007B   E9           MOV     A,R1
   \   00007C   A4           MUL     AB
   \   00007D   2A           ADD     A,R2
   \   00007E   F9           MOV     R1,A
   \   00007F   85..82       MOV     DPL,?V2
   \   000082   85..83       MOV     DPH,?V3
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   28           ADD     A,R0
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   39           ADDC    A,R1
   \   000090   F9           MOV     R1,A
    794                }
    795          
    796                *pBuf++ = LO_UINT16( transTime );
   \                     ??zclGeneral_SendSceneViewRsp_3:
   \   000091   E8           MOV     A,R0
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   12....       LCALL   ??Subroutine85_0 & 0xFFFF
    797                *pBuf++ = HI_UINT16( transTime );
   \                     ??CrossCallReturnLabel_177:
   \   000099   A3           INC     DPTR
   \   00009A   0E           INC     R6
   \   00009B   0E           INC     R6
   \   00009C   AF83         MOV     R7,DPH
    798                *pBuf++ = scene->name[0]; // string length
   \   00009E   85..82       MOV     DPL,?V10
   \   0000A1   85..83       MOV     DPH,?V11
   \   0000A4   12....       LCALL   ?Subroutine25 & 0xFFFF
    799                if ( scene->name[0] != 0 )
   \                     ??CrossCallReturnLabel_33:
   \   0000A7   FC           MOV     R4,A
   \   0000A8   6022         JZ      ??zclGeneral_SendSceneViewRsp_4
    800                {
    801                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   0000AA                ; Setup parameters for call to function osal_memcpy
   \   0000AA   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7D00         MOV     R5,#0x0
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    802                  pBuf += scene->name[0]; // move pass name
   \   0000BE   85..82       MOV     DPL,?V10
   \   0000C1   85..83       MOV     DPH,?V11
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   EE           MOV     A,R6
   \   0000C7   28           ADD     A,R0
   \   0000C8   FE           MOV     R6,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   FF           MOV     R7,A
    803                }
    804          
    805                // Add the extension fields
    806                if ( scene->extLen > 0 )
   \                     ??zclGeneral_SendSceneViewRsp_4:
   \   0000CC   85..82       MOV     DPL,?V12
   \   0000CF   85..83       MOV     DPH,?V13
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FC           MOV     R4,A
   \   0000D4   6018         JZ      ??zclGeneral_SendSceneViewRsp_2
    807                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000D6                ; Setup parameters for call to function osal_memcpy
   \   0000D6   E5..         MOV     A,?V2
   \   0000D8   2418         ADD     A,#0x18
   \   0000DA   12....       LCALL   ??Subroutine78_0 & 0xFFFF
    808              }
   \                     ??CrossCallReturnLabel_141:
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E0   7D00         MOV     R5,#0x0
   \   0000E2   EE           MOV     A,R6
   \   0000E3   FA           MOV     R2,A
   \   0000E4   EF           MOV     A,R7
   \   0000E5   FB           MOV     R3,A
   \   0000E6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000E9   7403         MOV     A,#0x3
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
    809          
    810              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    811                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    812                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneViewRsp_2:
   \   0000EE                ; Setup parameters for call to function zcl_SendCommand
   \   0000EE   78..         MOV     R0,#?V8
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F3   78..         MOV     R0,#?V0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   7421         MOV     A,#0x21
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   E4           CLR     A
   \   000104   F5..         MOV     ?V0,A
   \   000106   78..         MOV     R0,#?V0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7423         MOV     A,#0x23
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000116   75..01       MOV     ?V0,#0x1
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011E   78..         MOV     R0,#?V0
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000123   E5..         MOV     A,?V14
   \   000125   F5..         MOV     ?V0,A
   \   000127   78..         MOV     R0,#?V0
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012C   7C05         MOV     R4,#0x5
   \   00012E   7D00         MOV     R5,#0x0
   \   000130   740B         MOV     A,#0xb
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000138   A9..         MOV     R1,?V15
   \   00013A   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   00013D   740B         MOV     A,#0xb
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   E9           MOV     A,R1
   \   000143   FE           MOV     R6,A
    813              zcl_mem_free( buf );
   \   000144                ; Setup parameters for call to function osal_mem_free
   \   000144   AA..         MOV     R2,?V8
   \   000146   AB..         MOV     R3,?V9
   \   000148   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00014B   8002         SJMP    ??zclGeneral_SendSceneViewRsp_5
    814            }
    815            else
    816              stat = ZMemError;
   \                     ??zclGeneral_SendSceneViewRsp_1:
   \   00014D   7E10         MOV     R6,#0x10
    817          
    818            return ( stat );
   \                     ??zclGeneral_SendSceneViewRsp_5:
   \   00014F   02....       LJMP    ?Subroutine3 & 0xFFFF
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   22           RET
    820          
    821          /*********************************************************************
    822           * @fn      zclGeneral_SendSceneGetMembershipResponse
    823           *
    824           * @brief   Call to send Scene Get Membership Response Command
    825           *
    826           * @param   srcEP - Sending application's endpoint
    827           * @param   dstAddr - where you want the message to go
    828           * @param   status - scene command status
    829           * @param   capacity - remaining capacity of the scene table
    830           * @param   sceneCnt - number of scenes in the scene list
    831           * @param   sceneList - list of scene IDs
    832           * @param   groupID - group ID that scene belongs to
    833           * @param   seqNum - sequence number
    834           *
    835           * @return  ZStatus_t
    836           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    837          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneGetMembershipResponse:
    838                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    839                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    840          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    841            uint8 *buf;
    842            uint8 *pBuf;
    843            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
   \   00000F   7804         MOV     R0,#0x4
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
    844            uint8 i;
    845            ZStatus_t stat;
    846          
    847            if ( status == ZCL_STATUS_SUCCESS )
   \   000019   EE           MOV     A,R6
   \   00001A   7005         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_0
    848            {
    849              len++; // Scene Count
    850              len += sceneCnt; // Scene List (Scene ID is a single octet)
   \   00001C   7405         MOV     A,#0x5
   \   00001E   25..         ADD     A,?V3
   \   000020   F8           MOV     R0,A
    851            }
    852          
    853            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_0:
   \   000021   88..         MOV     ?V4,R0
   \   000023   75..00       MOV     ?V5,#0x0
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   AA..         MOV     R2,?V4
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    854            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendSceneGetMembershipResponse_1 & 0xFFFF
    855            {
    856              pBuf = buf;
   \   000039   A8..         MOV     R0,?V0
   \   00003B   A9..         MOV     R1,?V1
    857              *pBuf++ = status;
   \   00003D   EE           MOV     A,R6
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
    858              *pBuf++ = capacity;
   \   000044   EF           MOV     A,R7
   \   000045   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000048   7415         MOV     A,#0x15
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine39 & 0xFFFF
    859              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_67:
   \   000050   EA           MOV     A,R2
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   12....       LCALL   ??Subroutine90_0 & 0xFFFF
    860              *pBuf++ = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_211:
   \   000058   A3           INC     DPTR
    861              if ( status == ZCL_STATUS_SUCCESS )
   \   000059   EE           MOV     A,R6
   \   00005A   702C         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_2
    862              {
    863                *pBuf++ = sceneCnt;
   \   00005C   E5..         MOV     A,?V3
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   08           INC     R0
   \   000061   08           INC     R0
   \   000062   08           INC     R0
   \   000063   A983         MOV     R1,DPH
    864                for ( i = 0; i < sceneCnt; i++ )
   \   000065   75..00       MOV     ?V8,#0x0
   \   000068   7413         MOV     A,#0x13
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000070   800F         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_3
    865                  *pBuf++ = sceneList[i];
   \                     ??zclGeneral_SendSceneGetMembershipResponse_4:
   \   000072   AC..         MOV     R4,?V8
   \   000074   EA           MOV     A,R2
   \   000075   2C           ADD     A,R4
   \   000076   F582         MOV     DPL,A
   \   000078   E4           CLR     A
   \   000079   3B           ADDC    A,R3
   \   00007A   F583         MOV     DPH,A
   \   00007C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00007F   05..         INC     ?V8
   \                     ??zclGeneral_SendSceneGetMembershipResponse_3:
   \   000081   E5..         MOV     A,?V8
   \   000083   C3           CLR     C
   \   000084   95..         SUBB    A,?V3
   \   000086   40EA         JC      ??zclGeneral_SendSceneGetMembershipResponse_4
    866              }
    867          
    868              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    869                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    870                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_2:
   \   000088                ; Setup parameters for call to function zcl_SendCommand
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   78..         MOV     R0,#?V4
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   741C         MOV     A,#0x1c
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009D   E4           CLR     A
   \   00009E   F5..         MOV     ?V4,A
   \   0000A0   78..         MOV     R0,#?V4
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   741E         MOV     A,#0x1e
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV     ?V3,#0x1
   \   0000B3   78..         MOV     R0,#?V3
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   78..         MOV     R0,#?V3
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   75..06       MOV     ?V3,#0x6
   \   0000C0   78..         MOV     R0,#?V3
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   7C05         MOV     R4,#0x5
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   AA..         MOV     R2,?V6
   \   0000CB   AB..         MOV     R3,?V7
   \   0000CD   A9..         MOV     R1,?V2
   \   0000CF   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   0000D2   740B         MOV     A,#0xb
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   F5..         MOV     ?V3,A
    871              zcl_mem_free( buf );
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   AA..         MOV     R2,?V0
   \   0000DC   AB..         MOV     R3,?V1
   \   0000DE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000E1   8003         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_5
    872            }
    873            else
    874              stat = ZMemError;
   \                     ??zclGeneral_SendSceneGetMembershipResponse_1:
   \   0000E3   75..10       MOV     ?V3,#0x10
    875          
    876            return ( stat );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_5:
   \   0000E6   A9..         MOV     R1,?V3
   \   0000E8   7F0A         MOV     R7,#0xa
   \   0000EA   02....       LJMP    ?BANKED_LEAVE_XDATA
    877          }
    878          
    879          #ifdef ZCL_LIGHT_LINK_ENHANCE
    880          /*********************************************************************
    881           * @fn      zclGeneral_SendSceneCopy
    882           *
    883           * @brief   Send Scene Copy Request to a device
    884           *
    885           * @param   srcEP - sending application's endpoint
    886           * @param   dstAddr - where to send the request
    887           * @param   mode - how scene copy is to proceed
    888           * @param   groupIDFrom - group from which scene to be copied
    889           * @param   sceneIDFrom - scene from which scene to be copied
    890           * @param   groupIDTo - group to which scene to be copied
    891           * @param   sceneIDTo - scene to which scene to be copied
    892           * @param   disableDefaultRsp - disable Default Response command
    893           * @param   seqNum - the identification number for the transaction
    894           *
    895           * @return  ZStatus_t
    896           */
    897          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
    898                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    899                                              uint16 groupIDTo, uint8 sceneIDTo,
    900                                              uint8 disableDefaultRsp, uint8 seqNum )
    901          {
    902            uint8 buf[7];
    903          
    904            buf[0] = mode;
    905            buf[1] = LO_UINT16( groupIDFrom );
    906            buf[2] = HI_UINT16( groupIDFrom );
    907            buf[3] = sceneIDFrom;
    908            buf[4] = LO_UINT16( groupIDTo );
    909            buf[5] = HI_UINT16( groupIDTo );
    910            buf[6] = sceneIDTo;
    911          
    912            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    913                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    914                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
    915          }
    916          
    917          /*********************************************************************
    918           * @fn      zclGeneral_SendSceneCopyResponse
    919           *
    920           * @brief   Send Scene Copy Response to a device
    921           *
    922           * @param   srcEP - sending application's endpoint
    923           * @param   dstAddr - where to send the request
    924           * @param   status - status of copy scene attemp
    925           * @param   groupIDFrom - group from which scene was copied
    926           * @param   sceneIDFrom - scene from which scene was copied
    927           * @param   disableDefaultRsp - disable Default Response command
    928           * @param   seqNum - the identification number for the transaction
    929           *
    930           * @return  ZStatus_t
    931           */
    932          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
    933                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    934                                                      uint8 disableDefaultRsp, uint8 seqNum )
    935          {
    936            uint8 buf[4];
    937          
    938            buf[0] = status;
    939            buf[1] = LO_UINT16( groupIDFrom );
    940            buf[2] = HI_UINT16( groupIDFrom );
    941            buf[3] = sceneIDFrom;
    942          
    943            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    944                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    945                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
    946          }
    947          #endif // ZCL_LIGHT_LINK_ENHANCE
    948          #endif // ZCL_SCENES
    949          
    950          #ifdef ZCL_ON_OFF
    951          #ifdef ZCL_LIGHT_LINK_ENHANCE
    952          /*********************************************************************
    953           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    954           *
    955           * @brief   Call to send out an Off with Effect Command.
    956           *
    957           * @param   srcEP - Sending application's endpoint
    958           * @param   dstAddr - where you want the message to go
    959           * @param   effectId - fading effect to use when switching light off
    960           * @param   effectVariant - which variant of effect to be triggered
    961           * @param   disableDefaultRsp - whether to disable the Default Response command
    962           * @param   seqNum - sequence number
    963           *
    964           * @return  ZStatus_t
    965           */
    966          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
    967                                                           uint8 effectId, uint8 effectVariant,
    968                                                           uint8 disableDefaultRsp, uint8 seqNum )
    969          {
    970            uint8 buf[2];
    971          
    972            buf[0] = effectId;
    973            buf[1] = effectVariant;
    974          
    975            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    976                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    977                                    disableDefaultRsp, 0, seqNum, 2, buf );
    978          }
    979          
    980          /*********************************************************************
    981           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    982           *
    983           * @brief   Call to send out an On with Timed Off Command.
    984           *
    985           * @param   srcEP - Sending application's endpoint
    986           * @param   dstAddr - where you want the message to go
    987           * @param   onOffCtrl - how the lamp is to be operated
    988           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    989           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    990           * @param   disableDefaultRsp - whether to disable the Default Response command
    991           * @param   seqNum - sequence number
    992           *
    993           * @return  ZStatus_t
    994           */
    995          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
    996                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    997                                                             uint8 disableDefaultRsp, uint8 seqNum )
    998          {
    999            uint8 buf[5];
   1000          
   1001            buf[0] = onOffCtrl.byte;
   1002            buf[1] = LO_UINT16( onTime );
   1003            buf[2] = HI_UINT16( onTime );
   1004            buf[3] = LO_UINT16( offWaitTime );
   1005            buf[4] = HI_UINT16( offWaitTime );
   1006          
   1007            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1008                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1009                                    disableDefaultRsp, 0, seqNum, 5, buf );
   1010          }
   1011          #endif // ZCL_LIGHT_LINK_ENHANCE
   1012          #endif // ZCL_ON_OFF
   1013          
   1014          #ifdef ZCL_LEVEL_CTRL
   1015          /*********************************************************************
   1016           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1017           *
   1018           * @brief   Call to send out a Level Control Request. You can also use
   1019           *          the appropriate macro.
   1020           *
   1021           * @param   srcEP - Sending application's endpoint
   1022           * @param   dstAddr - where you want the message to go
   1023           * @param   cmd - one of the following:
   1024           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1025           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1026           * @param   level - what level to move to
   1027           * @param   transitionTime - how long to take to get to the level (in seconds)
   1028           *
   1029           * @return  ZStatus_t
   1030           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1031          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlMoveToLevelRequest:
   1032                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1033                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   1035            uint8 buf[3];
   1036          
   1037            buf[0] = level;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   740F         MOV     A,#0xf
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine34 & 0xFFFF
   1038            buf[1] = LO_UINT16( transTime );
   \                     ??CrossCallReturnLabel_56:
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
   1039            buf[2] = HI_UINT16( transTime );
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine46 & 0xFFFF
   1040          
   1041            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1042                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1043                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_136:
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..03       MOV     ?V2,#0x3
   \   000031   75..00       MOV     ?V3,#0x0
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7416         MOV     A,#0x16
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   E4           CLR     A
   \   000045   F5..         MOV     ?V2,A
   \   000047   78..         MOV     R0,#?V2
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7418         MOV     A,#0x18
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   78..         MOV     R0,#?V1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   75..01       MOV     ?V1,#0x1
   \   000062   78..         MOV     R0,#?V1
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   EF           MOV     A,R7
   \   000068   F5..         MOV     ?V1,A
   \   00006A   78..         MOV     R0,#?V1
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   7C08         MOV     R4,#0x8
   \   000071   02....       LJMP    ?Subroutine6 & 0xFFFF
   1044          }
   1045          
   1046          /*********************************************************************
   1047           * @fn      zclGeneral_SendLevelControlMoveRequest
   1048           *
   1049           * @brief   Call to send out a Level Control Request. You can also use
   1050           *          the appropriate macro.
   1051           *
   1052           * @param   srcEP - Sending application's endpoint
   1053           * @param   dstAddr - where you want the message to go
   1054           * @param   cmd - one of the following:
   1055           *              COMMAND_LEVEL_MOVE or
   1056           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1057           * @param   moveMode - LEVEL_MOVE_UP or
   1058           *                     LEVEL_MOVE_DOWN
   1059           * @param   rate - number of steps to take per second
   1060           *
   1061           * @return  ZStatus_t
   1062           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1063          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlMoveRequest:
   1064                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1065                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1066          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   1067            uint8 buf[2];
   1068          
   1069            buf[0] = moveMode;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   1070            buf[1] = rate;
   \   000016   740E         MOV     A,#0xe
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   1071          
   1072            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1073                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1074                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_140:
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   75..02       MOV     ?V2,#0x2
   \   00002E   75..00       MOV     ?V3,#0x0
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7414         MOV     A,#0x14
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000041   E4           CLR     A
   \   000042   F5..         MOV     ?V2,A
   \   000044   78..         MOV     R0,#?V2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7416         MOV     A,#0x16
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   75..00       MOV     ?V1,#0x0
   \   000057   78..         MOV     R0,#?V1
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   75..01       MOV     ?V1,#0x1
   \   00005F   78..         MOV     R0,#?V1
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   EF           MOV     A,R7
   \   000065   F5..         MOV     ?V1,A
   \   000067   78..         MOV     R0,#?V1
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   7C08         MOV     R4,#0x8
   \   00006E   02....       LJMP    ?Subroutine0 & 0xFFFF
   1075          }
   1076          
   1077          /*********************************************************************
   1078           * @fn      zclGeneral_SendLevelControlStepRequest
   1079           *
   1080           * @brief   Call to send out a Level Control Request. You can also use
   1081           *          the appropriate macro.
   1082           *
   1083           * @param   srcEP - Sending application's endpoint
   1084           * @param   dstAddr - where you want the message to go
   1085           * @param   cmd - one of the following:
   1086           *              COMMAND_LEVEL_STEP
   1087           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1088           * @param   stepMode - LEVEL_STEP_UP or
   1089           *                     LEVEL_STEP_DOWN
   1090           * @param   amount - number of levels to step
   1091           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1092           *
   1093           * @return  ZStatus_t
   1094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1095          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlStepRequest:
   1096                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1097                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1098          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   1099            uint8 buf[4];
   1100          
   1101            buf[0] = stepMode;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   1102            buf[1] = stepSize;
   \   000016   7410         MOV     A,#0x10
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   7411         MOV     A,#0x11
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   1103            buf[2] = LO_UINT16( transTime );
   \                     ??CrossCallReturnLabel_239:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   1104            buf[3] = HI_UINT16( transTime );
   \   000035   7403         MOV     A,#0x3
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine46 & 0xFFFF
   1105          
   1106            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1107                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1108                                    disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_137:
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..04       MOV     ?V2,#0x4
   \   000043   75..00       MOV     ?V3,#0x0
   \   000046   78..         MOV     R0,#?V2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7418         MOV     A,#0x18
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V2,A
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   741A         MOV     A,#0x1a
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   75..00       MOV     ?V1,#0x0
   \   00006C   78..         MOV     R0,#?V1
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   75..01       MOV     ?V1,#0x1
   \   000074   78..         MOV     R0,#?V1
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   EF           MOV     A,R7
   \   00007A   F5..         MOV     ?V1,A
   \   00007C   78..         MOV     R0,#?V1
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   7C08         MOV     R4,#0x8
   \   000083   02....       LJMP    ?Subroutine7 & 0xFFFF
   1109          }
   1110          
   1111          /*********************************************************************
   1112           * @fn      zclGeneral_SendLevelControlStepRequest
   1113           *
   1114           * @brief   Call to send out a Level Control Request. You can also use
   1115           *          the appropriate macro.
   1116           *
   1117           * @param   srcEP - Sending application's endpoint
   1118           * @param   dstAddr - where you want the message to go
   1119           * @param   cmd - one of the following:
   1120           *              COMMAND_LEVEL_STOP
   1121           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1122           *
   1123           * @return  ZStatus_t
   1124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1125          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclGeneral_SendLevelControlStopRequest:
   1126                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FF           MOV     R7,A
   1128            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1129                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1130                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   \   000007                ; Setup parameters for call to function zcl_SendCommand
   \   000007   E4           CLR     A
   \   000008   F5..         MOV     ?V2,A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   78..         MOV     R0,#?V2
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000011   78..         MOV     R0,#?V2
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7410         MOV     A,#0x10
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   78..         MOV     R0,#?V2
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   ED           MOV     A,R5
   \   000027   F5..         MOV     ?V1,A
   \   000029   78..         MOV     R0,#?V1
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   75..00       MOV     ?V1,#0x0
   \   000031   78..         MOV     R0,#?V1
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   75..01       MOV     ?V1,#0x1
   \   000039   78..         MOV     R0,#?V1
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   EF           MOV     A,R7
   \   00003F   F5..         MOV     ?V1,A
   \   000041   78..         MOV     R0,#?V1
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   7C08         MOV     R4,#0x8
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   12....       LCALL   ??zcl_SendCommand?relay; Banked call to: zcl_SendCommand
   \   00004D   740B         MOV     A,#0xb
   \   00004F   02....       LJMP    ??Subroutine81_0 & 0xFFFF
   1131          }
   1132          #endif // ZCL_LEVEL_CTRL
   1133          
   1134          #ifdef ZCL_ALARMS
   1135          /*********************************************************************
   1136           * @fn      zclGeneral_SendAlarm
   1137           *
   1138           * @brief   Call to send out an Alarm Request Command
   1139           *
   1140           * @param   srcEP - Sending application's endpoint
   1141           * @param   dstAddr - where you want the message to go
   1142           * @param   cmd - COMMAND_ALARMS_ALARM
   1143           * @param   alarmCode - code for the cause of the alarm
   1144           * @param   clusterID - cluster whose attribute generate the alarm
   1145           *
   1146           * @return  ZStatus_t
   1147           */
   1148          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1149                                          uint8 alarmCode, uint16 clusterID,
   1150                                          uint8 disableDefaultRsp, uint8 seqNum )
   1151          {
   1152            uint8 buf[3];
   1153          
   1154            buf[0] = alarmCode;
   1155            buf[1] = LO_UINT16( clusterID );
   1156            buf[2] = HI_UINT16( clusterID );
   1157          
   1158            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1159                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1160                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1161          }
   1162          
   1163          /*********************************************************************
   1164           * @fn      zclGeneral_SendAlarmReset
   1165           *
   1166           * @brief   Call to send out an Alarm Reset Command
   1167           *
   1168           * @param   srcEP - Sending application's endpoint
   1169           * @param   dstAddr - where you want the message to go
   1170           * @param   alarmCode - code for the cause of the alarm
   1171           * @param   clusterID - cluster whose attribute generate the alarm
   1172           *
   1173           * @return  ZStatus_t
   1174          */
   1175          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1176                                               uint8 alarmCode, uint16 clusterID,
   1177                                               uint8 disableDefaultRsp, uint8 seqNum )
   1178          {
   1179            uint8 buf[3];
   1180          
   1181            buf[0] = alarmCode;
   1182            buf[1] = LO_UINT16( clusterID );
   1183            buf[2] = HI_UINT16( clusterID );
   1184          
   1185            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1186                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1187                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1188          }
   1189          
   1190          /*********************************************************************
   1191           * @fn      zclGeneral_SendAlarmGetResponse
   1192           *
   1193           * @brief   Call to send out an Alarm Get Response Command
   1194           *
   1195           * @param   srcEP - Sending application's endpoint
   1196           * @param   dstAddr - where you want the message to go
   1197           * @param   status - SUCCESS or NOT_FOUND
   1198           * @param   alarmCode - code for the cause of the alarm
   1199           * @param   clusterID - cluster whose attribute generate the alarm
   1200           * @param   timeStamp - time at which the alarm occured
   1201           *
   1202           * @return  ZStatus_t
   1203           */
   1204          ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1205                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1206                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1207          {
   1208            uint8 buf[8];
   1209            uint8 len = 1; // Status
   1210          
   1211            buf[0] = status;
   1212            if ( status == ZCL_STATUS_SUCCESS )
   1213            {
   1214              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1215              buf[1] = alarmCode;
   1216              buf[2] = LO_UINT16( clusterID );
   1217              buf[3] = HI_UINT16( clusterID );
   1218              zcl_buffer_uint32( &buf[4], timeStamp );
   1219            }
   1220          
   1221            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1222                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1223                                    disableDefaultRsp, 0, seqNum, len, buf );
   1224          }
   1225          
   1226          #ifdef SE_UK_EXT
   1227          /*********************************************************************
   1228           * @fn      zclGeneral_SendAlarmGetEventLog
   1229           *
   1230           * @brief   Call to send out an Alarm Get Event Log Command
   1231           *
   1232           * @param   srcEP - Sending application's endpoint
   1233           * @param   dstAddr - where you want the message to go
   1234           * @param   pEventLog - pointer to Get Event Log Command
   1235           * @param   disableDefaultRsp - disable default response
   1236           * @param   seqNum - ZCL sequence number
   1237           *
   1238           * @return  ZStatus_t
   1239           */
   1240          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1241                                                     zclGetEventLog_t *pEventLog,
   1242                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1243          {
   1244            uint8 buf[10];
   1245          
   1246            buf[0] = pEventLog->logID;
   1247            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1248            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1249            buf[9] = pEventLog->numEvents;
   1250          
   1251            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1252                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1253                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1254          }
   1255          
   1256          /*********************************************************************
   1257           * @fn      zclGeneral_SendAlarmPublishEventLog
   1258           *
   1259           * @brief   Call to send out an Alarm Publish Event Log Command
   1260           *
   1261           * @param   srcEP - Sending application's endpoint
   1262           * @param   dstAddr - where you want the message to go
   1263           * @param   pEventLog - pointer to Publish Event Log Command
   1264           * @param   disableDefaultRsp - disable default response
   1265           * @param   seqNum - ZCL sequence number
   1266           *
   1267           * @return  ZStatus_t
   1268           */
   1269          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1270                                                         zclPublishEventLog_t *pEventLog,
   1271                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1272          {
   1273            uint8 *buf;
   1274            uint8 *pBuf;
   1275            uint8 bufLen;
   1276          
   1277            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1278            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1279          
   1280            buf = zcl_mem_alloc( bufLen );
   1281            if ( buf == NULL )
   1282            {
   1283              return (ZMemError);
   1284            }
   1285          
   1286            pBuf = buf;
   1287            *pBuf++ = pEventLog->logID;
   1288            *pBuf++ = pEventLog->cmdIndex;
   1289            *pBuf++ = pEventLog->totalCmds;
   1290          
   1291            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1292            {
   1293              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1294          
   1295              *pBuf++ = pLogs->eventId;
   1296              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1297            }
   1298          
   1299            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1300                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1301                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1302          }
   1303          #endif // SE_UK_EXT
   1304          #endif // ZCL_ALARMS
   1305          
   1306          #ifdef ZCL_LOCATION
   1307          /*********************************************************************
   1308           * @fn      zclGeneral_SendLocationSetAbsolute
   1309           *
   1310           * @brief   Call to send out a Set Absolute Location Command
   1311           *
   1312           * @param   srcEP - Sending application's endpoint
   1313           * @param   dstAddr - where you want the message to go
   1314           * @param   absLoc - absolute location info
   1315           *
   1316           * @return  ZStatus_t
   1317           */
   1318          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1319                                                        zclLocationAbsolute_t *absLoc,
   1320                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1321          {
   1322             uint8 buf[10]; // 5 fields (2 octects each)
   1323          
   1324             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1325             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1326             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1327             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1328             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1329             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1330             buf[6] = LO_UINT16( absLoc->power );
   1331             buf[7] = HI_UINT16( absLoc->power );
   1332             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1333             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1334          
   1335             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1336                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1337                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1338          }
   1339          
   1340          /*********************************************************************
   1341           * @fn      zclGeneral_SendLocationSetDevCfg
   1342           *
   1343           * @brief   Call to send out a Set Device Configuration Command
   1344           *
   1345           * @param   srcEP - Sending application's endpoint
   1346           * @param   dstAddr - where you want the message to go
   1347           * @param   devCfg - device configuration info
   1348           *
   1349           * @return  ZStatus_t
   1350           */
   1351          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1352                                                      zclLocationDevCfg_t *devCfg,
   1353                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1354          {
   1355             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1356          
   1357             buf[0] = LO_UINT16( devCfg->power );
   1358             buf[1] = HI_UINT16( devCfg->power );
   1359             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1360             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1361             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1362             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1363             buf[6] = devCfg->numMeasurements;
   1364             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1365             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1366          
   1367             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1368                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1369                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1370          }
   1371          
   1372          /*********************************************************************
   1373           * @fn      zclGeneral_SendLocationGetDevCfg
   1374           *
   1375           * @brief   Call to send out a Get Device Configuration Command
   1376           *
   1377           * @param   srcEP - Sending application's endpoint
   1378           * @param   dstAddr - where you want the message to go
   1379           * @param   targetAddr - device for which location parameters are being requested
   1380           *
   1381           * @return  ZStatus_t
   1382           */
   1383          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1384                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1385          {
   1386            uint8 buf[8];
   1387          
   1388            zcl_memcpy( buf, targetAddr, 8 );
   1389          
   1390            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1391                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1392                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1393          }
   1394          
   1395          /*********************************************************************
   1396           * @fn      zclGeneral_SendLocationGetData
   1397           *
   1398           * @brief   Call to send out a Get Location Data Command
   1399           *
   1400           * @param   srcEP - Sending application's endpoint
   1401           * @param   dstAddr - where you want the message to go
   1402           * @param   locaData - location information and channel parameters that are requested.
   1403           *
   1404           * @return  ZStatus_t
   1405           */
   1406          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1407                                                    zclLocationGetData_t *locData,
   1408                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1409          {
   1410            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1411            uint8 *pBuf = buf;
   1412            uint8 len = 2; // bitmap + number responses
   1413          
   1414            *pBuf  = locData->absoluteOnly;
   1415            *pBuf |= locData->recalculate << 1;
   1416            *pBuf |= locData->brdcastIndicator << 2;
   1417            *pBuf |= locData->brdcastResponse << 3;
   1418            *pBuf |= locData->compactResponse << 4;
   1419            pBuf++;  // move past the bitmap field
   1420          
   1421            *pBuf++ = locData->numResponses;
   1422          
   1423            if ( locData->brdcastIndicator == 0 )
   1424            {
   1425              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1426              len += 8; // ieee addr
   1427            }
   1428          
   1429            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1430                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1431                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1432          }
   1433          
   1434          /*********************************************************************
   1435           * @fn      zclGeneral_SendLocationDevCfgResponse
   1436           *
   1437           * @brief   Call to send out a Device Configuration Response Command
   1438           *
   1439           * @param   srcEP - Sending application's endpoint
   1440           * @param   dstAddr - where you want the message to go
   1441           * @param   devCfg - device's location parameters that are requested
   1442           *
   1443           * @return  ZStatus_t
   1444           */
   1445          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1446                                                           zclLocationDevCfgRsp_t *devCfg,
   1447                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1448          {
   1449            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1450            uint8 len = 1; // Status
   1451          
   1452            buf[0] = devCfg->status;
   1453            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1454            {
   1455              buf[1] = LO_UINT16( devCfg->data.power );
   1456              buf[2] = HI_UINT16( devCfg->data.power );
   1457              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1458              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1459              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1460              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1461              buf[7] = devCfg->data.numMeasurements;
   1462              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1463              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1464              len += 9;
   1465            }
   1466          
   1467            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1468                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1469                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1470          }
   1471          
   1472          /*********************************************************************
   1473           * @fn      zclGeneral_SendLocationData
   1474           *
   1475           * @brief   Call to send out location data
   1476           *
   1477           * @param   srcEP - Sending application's endpoint
   1478           * @param   dstAddr - where you want the message to go
   1479           * @param   status - indicates whether response to request was successful or not
   1480           * @param   locData - location information and channel parameters being sent
   1481           *
   1482           * @return  ZStatus_t
   1483           */
   1484          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1485                                                 uint8 status, zclLocationData_t *locData,
   1486                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1487          {
   1488            uint8 buf[16];
   1489            uint8 *pBuf = buf;
   1490            uint8 len = 0;
   1491          
   1492            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1493            {
   1494              // Only response command includes a status field
   1495              *pBuf++ = status;
   1496              len++;
   1497            }
   1498          
   1499            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1500            {
   1501              // Notification or Response with successful status
   1502              *pBuf++ = locData->type;
   1503              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1504              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1505              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1506              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1507              len += 5;
   1508          
   1509              if ( locationType2D(locData->type) == 0 )
   1510              {
   1511                // 2D location doesn't have coordinate 3
   1512                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1513                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1514                len += 2;
   1515              }
   1516          
   1517              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1518              {
   1519                // Compact notification doesn't include these fields
   1520                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1521                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1522                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1523                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1524                len += 4;
   1525              }
   1526          
   1527              if ( locationTypeAbsolute(locData->type) == 0 )
   1528              {
   1529                // Absolute location doesn't include these fields
   1530                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1531                {
   1532                  // Compact notification doesn't include this field
   1533                  *pBuf++ = locData->calcLoc.locationMethod;
   1534                  len++;
   1535                }
   1536          
   1537                *pBuf++ = locData->calcLoc.qualityMeasure;
   1538                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1539                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1540                len += 3;
   1541              }
   1542            }
   1543          
   1544            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1545                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1546                                    disableDefaultRsp, 0, seqNum, len, buf );
   1547          }
   1548          #endif // ZCL_LOCATION
   1549          
   1550          /*********************************************************************
   1551           * @fn      zclGeneral_FindCallbacks
   1552           *
   1553           * @brief   Find the callbacks for an endpoint
   1554           *
   1555           * @param   endpoint - endpoint to find the application callbacks for
   1556           *
   1557           * @return  pointer to the callbacks
   1558           */
   1559          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   1560          {
   1561            zclGenCBRec_t *pCBs;
   1562          
   1563            pCBs = zclGenCBs;
   1564            while ( pCBs )
   1565            {
   1566              if ( pCBs->endpoint == endpoint )
   1567                return ( pCBs->CBs );
   1568              pCBs = pCBs->next;
   1569            }
   1570            return ( (zclGeneral_AppCallbacks_t *)NULL );
   1571          }
   1572          
   1573          /*********************************************************************
   1574           * @fn      zclGeneral_HdlIncoming
   1575           *
   1576           * @brief   Callback from ZCL to process incoming Commands specific
   1577           *          to this cluster library or Profile commands for attributes
   1578           *          that aren't in the attribute list
   1579           *
   1580           *
   1581           * @param   pInMsg - pointer to the incoming message
   1582           *
   1583           * @return  ZStatus_t
   1584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1585          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1586          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1587            ZStatus_t stat = ZSuccess;
   1588          
   1589          #if defined ( INTER_PAN )
   1590            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   1591              return ( stat ); // Cluster not supported thru Inter-PAN
   1592          #endif
   1593            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   5407         ANL     A,#0x7
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7007         JNZ     ??zclGeneral_HdlIncoming_0
   1594            {
   1595              // Is this a manufacturer specific command?
   1596              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   1597              {
   1598                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   000011                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   000011   12....       LCALL   ??zclGeneral_HdlInSpecificCommands?relay; Banked call to: zclGeneral_HdlInSpecificCommands
   \   000014   E9           MOV     A,R1
   \   000015   F9           MOV     R1,A
   \   000016   8002         SJMP    ??zclGeneral_HdlIncoming_1
   1599              }
   1600              else
   1601              {
   1602                // We don't support any manufacturer specific command.
   1603                stat = ZFailure;
   1604              }
   1605            }
   1606            else
   1607            {
   1608              // Handle all the normal (Read, Write...) commands -- should never get here
   1609              stat = ZFailure;
   \                     ??zclGeneral_HdlIncoming_0:
   \   000018   7901         MOV     R1,#0x1
   1610            }
   1611            return ( stat );
   \                     ??zclGeneral_HdlIncoming_1:
   \   00001A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1612          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1613          
   1614          /*********************************************************************
   1615           * @fn      zclGeneral_HdlInSpecificCommands
   1616           *
   1617           * @brief   Callback from ZCL to process incoming Commands specific
   1618           *          to this cluster library
   1619          
   1620           * @param   pInMsg - pointer to the incoming message
   1621           *
   1622           * @return  ZStatus_t
   1623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1624          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1626            ZStatus_t stat;
   1627            zclGeneral_AppCallbacks_t *pCBs;
   1628          
   1629            // make sure endpoint exists
   1630            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000008   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00000B   FC           MOV     R4,A
   \   00000C   90....       MOV     DPTR,#zclGenCBs
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   00000F   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000012   6063         JZ      ??zclGeneral_HdlInSpecificCommands_1
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6C           XRL     A,R4
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   70ED         JNZ     ??zclGeneral_HdlInSpecificCommands_0
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   1631            if ( pCBs == NULL )
   \   00002A   EC           MOV     A,R4
   \   00002B   4D           ORL     A,R5
   \   00002C   6049         JZ      ??zclGeneral_HdlInSpecificCommands_1
   1632              return ( ZFailure );
   1633          
   1634            switch ( pInMsg->msg->clusterId )
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000042   0000         DW        0
   \   000044   08           DB        8
   \   000045   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000047   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   000049   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   00004B   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   00004D   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   00004F   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   \   000051   ....         DW        ??zclGeneral_HdlInSpecificCommands_6
   \   000053   ....         DW        ??zclGeneral_HdlInSpecificCommands_7
   \   000055   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000057   ....         DW        ??zclGeneral_HdlInSpecificCommands_8
   1635            {
   1636          #ifdef ZCL_BASIC
   1637              case ZCL_CLUSTER_ID_GEN_BASIC:
   1638                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   5408         ANL     A,#0x8
   \   000062   7024         JNZ     ??zclGeneral_HdlInSpecificCommands_9
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   600A         JZ      ??zclGeneral_HdlInSpecificCommands_10
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000072   7E01         MOV     R6,#0x1
   \   000074   02....       LJMP    ??zclGeneral_HdlInSpecificCommands_11 & 0xFFFF
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   000077   7901         MOV     R1,#0x1
   \   000079   02....       LJMP    ??zclGeneral_HdlInSpecificCommands_12 & 0xFFFF
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   00007C   8C82         MOV     DPL,R4
   \   00007E   8D83         MOV     DPH,R5
   \   000080   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000083   6003         JZ      ??zclGeneral_HdlInSpecificCommands_9
   \   000085                ; Setup parameters for indirect call
   \   000085   12....       LCALL   ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   000088   7E00         MOV     R6,#0x0
   \   00008A   8073         SJMP    ??zclGeneral_HdlInSpecificCommands_11
   1639                break;
   1640          #endif // ZCL_BASIC
   1641          
   1642          #ifdef ZCL_IDENTIFY
   1643              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1644                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   00008C                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   00008C   12....       LCALL   ??zclGeneral_ProcessInIdentity?relay; Banked call to: zclGeneral_ProcessInIdentity
   \   00008F   806C         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1645                break;
   1646          #endif // ZCL_IDENTIFY
   1647          
   1648          #ifdef ZCL_GROUPS
   1649              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1650                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   5408         ANL     A,#0x8
   \   00009A   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_14
   1651                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   00009C                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   00009C   12....       LCALL   ??zclGeneral_ProcessInGroupsServer?relay; Banked call to: zclGeneral_ProcessInGroupsServer
   \   00009F   805C         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1652                else
   1653                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_14:
   \   0000A1                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   0000A1   12....       LCALL   ??zclGeneral_ProcessInGroupsClient?relay; Banked call to: zclGeneral_ProcessInGroupsClient
   \   0000A4   8057         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1654                break;
   1655          #endif // ZCL_GROUPS
   1656          
   1657          #ifdef ZCL_SCENES
   1658              case ZCL_CLUSTER_ID_GEN_SCENES:
   1659                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   5408         ANL     A,#0x8
   \   0000AF   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_15
   1660                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   \   0000B1                ; Setup parameters for call to function zclGeneral_ProcessInScenesServer
   \   0000B1   12....       LCALL   ??zclGeneral_ProcessInScenesServer?relay; Banked call to: zclGeneral_ProcessInScenesServer
   \   0000B4   8047         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1661                else
   1662                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_15:
   \   0000B6                ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
   \   0000B6   12....       LCALL   ??zclGeneral_ProcessInScenesClient?relay; Banked call to: zclGeneral_ProcessInScenesClient
   \   0000B9   8042         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1663                break;
   1664          #endif // ZCL_SCENES
   1665          
   1666          #ifdef ZCL_ON_OFF
   1667              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1668                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   0000BB   7F00         MOV     R7,#0x0
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   5408         ANL     A,#0x8
   \   0000C6   702F         JNZ     ??zclGeneral_HdlInSpecificCommands_16
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FA           MOV     R2,A
   \   0000D5   6006         JZ      ??zclGeneral_HdlInSpecificCommands_17
   \   0000D7   14           DEC     A
   \   0000D8   6003         JZ      ??zclGeneral_HdlInSpecificCommands_17
   \   0000DA   14           DEC     A
   \   0000DB   7018         JNZ     ??zclGeneral_HdlInSpecificCommands_18
   \                     ??zclGeneral_HdlInSpecificCommands_17:
   \   0000DD   8C82         MOV     DPL,R4
   \   0000DF   8D83         MOV     DPH,R5
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000EC   6009         JZ      ??zclGeneral_HdlInSpecificCommands_16
   \   0000EE                ; Setup parameters for indirect call
   \   0000EE   EA           MOV     A,R2
   \   0000EF   F9           MOV     R1,A
   \   0000F0   12....       LCALL   ?CALL_IND
   \   0000F3   8002         SJMP    ??zclGeneral_HdlInSpecificCommands_16
   \                     ??zclGeneral_HdlInSpecificCommands_18:
   \   0000F5   7F01         MOV     R7,#0x1
   \                     ??zclGeneral_HdlInSpecificCommands_16:
   \   0000F7   EF           MOV     A,R7
   \   0000F8   8004         SJMP    ??zclGeneral_HdlInSpecificCommands_19
   1669                break;
   1670          #endif // ZCL_ON_OFF
   1671          
   1672          #ifdef ZCL_LEVEL_CTRL
   1673              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1674                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   0000FA                ; Setup parameters for call to function zclGeneral_ProcessInLevelControl
   \   0000FA   12....       LCALL   ??zclGeneral_ProcessInLevelControl?relay; Banked call to: zclGeneral_ProcessInLevelControl
   \                     ??zclGeneral_HdlInSpecificCommands_13:
   \   0000FD   E9           MOV     A,R1
   \                     ??zclGeneral_HdlInSpecificCommands_19:
   \   0000FE   FE           MOV     R6,A
   1675                break;
   1676          #endif // ZCL_LEVEL_CTRL
   1677          
   1678          #ifdef ZCL_ALARMS
   1679              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1680                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1681                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1682                else
   1683                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1684                break;
   1685          #endif // ZCL_ALARMS
   1686          
   1687          #ifdef ZCL_LOCATION
   1688              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1689                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1690                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1691                else
   1692                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1693                break;
   1694          #endif // ZCL_LOCATION
   1695          
   1696              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1697              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1698              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1699              case ZCL_CLUSTER_ID_GEN_TIME:
   1700              default:
   1701                stat = ZFailure;
   1702                break;
   1703            }
   1704          
   1705            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   0000FF   EE           MOV     A,R6
   \   000100   F9           MOV     R1,A
   \                     ??zclGeneral_HdlInSpecificCommands_12:
   \   000101   02....       LJMP    ??Subroutine102_0 & 0xFFFF
   1706          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine84_0
   \   000004                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   1707          
   1708          #ifdef ZCL_BASIC
   1709          /*********************************************************************
   1710           * @fn      zclGeneral_ProcessInBasic
   1711           *
   1712           * @brief   Process in the received Basic Command.
   1713           *
   1714           * @param   pInMsg - pointer to the incoming message
   1715           *
   1716           * @return  ZStatus_t
   1717           */
   1718          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1719                                                      zclGeneral_AppCallbacks_t *pCBs )
   1720          {
   1721            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1722            {
   1723              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1724                return ( ZFailure );   // Error ignore the command
   1725          
   1726              if ( pCBs->pfnBasicReset )
   1727                pCBs->pfnBasicReset();
   1728            }
   1729            // no Client command
   1730          
   1731            return ( ZSuccess );
   1732          }
   1733          #endif // ZCL_BASIC
   1734          
   1735          #ifdef ZCL_IDENTIFY
   1736          /*********************************************************************
   1737           * @fn      zclGeneral_ProcessInIdentity
   1738           *
   1739           * @brief   Process in the received Identity Command.
   1740           *
   1741           * @param   pInMsg - pointer to the incoming message
   1742           *
   1743           * @return  ZStatus_t
   1744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1745          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1746                                                         zclGeneral_AppCallbacks_t *pCBs )
   1747          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1748            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5408         ANL     A,#0x8
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1749            {
   1750              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   7007         JNZ     ??zclGeneral_ProcessInIdentity_1
   1751              {
   1752                if ( pCBs->pfnIdentify )
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   02....       LJMP    ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1753                {
   1754                  zclIdentify_t cmd;
   1755          
   1756                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1757                  cmd.identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1758          
   1759                  pCBs->pfnIdentify( &cmd );
   1760                }
   1761              }
   1762              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   000032   7401         MOV     A,#0x1
   \   000034   68           XRL     A,R0
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1763              {
   1764                uint16 identifyTime = 0;
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
   1765          
   1766                // Retrieve Identify Time
   1767                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1768                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   000043   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000046                ; Setup parameters for call to function zcl_ReadAttrData
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?XSTACK_DISP100_8
   \   000055   88..         MOV     ?V2,R0
   \   000057   89..         MOV     ?V3,R1
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   7D00         MOV     R5,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00006D   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   ??zcl_ReadAttrData?relay; Banked call to: zcl_ReadAttrData
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   1769          
   1770                // Is device identifying itself?
   1771                if ( identifyTime > 0 )
   \   000079   7404         MOV     A,#0x4
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000081   607E         JZ      ??zclGeneral_ProcessInIdentity_4
   1772                {
   1773                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1774                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   000083   85..82       MOV     DPL,?V0
   \   000086   85..83       MOV     DPH,?V1
   \   000089   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00008C                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   00008C   85..82       MOV     DPL,?V0
   \   00008F   85..83       MOV     DPH,?V1
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   75..01       MOV     ?V0,#0x1
   \   0000A1   78..         MOV     R0,#?V0
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   7406         MOV     A,#0x6
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000AE   12....       LCALL   ??zclGeneral_SendIdentifyQueryResponse?relay; Banked call to: zclGeneral_SendIdentifyQueryResponse
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   1775          #ifdef ZCL_EZMODE
   1776                  zcl_EZModeAction( EZMODE_ACTION_IDENTIFY_QUERY, NULL );
   1777          #endif
   1778                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000B6   79FF         MOV     R1,#-0x1
   \   0000B8   8049         SJMP    ??zclGeneral_ProcessInIdentity_5
   1779                }
   1780              }
   1781          #ifdef ZCL_EZMODE
   1782              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_EZMODE_INVOKE )
   1783              {
   1784                if ( pCBs->pfnIdentifyEZModeInvoke )
   1785                {
   1786                  pCBs->pfnIdentifyEZModeInvoke( pInMsg->pData[0] );
   1787                }
   1788              }
   1789              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE )
   1790              {
   1791                if ( pCBs->pfnIdentifyUpdateCommState )
   1792                {
   1793                  zclIdentifyUpdateCommState_t cmd;
   1794          
   1795                  cmd.action = pInMsg->pData[0];
   1796                  cmd.commissionStateMask = pInMsg->pData[1];
   1797          
   1798                  pCBs->pfnIdentifyUpdateCommState( &cmd );
   1799                }
   1800              }
   1801          #endif
   1802          
   1803          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1804              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   1805              {
   1806                if ( pCBs->pfnIdentifyTriggerEffect )
   1807                {
   1808                  zclIdentifyTriggerEffect_t cmd;
   1809          
   1810                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1811                  cmd.effectId = pInMsg->pData[0];
   1812                  cmd.effectVariant = pInMsg->pData[1];
   1813          
   1814                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1815                }
   1816              }
   1817          #endif //ZCL_LIGHT_LINK_ENHANCE
   1818              else
   1819              {
   1820                return ( ZFailure );   // Error ignore the command
   1821              }
   1822            }
   1823            else // Client Command
   1824            {
   1825              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6004         JZ      ??zclGeneral_ProcessInIdentity_6
   1826                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000BD   7901         MOV     R1,#0x1
   \   0000BF   8042         SJMP    ??zclGeneral_ProcessInIdentity_5
   1827          
   1828              if ( pCBs->pfnIdentifyQueryRsp )
   \                     ??zclGeneral_ProcessInIdentity_6:
   \   0000C1   8C82         MOV     DPL,R4
   \   0000C3   8D83         MOV     DPH,R5
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000CE   FC           MOV     R4,A
   \   0000CF   E9           MOV     A,R1
   \   0000D0   FD           MOV     R5,A
   \   0000D1   EC           MOV     A,R4
   \   0000D2   4D           ORL     A,R5
   \   0000D3   602C         JZ      ??zclGeneral_ProcessInIdentity_4
   1829              {
   1830                zclIdentifyQueryRsp_t rsp;
   1831          
   1832                rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000D5   8A82         MOV     DPL,R2
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000DC   12....       LCALL   ?Subroutine55 & 0xFFFF
   1833                rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??CrossCallReturnLabel_98:
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000E7   8882         MOV     DPL,R0
   \   0000E9   8983         MOV     DPH,R1
   \   0000EB   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine56 & 0xFFFF
   1834          
   1835                pCBs->pfnIdentifyQueryRsp( &rsp );
   \                     ??CrossCallReturnLabel_179:
   \   0000F6                ; Setup parameters for indirect call
   \   0000F6   AA..         MOV     R2,?XSP + 0
   \   0000F8   AB..         MOV     R3,?XSP + 1
   \   0000FA   8C82         MOV     DPL,R4
   \   0000FC   8D83         MOV     DPH,R5
   \   0000FE   12....       LCALL   ?CALL_IND
   1836              }
   1837            }
   1838          
   1839            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   000101   7900         MOV     R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   000103   7406         MOV     A,#0x6
   \   000105   02....       LJMP    ??Subroutine81_0 & 0xFFFF
   1840          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   EE           MOV     A,R6
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   22           RET
   1841          #endif // ZCL_IDENTIFY
   1842          
   1843          #ifdef ZCL_GROUPS
   1844          
   1845          /*********************************************************************
   1846           * @fn      zclGeneral_AddGroup
   1847           *
   1848           * @brief   Add a Group.
   1849           *
   1850           * @param   endPoint - application endpoint
   1851           * @param   group - group to be added
   1852           * @param   pData - pointer to the group info
   1853           *
   1854           * @return  ZStatus_t
   1855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1856          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1857          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1858          //###################################################################
   1859          //###################################################################
   1860          #if defined(SCENE_SELECTOR) || defined(SCENE_SELECTOR_TOUCHKEY)
   1861          	addSceneSelector_setGroupID(endPoint, group);
   \   000005                ; Setup parameters for call to function addSceneSelector_setGroupID
   \   000005   12....       LCALL   ??addSceneSelector_setGroupID?relay; Banked call to: addSceneSelector_setGroupID
   1862          	return SUCCESS;
   \   000008   02....       LJMP    ?Subroutine5 & 0xFFFF
   1863          	
   1864          #elif defined(DIMMER_SWITCH) || defined(DIMMER_SWITCH_TOUCHKEY)
   1865          	addDimmerSwitch_setGroupID(endPoint, group);
   1866          	return SUCCESS;
   1867          	
   1868          #else
   1869          	uint8 nameLen;
   1870          	uint8 nameSupport = FALSE;
   1871          
   1872          	pData += 2;   // Move past group ID
   1873          	nameLen = *pData++;
   1874          
   1875          	// Retrieve Name Support attribute
   1876          	zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1877          					  ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   1878          
   1879          	if ( nameSupport )
   1880          	{
   1881          	  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   1882          		 nameLen = (APS_GROUP_NAME_LEN-1);
   1883          	  group->name[0] = nameLen;
   1884          	  zcl_memcpy( &(group->name[1]), pData, nameLen );
   1885          	}
   1886          
   1887          	return ( aps_AddGroup( endPoint, group ) );
   1888          
   1889          #endif
   1890          //###################################################################
   1891          //###################################################################
   1892          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7900         MOV     R1,#0x0
   \   000002                REQUIRE ??Subroutine88_0
   \   000002                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1893          
   1894          /*********************************************************************
   1895           * @fn      zclGeneral_ProcessInGroupsServer
   1896           *
   1897           * @brief   Process in the received Groups Command.
   1898           *
   1899           * @param   pInMsg - pointer to the incoming message
   1900           *
   1901           * @return  ZStatus_t
   1902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1903          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1904          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV     A,#-0x36
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1905            aps_Group_t group;
   1906            aps_Group_t *pGroup;
   1907            uint8 *pData;
   1908            uint8 status;
   1909            uint8 grpCnt;
   1910            uint8 grpRspCnt = 0;
   \   00000E   75..00       MOV     ?V4,#0x0
   1911            uint16 *grpList;
   1912            uint16 identifyTime = 0;
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   1913            uint8 i;
   1914            ZStatus_t stat = ZSuccess;
   \   00001A   75..00       MOV     ?V0,#0x0
   1915          
   1916            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001D                ; Setup parameters for call to function osal_memset
   \   00001D   7C12         MOV     R4,#0x12
   \   00001F   FD           MOV     R5,A
   \   000020   F9           MOV     R1,A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP101_8
   \   000026   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1917          
   1918            pData = pInMsg->pData;
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine36 & 0xFFFF
   1919            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_57:
   \   000038   85..82       MOV     DPL,?V2
   \   00003B   F583         MOV     DPH,A
   \   00003D   A3           INC     DPTR
   \   00003E   A882         MOV     R0,DPL
   \   000040   A983         MOV     R1,DPH
   \   000042   85..82       MOV     DPL,?V2
   \   000045   F583         MOV     DPH,A
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FB           MOV     R3,A
   \   00004F   EC           MOV     A,R4
   \   000050   FA           MOV     R2,A
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   1920            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_213:
   \   000059   EE           MOV     A,R6
   \   00005A   2406         ADD     A,#0x6
   \   00005C   F5..         MOV     ?V8,A
   \   00005E   E4           CLR     A
   \   00005F   3F           ADDC    A,R7
   \   000060   F5..         MOV     ?V9,A
   \   000062   EE           MOV     A,R6
   \   000063   2407         ADD     A,#0x7
   \   000065   F5..         MOV     ?V6,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   F5..         MOV     ?V7,A
   \   00006B   85..82       MOV     DPL,?V6
   \   00006E   F583         MOV     DPH,A
   \   000070   E0           MOVX    A,@DPTR
   \   000071   601E         JZ      ??zclGeneral_ProcessInGroupsServer_0
   \   000073   14           DEC     A
   \   000074   605A         JZ      ??zclGeneral_ProcessInGroupsServer_1
   \   000076   14           DEC     A
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   00007C   14           DEC     A
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000088   14           DEC     A
   \   000089   7003         JNZ     $+5
   \   00008B   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   00008E   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1921            {
   1922              case COMMAND_GROUP_ADD:
   1923                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   000091                ; Setup parameters for call to function zclGeneral_AddGroup
   \   000091   AC..         MOV     R4,?V2
   \   000093   AD..         MOV     R5,?V3
   \   000095   7404         MOV     A,#0x4
   \   000097   12....       LCALL   ?XSTACK_DISP101_8
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   0000A1   12....       LCALL   ??zclGeneral_AddGroup?relay; Banked call to: zclGeneral_AddGroup
   \   0000A4   E9           MOV     A,R1
   \   0000A5   FC           MOV     R4,A
   1924                if ( status != ZSuccess )
   \   0000A6   600B         JZ      ??zclGeneral_ProcessInGroupsServer_7
   1925                {
   1926                  if ( status == ZApsDuplicateEntry )
   \   0000A8   74B8         MOV     A,#-0x48
   \   0000AA   6C           XRL     A,R4
   \   0000AB   7004         JNZ     ??zclGeneral_ProcessInGroupsServer_8
   1927                  {
   1928                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000AD   7C8A         MOV     R4,#-0x76
   \   0000AF   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_7
   1929                  }
   1930                  else
   1931                  {
   1932                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000B1   7C89         MOV     R4,#-0x77
   1933                  }
   1934                }
   1935          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1936                if ( UNICAST_MSG( pInMsg->msg ) )
   1937          #endif
   1938                {
   1939                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1940                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000B3   12....       LCALL   ?Subroutine15 & 0xFFFF
   1941                  stat = ZCL_STATUS_CMD_HAS_RSP;
   1942                }
   \                     ??CrossCallReturnLabel_6:
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B9   75..01       MOV     ?V0,#0x1
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   7406         MOV     A,#0x6
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C9   EC           MOV     A,R4
   \   0000CA   FD           MOV     R5,A
   \   0000CB   7C00         MOV     R4,#0x0
   \   0000CD   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   1943                break;
   1944          
   1945              case COMMAND_GROUP_VIEW:
   1946          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1947                if ( UNICAST_MSG( pInMsg->msg ) )
   1948          #endif
   1949                {
   1950                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   0000D0                ; Setup parameters for call to function aps_FindGroup
   \   0000D0   7404         MOV     A,#0x4
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FA           MOV     R2,A
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0000DE   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   0000E1   8A..         MOV     ?V0,R2
   \   0000E3   8B..         MOV     ?V1,R3
   1951                  if ( pGroup )
   \   0000E5   EA           MOV     A,R2
   \   0000E6   45..         ORL     A,?V1
   \   0000E8   6004         JZ      ??zclGeneral_ProcessInGroupsServer_10
   1952                  {
   1953                    status = ZCL_STATUS_SUCCESS;
   \   0000EA   7C00         MOV     R4,#0x0
   \   0000EC   800B         SJMP    ??zclGeneral_ProcessInGroupsServer_11
   1954                  }
   1955                  else
   1956                  {
   1957                    // Group not found
   1958                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   0000EE   7C8B         MOV     R4,#-0x75
   1959                    pGroup = &group;
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F5   88..         MOV     ?V0,R0
   \   0000F7   89..         MOV     ?V1,R1
   1960                  }
   1961                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1962                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   0000F9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FF   78..         MOV     R0,#?V0
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   7D01         MOV     R5,#0x1
   \   000106   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000109   12....       LCALL   ??zclGeneral_SendGroupViewResponse?relay; Banked call to: zclGeneral_SendGroupViewResponse
   \   00010C   7403         MOV     A,#0x3
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   1963                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   000111   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
   1964                }
   1965                break;
   1966          
   1967              case COMMAND_GROUP_GET_MEMBERSHIP:
   1968          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1969                if ( UNICAST_MSG( pInMsg->msg ) )
   1970          #endif
   1971                {
   1972                  grpCnt = *pData++;
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   000114   85..82       MOV     DPL,?V2
   \   000117   85..83       MOV     DPH,?V3
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F5..         MOV     ?V10,A
   \   00011D   88..         MOV     ?V2,R0
   \   00011F   89..         MOV     ?V3,R1
   1973          
   1974                  // Allocate space for the group list
   1975                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   000121                ; Setup parameters for call to function osal_mem_alloc
   \   000121   7A20         MOV     R2,#0x20
   \   000123   7B00         MOV     R3,#0x0
   \   000125   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000128   8A..         MOV     ?V0,R2
   \   00012A   8B..         MOV     ?V1,R3
   1976                  if ( grpList != NULL )
   \   00012C   EA           MOV     A,R2
   \   00012D   45..         ORL     A,?V1
   \   00012F   7003         JNZ     $+5
   \   000131   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   1977                  {
   1978                    if ( grpCnt == 0 )
   \   000134   E5..         MOV     A,?V10
   \   000136   700F         JNZ     ??zclGeneral_ProcessInGroupsServer_14
   1979                    {
   1980                      // Find out all the groups of which the endpoint is a member.
   1981                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   000138                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000138   8E82         MOV     DPL,R6
   \   00013A   8F83         MOV     DPH,R7
   \   00013C   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   1982                    }
   \                     ??CrossCallReturnLabel_260:
   \   00013F   12....       LCALL   ??aps_FindAllGroupsForEndpoint?relay; Banked call to: aps_FindAllGroupsForEndpoint
   \   000142   E9           MOV     A,R1
   \   000143   F5..         MOV     ?V4,A
   \   000145   805B         SJMP    ??zclGeneral_ProcessInGroupsServer_15
   1983                    else
   1984                    {
   1985                      // Find out the groups (in the list) of which the endpoint is a member.
   1986                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   000147   F5..         MOV     ?V5,A
   1987                      {
   1988                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000149   85..82       MOV     DPL,?V2
   \   00014C   85..83       MOV     DPH,?V3
   \   00014F   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000152   7404         MOV     A,#0x4
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   12....       LCALL   ?Subroutine56 & 0xFFFF
   1989                        pData += 2;
   \                     ??CrossCallReturnLabel_180:
   \   00015A   E5..         MOV     A,?V2
   \   00015C   2402         ADD     A,#0x2
   \   00015E   F5..         MOV     ?V2,A
   \   000160   5002         JNC     ??zclGeneral_ProcessInGroupsServer_17
   \   000162   05..         INC     ?V3
   1990          
   1991                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   000164                ; Setup parameters for call to function aps_FindGroup
   \   000164   7404         MOV     A,#0x4
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00016C   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00016F   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   000172   8B..         MOV     ?V7,R3
   \   000174   EA           MOV     A,R2
   \   000175   45..         ORL     A,?V7
   \   000177   601F         JZ      ??zclGeneral_ProcessInGroupsServer_18
   1992                          grpList[grpRspCnt++] = group.ID;
   \   000179   7404         MOV     A,#0x4
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   12....       LCALL   ?Subroutine39 & 0xFFFF
   1993                      }
   \                     ??CrossCallReturnLabel_70:
   \   000181   A8..         MOV     R0,?V4
   \   000183   E8           MOV     A,R0
   \   000184   28           ADD     A,R0
   \   000185   F8           MOV     R0,A
   \   000186   E4           CLR     A
   \   000187   33           RLC     A
   \   000188   F9           MOV     R1,A
   \   000189   E5..         MOV     A,?V0
   \   00018B   28           ADD     A,R0
   \   00018C   F582         MOV     DPL,A
   \   00018E   E5..         MOV     A,?V1
   \   000190   39           ADDC    A,R1
   \   000191   F583         MOV     DPH,A
   \   000193   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000196   05..         INC     ?V4
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   000198   15..         DEC     ?V5
   \   00019A   E5..         MOV     A,?V5
   \   00019C   70AB         JNZ     ??zclGeneral_ProcessInGroupsServer_16
   \   00019E   E5..         MOV     A,?V4
   \   0001A0   6043         JZ      ??zclGeneral_ProcessInGroupsServer_19
   1994                    }
   1995          
   1996                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   1997                    {
   1998                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1999                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   2000                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   0001A2                ; Setup parameters for call to function aps_CountAllGroups
   \   0001A2   12....       LCALL   ??aps_CountAllGroups?relay; Banked call to: aps_CountAllGroups
   \   0001A5   E9           MOV     A,R1
   \   0001A6   F9           MOV     R1,A
   \   0001A7   12....       LCALL   ?Subroutine26 & 0xFFFF
   2001                    }
   \                     ??CrossCallReturnLabel_35:
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   75..01       MOV     ?V2,#0x1
   \   0001B0   78..         MOV     R0,#?V2
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B5   78..         MOV     R0,#?V0
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   E5..         MOV     A,?V4
   \   0001BC   F5..         MOV     ?V2,A
   \   0001BE   78..         MOV     R0,#?V2
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C3   7410         MOV     A,#0x10
   \   0001C5   C3           CLR     C
   \   0001C6   99           SUBB    A,R1
   \   0001C7   F5..         MOV     ?V2,A
   \   0001C9   78..         MOV     R0,#?V2
   \   0001CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CE   75..01       MOV     ?V2,#0x1
   \   0001D1   78..         MOV     R0,#?V2
   \   0001D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D6   7D01         MOV     R5,#0x1
   \   0001D8   7C02         MOV     R4,#0x2
   \   0001DA   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0001DD   12....       LCALL   ??zclGeneral_SendGroupGetMembershipRequest?rela; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0001E0   7407         MOV     A,#0x7
   \   0001E2   12....       LCALL   ?DEALLOC_XSTACK8
   2002          
   2003                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   0001E5                ; Setup parameters for call to function osal_mem_free
   \   0001E5   AA..         MOV     R2,?V0
   \   0001E7   AB..         MOV     R3,?V1
   \   0001E9   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001EC   8054         SJMP    ??zclGeneral_ProcessInGroupsServer_20
   2004                  }
   2005                  else
   2006                  {
   2007                    // Couldn't allocate space for the group list -- send a Default Response command back.
   2008                    zclDefaultRspCmd_t defaultRspCmd;
   2009          
   2010                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0001EE   85..82       MOV     DPL,?V6
   \   0001F1   85..83       MOV     DPH,?V7
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   85..82       MOV     DPL,?XSP + 0
   \   0001F8   85..83       MOV     DPH,?XSP + 1
   \   0001FB   F0           MOVX    @DPTR,A
   2011                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0001FC   7401         MOV     A,#0x1
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   7489         MOV     A,#-0x77
   \   000203   F0           MOVX    @DPTR,A
   2012                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2013                                           pInMsg->msg->clusterId, &defaultRspCmd,
   2014                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   000204   12....       LCALL   ?Subroutine15 & 0xFFFF
   2015                  }
   \                     ??CrossCallReturnLabel_7:
   \   000207   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020A   E4           CLR     A
   \   00020B   F5..         MOV     ?V0,A
   \   00020D   F5..         MOV     ?V1,A
   \   00020F   78..         MOV     R0,#?V0
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000214   75..01       MOV     ?V0,#0x1
   \   000217   78..         MOV     R0,#?V0
   \   000219   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021C   78..         MOV     R0,#?V0
   \   00021E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000221   7405         MOV     A,#0x5
   \   000223   12....       LCALL   ?XSTACK_DISP100_8
   \   000226   88..         MOV     ?V0,R0
   \   000228   89..         MOV     ?V1,R1
   \   00022A   78..         MOV     R0,#?V0
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022F   8E82         MOV     DPL,R6
   \   000231   8F83         MOV     DPH,R7
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00023A   12....       LCALL   ??zcl_SendDefaultRspCmd?relay; Banked call to: zcl_SendDefaultRspCmd
   \   00023D   7407         MOV     A,#0x7
   \   00023F   12....       LCALL   ?DEALLOC_XSTACK8
   2016          
   2017                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   000242   804D         SJMP    ??zclGeneral_ProcessInGroupsServer_12
   2018                }
   2019                break;
   2020          
   2021              case COMMAND_GROUP_REMOVE:
   2022          #if defined ( ZCL_SCENES )
   2023                zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   000244                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000244   7404         MOV     A,#0x4
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   FA           MOV     R2,A
   \   00024B   8E82         MOV     DPL,R6
   \   00024D   8F83         MOV     DPH,R7
   \   00024F   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000252   12....       LCALL   ??zclGeneral_RemoveAllScenes?relay; Banked call to: zclGeneral_RemoveAllScenes
   2024          #endif
   2025                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \   000255                ; Setup parameters for call to function aps_RemoveGroup
   \   000255   7404         MOV     A,#0x4
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00025D   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000260   12....       LCALL   ??aps_RemoveGroup?relay; Banked call to: aps_RemoveGroup
   \   000263   E9           MOV     A,R1
   \   000264   6004         JZ      ??zclGeneral_ProcessInGroupsServer_21
   2026                {
   2027                  status = ZCL_STATUS_SUCCESS;
   \   000266   7C00         MOV     R4,#0x0
   \   000268   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_22
   2028                }
   2029                else
   2030                {
   2031                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   00026A   7C8B         MOV     R4,#-0x75
   2032                }
   2033          
   2034          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   2035                if ( UNICAST_MSG( pInMsg->msg ) )
   2036          #endif
   2037                {
   2038                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2039                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_22:
   \   00026C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000272   75..01       MOV     ?V0,#0x1
   \   000275   78..         MOV     R0,#?V0
   \   000277   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00027A   7406         MOV     A,#0x6
   \   00027C   12....       LCALL   ?XSTACK_DISP0_8
   \   00027F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000282   EC           MOV     A,R4
   \   000283   FD           MOV     R5,A
   \   000284   7C03         MOV     R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000286   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000289   12....       LCALL   ??zclGeneral_SendGroupResponse?relay; Banked call to: zclGeneral_SendGroupResponse
   \   00028C   7404         MOV     A,#0x4
   \   00028E   12....       LCALL   ?DEALLOC_XSTACK8
   2040                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   000291   75..FF       MOV     ?V0,#-0x1
   2041                }
   2042                break;
   \   000294   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_23 & 0xFFFF
   2043          
   2044              case COMMAND_GROUP_REMOVE_ALL:
   2045                {
   2046                  uint8 numGroups;
   2047                  uint16 groupList[APS_MAX_GROUPS];
   2048          
   2049                  if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   000297                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000297   7416         MOV     A,#0x16
   \   000299   12....       LCALL   ?XSTACK_DISP101_8
   \   00029C   8E82         MOV     DPL,R6
   \   00029E   8F83         MOV     DPH,R7
   \   0002A0   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0002A3   12....       LCALL   ??aps_FindAllGroupsForEndpoint?relay; Banked call to: aps_FindAllGroupsForEndpoint
   \   0002A6   E9           MOV     A,R1
   \   0002A7   F5..         MOV     ?V2,A
   \   0002A9   7003         JNZ     $+5
   \   0002AB   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_23 & 0xFFFF
   2050                  {
   2051                    for ( i = 0; i < numGroups; i++ )
   \   0002AE   75..00       MOV     ?V1,#0x0
   2052                    {
   2053          #if defined ( ZCL_SCENES )
   2054                      zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
   \                     ??zclGeneral_ProcessInGroupsServer_24:
   \   0002B1                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   0002B1   A8..         MOV     R0,?V1
   \   0002B3   E8           MOV     A,R0
   \   0002B4   28           ADD     A,R0
   \   0002B5   F8           MOV     R0,A
   \   0002B6   E4           CLR     A
   \   0002B7   33           RLC     A
   \   0002B8   F9           MOV     R1,A
   \   0002B9   7416         MOV     A,#0x16
   \   0002BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BE   E582         MOV     A,DPL
   \   0002C0   28           ADD     A,R0
   \   0002C1   F582         MOV     DPL,A
   \   0002C3   E583         MOV     A,DPH
   \   0002C5   39           ADDC    A,R1
   \   0002C6   F583         MOV     DPH,A
   \   0002C8   12....       LCALL   ?Subroutine30 & 0xFFFF
   2055          #endif
   2056                    }
   \                     ??CrossCallReturnLabel_45:
   \   0002CB   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0002CE   12....       LCALL   ??zclGeneral_RemoveAllScenes?relay; Banked call to: zclGeneral_RemoveAllScenes
   \   0002D1   05..         INC     ?V1
   \   0002D3   E5..         MOV     A,?V1
   \   0002D5   C3           CLR     C
   \   0002D6   95..         SUBB    A,?V2
   \   0002D8   40D7         JC      ??zclGeneral_ProcessInGroupsServer_24
   2057          
   2058                    aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \   0002DA                ; Setup parameters for call to function aps_RemoveAllGroup
   \   0002DA   8E82         MOV     DPL,R6
   \   0002DC   8F83         MOV     DPH,R7
   \   0002DE   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   2059                  }
   2060                }
   \                     ??CrossCallReturnLabel_266:
   \   0002E1   12....       LCALL   ??aps_RemoveAllGroup?relay; Banked call to: aps_RemoveAllGroup
   \   0002E4   8051         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2061                break;
   2062          
   2063              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2064                // Retrieve Identify Time
   2065                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2066                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   0002E6                ; Setup parameters for call to function zcl_ReadAttrData
   \   0002E6   E4           CLR     A
   \   0002E7   F5..         MOV     ?V6,A
   \   0002E9   F5..         MOV     ?V7,A
   \   0002EB   78..         MOV     R0,#?V6
   \   0002ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F0   7404         MOV     A,#0x4
   \   0002F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0002F5   88..         MOV     ?V6,R0
   \   0002F7   89..         MOV     ?V7,R1
   \   0002F9   78..         MOV     R0,#?V6
   \   0002FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002FE   7C00         MOV     R4,#0x0
   \   000300   7D00         MOV     R5,#0x0
   \   000302   7A03         MOV     R2,#0x3
   \   000304   7B00         MOV     R3,#0x0
   \   000306   8E82         MOV     DPL,R6
   \   000308   8F83         MOV     DPH,R7
   \   00030A   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00030D   12....       LCALL   ??zcl_ReadAttrData?relay; Banked call to: zcl_ReadAttrData
   \   000310   7404         MOV     A,#0x4
   \   000312   12....       LCALL   ?DEALLOC_XSTACK8
   2067          
   2068                // Is device identifying itself?
   2069                if ( identifyTime > 0 )
   \   000315   7402         MOV     A,#0x2
   \   000317   12....       LCALL   ?XSTACK_DISP0_8
   \   00031A   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00031D   6018         JZ      ??zclGeneral_ProcessInGroupsServer_23
   2070                {
   2071                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   00031F                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00031F   AC..         MOV     R4,?V2
   \   000321   AD..         MOV     R5,?V3
   \   000323   7404         MOV     A,#0x4
   \   000325   12....       LCALL   ?XSTACK_DISP101_8
   \   000328   8E82         MOV     DPL,R6
   \   00032A   8F83         MOV     DPH,R7
   \   00032C   12....       LCALL   ??Subroutine98_0 & 0xFFFF
   2072                }
   \                     ??CrossCallReturnLabel_268:
   \   00032F   12....       LCALL   ??zclGeneral_AddGroup?relay; Banked call to: zclGeneral_AddGroup
   \   000332   8003         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2073                break;
   2074          
   2075              default:
   2076                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   000334   75..01       MOV     ?V0,#0x1
   2077                break;
   2078            }
   2079          
   2080            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_23:
   \   000337   A9..         MOV     R1,?V0
   \   000339   7436         MOV     A,#0x36
   \   00033B   02....       LJMP    ?Subroutine2 & 0xFFFF
   2081          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   F5..         MOV     ?V2,A
   \   000005   78..         MOV     R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FE           MOV     R6,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   000009                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   000009                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000009                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000009                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000009   85..82       MOV     DPL,?V8
   \   00000C   85..83       MOV     DPH,?V9
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   2414         ADD     A,#0x14
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   38           ADDC    A,R0
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0
   2082          
   2083          /*********************************************************************
   2084           * @fn      zclGeneral_ProcessInGroupsClient
   2085           *
   2086           * @brief   Process in the received Groups Command.
   2087           *
   2088           * @param   pInMsg - pointer to the incoming message
   2089           *
   2090           * @return  ZStatus_t
   2091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2092          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2093                                                             zclGeneral_AppCallbacks_t *pCBs )
   2094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   2095            aps_Group_t group;
   2096            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine32 & 0xFFFF
   2097            uint8 grpCnt;
   2098            uint8 nameLen;
   2099            zclGroupRsp_t rsp;
   2100            uint8 i;
   2101            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_256:
   \   000015   75..00       MOV     ?V11,#0x0
   2102          
   2103            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C12         MOV     R4,#0x12
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2104            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2105          
   2106            switch ( pInMsg->hdr.commandID )
   \   000033   E5..         MOV     A,?V0
   \   000035   2418         ADD     A,#0x18
   \   000037   F5..         MOV     ?V0,A
   \   000039   5002         JNC     ??zclGeneral_ProcessInGroupsClient_0
   \   00003B   05..         INC     ?V1
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   A882         MOV     R0,DPL
   \   000044   A983         MOV     R1,DPH
   \   000046   E5..         MOV     A,?V4
   \   000048   2407         ADD     A,#0x7
   \   00004A   F5..         MOV     ?V2,A
   \   00004C   E4           CLR     A
   \   00004D   35..         ADDC    A,?V5
   \   00004F   F5..         MOV     ?V3,A
   \   000051   85..82       MOV     DPL,?V2
   \   000054   F583         MOV     DPH,A
   \   000056   E0           MOVX    A,@DPTR
   \   000057   600F         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   000059   14           DEC     A
   \   00005A   600C         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   00005C   14           DEC     A
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   \   000062   14           DEC     A
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
   2107            {
   2108              case COMMAND_GROUP_ADD_RSP:
   2109              case COMMAND_GROUP_VIEW_RSP:
   2110              case COMMAND_GROUP_REMOVE_RSP:
   2111                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FC           MOV     R4,A
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   EC           MOV     A,R4
   \   000074   F0           MOVX    @DPTR,A
   \   000075   E8           MOV     A,R0
   \   000076   FE           MOV     R6,A
   \   000077   E9           MOV     A,R1
   \   000078   FF           MOV     R7,A
   2112                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \   000079   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine56 & 0xFFFF
   2113          
   2114                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_181:
   \   000082   EC           MOV     A,R4
   \   000083   705A         JNZ     ??CrossCallReturnLabel_182
   \   000085   85..82       MOV     DPL,?V2
   \   000088   85..83       MOV     DPH,?V3
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6401         XRL     A,#0x1
   \   00008E   704F         JNZ     ??CrossCallReturnLabel_182
   2115                {
   2116                  pData += 2;   // Move past ID
   \   000090   EE           MOV     A,R6
   \   000091   2402         ADD     A,#0x2
   \   000093   FE           MOV     R6,A
   \   000094   5001         JNC     ??zclGeneral_ProcessInGroupsClient_4
   \   000096   0F           INC     R7
   2117                  nameLen = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FC           MOV     R4,A
   \   00009D   A3           INC     DPTR
   \   00009E   0E           INC     R6
   \   00009F   AF83         MOV     R7,DPH
   2118                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   0000A1   C3           CLR     C
   \   0000A2   9410         SUBB    A,#0x10
   \   0000A4   4002         JC      ??zclGeneral_ProcessInGroupsClient_5
   2119                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   0000A6   7C0F         MOV     R4,#0xf
   2120                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   0000A8   740C         MOV     A,#0xc
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   EC           MOV     A,R4
   \   0000AE   F0           MOVX    @DPTR,A
   2121                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   8E..         MOV     ?V8,R6
   \   0000B1   8F..         MOV     ?V9,R7
   \   0000B3   75..00       MOV     ?V10,#0x0
   \   0000B6   78..         MOV     R0,#?V8
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BB   7D00         MOV     R5,#0x0
   \   0000BD   7410         MOV     A,#0x10
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   AA82         MOV     R2,DPL
   \   0000C4   AB83         MOV     R3,DPH
   \   0000C6   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   2122                  rsp.grpName = group.name;
   \   0000CE   740C         MOV     A,#0xc
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   A882         MOV     R0,DPL
   \   0000D5   A983         MOV     R1,DPH
   \   0000D7   7408         MOV     A,#0x8
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL   ?Subroutine56 & 0xFFFF
   2123                }
   2124          
   2125                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_182:
   \   0000DF   85..82       MOV     DPL,?V0
   \   0000E2   85..83       MOV     DPH,?V1
   \   0000E5   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000E8   7003         JNZ     $+5
   \   0000EA   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2126                {
   2127                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000ED   12....       LCALL   ?Subroutine18 & 0xFFFF
   2128                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_11:
   \   0000F0   C0E0         PUSH    A
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
   2129                  rsp.grpCnt = 1;
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   7401         MOV     A,#0x1
   \   000101   F0           MOVX    @DPTR,A
   2130                  rsp.grpList = &group.ID;
   \   000102   740A         MOV     A,#0xa
   \   000104   12....       LCALL   ?XSTACK_DISP100_8
   \   000107   7405         MOV     A,#0x5
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   12....       LCALL   ?Subroutine56 & 0xFFFF
   2131                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_183:
   \   00010F   7407         MOV     A,#0x7
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E4           CLR     A
   \   000115   12....       LCALL   ?Subroutine51 & 0xFFFF
   2132          
   2133                  pCBs->pfnGroupRsp( &rsp );
   2134                }
   \                     ??CrossCallReturnLabel_94:
   \   000118   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00011B   12....       LCALL   ?CALL_IND
   \   00011E   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2135                break;
   2136          
   2137              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2138                {
   2139                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   000121   75..00       MOV     ?V6,#0x0
   \   000124   75..00       MOV     ?V7,#0x0
   2140                  rsp.capacity = *pData++;
   \   000127   8E82         MOV     DPL,R6
   \   000129   8F83         MOV     DPH,R7
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   C0E0         PUSH    A
   \   00012E   7407         MOV     A,#0x7
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   D0E0         POP     A
   \   000135   F0           MOVX    @DPTR,A
   \   000136   E8           MOV     A,R0
   \   000137   FE           MOV     R6,A
   \   000138   E9           MOV     A,R1
   \   000139   FF           MOV     R7,A
   2141                  grpCnt = *pData++;
   \   00013A   8E82         MOV     DPL,R6
   \   00013C   8F83         MOV     DPH,R7
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V8,A
   \   000141   A3           INC     DPTR
   \   000142   0E           INC     R6
   \   000143   AF83         MOV     R7,DPH
   2142          
   2143                  if ( grpCnt > 0 )
   \   000145   6051         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2144                  {
   2145                    // Allocate space for the group list
   2146                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   000147                ; Setup parameters for call to function osal_mem_alloc
   \   000147   25E0         ADD     A,0xE0 /* A   */
   \   000149   FA           MOV     R2,A
   \   00014A   E4           CLR     A
   \   00014B   33           RLC     A
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000150   8A..         MOV     ?V6,R2
   \   000152   8B..         MOV     ?V7,R3
   2147                    if ( grpList != NULL )
   \   000154   EA           MOV     A,R2
   \   000155   45..         ORL     A,?V7
   \   000157   603F         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2148                    {
   2149                      rsp.grpCnt = grpCnt;
   \   000159   7404         MOV     A,#0x4
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E5..         MOV     A,?V8
   \   000160   F0           MOVX    @DPTR,A
   2150                      for ( i = 0; i < grpCnt; i++ )
   \   000161   7C00         MOV     R4,#0x0
   \   000163   802D         SJMP    ??zclGeneral_ProcessInGroupsClient_8
   2151                      {
   2152                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_9:
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   FA           MOV     R2,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F8           MOV     R0,A
   \   00016E   E4           CLR     A
   \   00016F   C8           XCH     A,R0
   \   000170   F9           MOV     R1,A
   \   000171   EA           MOV     A,R2
   \   000172   28           ADD     A,R0
   \   000173   E4           CLR     A
   \   000174   39           ADDC    A,R1
   \   000175   FB           MOV     R3,A
   \   000176   EC           MOV     A,R4
   \   000177   25E0         ADD     A,0xE0 /* A   */
   \   000179   F8           MOV     R0,A
   \   00017A   E4           CLR     A
   \   00017B   33           RLC     A
   \   00017C   F9           MOV     R1,A
   \   00017D   E5..         MOV     A,?V6
   \   00017F   28           ADD     A,R0
   \   000180   F582         MOV     DPL,A
   \   000182   E5..         MOV     A,?V7
   \   000184   39           ADDC    A,R1
   \   000185   F583         MOV     DPH,A
   \   000187   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2153                        pData += 2;
   \                     ??CrossCallReturnLabel_215:
   \   00018A   EE           MOV     A,R6
   \   00018B   2402         ADD     A,#0x2
   \   00018D   FE           MOV     R6,A
   \   00018E   5001         JNC     ??zclGeneral_ProcessInGroupsClient_10
   \   000190   0F           INC     R7
   2154                      }
   \                     ??zclGeneral_ProcessInGroupsClient_10:
   \   000191   0C           INC     R4
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   000192   EC           MOV     A,R4
   \   000193   C3           CLR     C
   \   000194   95..         SUBB    A,?V8
   \   000196   40CD         JC      ??zclGeneral_ProcessInGroupsClient_9
   2155                    }
   2156                  }
   2157          
   2158                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   000198   85..82       MOV     DPL,?V0
   \   00019B   85..83       MOV     DPH,?V1
   \   00019E   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0001A1   6021         JZ      ??zclGeneral_ProcessInGroupsClient_11
   2159                  {
   2160                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001A3   12....       LCALL   ?Subroutine18 & 0xFFFF
   2161                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_12:
   \   0001A6   C0E0         PUSH    A
   \   0001A8   7402         MOV     A,#0x2
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   D0E0         POP     A
   \   0001AF   F0           MOVX    @DPTR,A
   2162                    rsp.grpList = grpList;
   \   0001B0   7405         MOV     A,#0x5
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   E5..         MOV     A,?V6
   \   0001B7   F0           MOVX    @DPTR,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E5..         MOV     A,?V7
   \   0001BB   12....       LCALL   ?Subroutine51 & 0xFFFF
   2163          
   2164                    pCBs->pfnGroupRsp( &rsp );
   2165                  }
   \                     ??CrossCallReturnLabel_95:
   \   0001BE   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   0001C1   12....       LCALL   ?CALL_IND
   2166          
   2167                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_11:
   \   0001C4   E5..         MOV     A,?V6
   \   0001C6   45..         ORL     A,?V7
   \   0001C8   600C         JZ      ??zclGeneral_ProcessInGroupsClient_6
   2168                  {
   2169                    zcl_mem_free( grpList );
   \   0001CA                ; Setup parameters for call to function osal_mem_free
   \   0001CA   AA..         MOV     R2,?V6
   \   0001CC   AB..         MOV     R3,?V7
   \   0001CE   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001D1   8003         SJMP    ??zclGeneral_ProcessInGroupsClient_6
   2170                  }
   2171                }
   2172                break;
   2173          
   2174              default:
   2175                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0001D3   75..01       MOV     ?V11,#0x1
   2176                break;
   2177            }
   2178          
   2179            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   0001D6   A9..         MOV     R1,?V11
   \   0001D8   741C         MOV     A,#0x1c
   \   0001DA   02....       LJMP    ?Subroutine2 & 0xFFFF
   2180          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V4
   \   000003   85..83       MOV     DPH,?V5
   \   000006   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine96_0
   \   00000C                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   740A         MOV     A,#0xa
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   2181          #endif // ZCL_GROUPS
   2182          
   2183          #if defined( ZCL_SCENES )
   2184          #if !defined ( ZCL_STANDALONE )
   2185          /*********************************************************************
   2186           * @fn      zclGeneral_AddScene
   2187           *
   2188           * @brief   Add a scene for an endpoint
   2189           *
   2190           * @param   endpoint -
   2191           * @param   scene - new scene item
   2192           *
   2193           * @return  ZStatus_t
   2194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2195          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   \                     zclGeneral_AddScene:
   2196          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2197          //###################################################################
   2198          //###################################################################
   2199          #if defined(SCENE_SELECTOR) || defined(SCENE_SELECTOR_TOUCHKEY)
   2200          	addSceneSelector_setSceneID(endpoint, scene);
   \   000005                ; Setup parameters for call to function addSceneSelector_setSceneID
   \   000005   12....       LCALL   ??addSceneSelector_setSceneID?relay; Banked call to: addSceneSelector_setSceneID
   2201          	return SUCCESS;
   \   000008   80..         SJMP    ?Subroutine5
   2202          
   2203          #else
   2204          	zclGenSceneItem_t *pNewItem;
   2205          	zclGenSceneItem_t *pLoop;
   2206          
   2207          	// Fill in the new profile list
   2208          	pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   2209          	if ( pNewItem == NULL )
   2210          	return ( ZMemError );
   2211          
   2212          	// Fill in the plugin record.
   2213          	pNewItem->next = (zclGenSceneItem_t *)NULL;
   2214          	pNewItem->endpoint = endpoint;
   2215          	zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   2216          
   2217          	// Find spot in list
   2218          	if (  zclGenSceneTable == NULL )
   2219          	{
   2220          	zclGenSceneTable = pNewItem;
   2221          	}
   2222          	else
   2223          	{
   2224          	// Look for end of list
   2225          	pLoop = zclGenSceneTable;
   2226          	while ( pLoop->next != NULL )
   2227          	pLoop = pLoop->next;
   2228          
   2229          	// Put new item at end of list
   2230          	pLoop->next = pNewItem;
   2231          	}
   2232          
   2233          	// Update NV
   2234          	zclGeneral_ScenesWriteNV();
   2235          
   2236          	return ( ZSuccess );
   2237          
   2238          #endif
   2239          //###################################################################
   2240          //###################################################################
   2241          }
   2242          #endif // ZCL_STANDALONE
   2243          
   2244          #if !defined ( ZCL_STANDALONE )
   2245          /*********************************************************************
   2246           * @fn      zclGeneral_FindScene
   2247           *
   2248           * @brief   Find a scene with endpoint and sceneID
   2249           *
   2250           * @param   endpoint -
   2251           * @param   groupID - what group the scene belongs to
   2252           * @param   sceneID - ID to look for scene
   2253           *
   2254           * @return  a pointer to the scene information, NULL if not found
   2255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2256          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_FindScene:
   2257          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   2258            zclGenSceneItem_t *pLoop;
   2259          
   2260            // Look for end of list
   2261            pLoop = zclGenSceneTable;
   \   000007   90....       MOV     DPTR,#zclGenSceneTable
   \   00000A   8004         SJMP    ??zclGeneral_FindScene_0
   2262            while ( pLoop )
   2263            {
   2264              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2265                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2266              {
   2267                return ( &(pLoop->scene) );
   2268              }
   2269              pLoop = pLoop->next;
   \                     ??zclGeneral_FindScene_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \                     ??zclGeneral_FindScene_0:
   \   000010   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6036         JZ      ??zclGeneral_FindScene_2
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6D           XRL     A,R5
   \   00001F   6005         JZ      ??zclGeneral_FindScene_3
   \   000021   74FF         MOV     A,#-0x1
   \   000023   6D           XRL     A,R5
   \   000024   70E6         JNZ     ??zclGeneral_FindScene_1
   \                     ??zclGeneral_FindScene_3:
   \   000026   EE           MOV     A,R6
   \   000027   2403         ADD     A,#0x3
   \   000029   F8           MOV     R0,A
   \   00002A   E4           CLR     A
   \   00002B   3F           ADDC    A,R7
   \   00002C   F9           MOV     R1,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6A           XRL     A,R2
   \   000033   7003         JNZ     ??zclGeneral_FindScene_4
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6B           XRL     A,R3
   \                     ??zclGeneral_FindScene_4:
   \   000038   70D2         JNZ     ??zclGeneral_FindScene_1
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6C           XRL     A,R4
   \   000045   70C5         JNZ     ??zclGeneral_FindScene_1
   \   000047   E8           MOV     A,R0
   \   000048   FA           MOV     R2,A
   \   000049   E9           MOV     A,R1
   \   00004A   FB           MOV     R3,A
   \   00004B   8004         SJMP    ??zclGeneral_FindScene_5
   2270            }
   2271          
   2272            return ( (zclGeneral_Scene_t *)NULL );
   \                     ??zclGeneral_FindScene_2:
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \                     ??zclGeneral_FindScene_5:
   \   000051   80..         SJMP    ??Subroutine88_0
   2273          }
   2274          #endif // ZCL_STANDALONE
   2275          
   2276          #if !defined ( ZCL_STANDALONE )
   2277          /*********************************************************************
   2278           * @fn      zclGeneral_FindAllScenesForGroup
   2279           *
   2280           * @brief   Find all the scenes with groupID
   2281           *
   2282           * @param   endpoint - endpoint to look for
   2283           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2284           *
   2285           * @return  number of scenes copied to sceneList
   2286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2287          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   \                     zclGeneral_FindAllScenesForGroup:
   2288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2289            zclGenSceneItem_t *pLoop;
   2290            uint8 cnt = 0;
   \   000007   75..00       MOV     ?V0,#0x0
   2291          
   2292            // Look for end of list
   2293            pLoop = zclGenSceneTable;
   \   00000A   90....       MOV     DPTR,#zclGenSceneTable
   \   00000D   803A         SJMP    ??zclGeneral_FindAllScenesForGroup_0
   2294            while ( pLoop )
   2295            {
   2296              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   \                     ??zclGeneral_FindAllScenesForGroup_1:
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   65..         XRL     A,?V1
   \   000018   702B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6A           XRL     A,R2
   \   000023   7003         JNZ     ??zclGeneral_FindAllScenesForGroup_3
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6B           XRL     A,R3
   \                     ??zclGeneral_FindAllScenesForGroup_3:
   \   000028   701B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   2297                sceneList[cnt++] = pLoop->scene.ID;
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C0E0         PUSH    A
   \   000036   AE..         MOV     R6,?V0
   \   000038   EC           MOV     A,R4
   \   000039   2E           ADD     A,R6
   \   00003A   F582         MOV     DPL,A
   \   00003C   E4           CLR     A
   \   00003D   3D           ADDC    A,R5
   \   00003E   F583         MOV     DPH,A
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   05..         INC     ?V0
   2298              pLoop = pLoop->next;
   \                     ??zclGeneral_FindAllScenesForGroup_2:
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   2299            }
   \                     ??zclGeneral_FindAllScenesForGroup_0:
   \   000049   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00004C   70C1         JNZ     ??zclGeneral_FindAllScenesForGroup_1
   2300            return ( cnt );
   \   00004E                REQUIRE ?Subroutine9
   \   00004E                ; // Fall through to label ?Subroutine9
   2301          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A9..         MOV     R1,?V0
   \   000002   02....       LJMP    ??Subroutine102_0 & 0xFFFF
   2302          #endif // ZCL_STANDALONE
   2303          
   2304          #if !defined ( ZCL_STANDALONE )
   2305          /*********************************************************************
   2306           * @fn      zclGeneral_RemoveScene
   2307           *
   2308           * @brief   Remove a scene with endpoint and sceneID
   2309           *
   2310           * @param   endpoint -
   2311           * @param   groupID - what group the scene belongs to
   2312           * @param   sceneID - ID to look for scene
   2313           *
   2314           * @return  TRUE if removed, FALSE if not found
   2315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2316          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_RemoveScene:
   2317          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   2318            zclGenSceneItem_t *pLoop;
   2319            zclGenSceneItem_t *pPrev;
   2320          
   2321            // Look for end of list
   2322            pLoop = zclGenSceneTable;
   \   000009   90....       MOV     DPTR,#zclGenSceneTable
   \   00000C   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   2323            pPrev = NULL;
   \                     ??CrossCallReturnLabel_240:
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   800B         SJMP    ??CrossCallReturnLabel_241
   2324            while ( pLoop )
   2325            {
   2326              if ( pLoop->endpoint == endpoint
   2327                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2328              {
   2329                if ( pPrev == NULL )
   2330                  zclGenSceneTable = pLoop->next;
   2331                else
   2332                  pPrev->next = pLoop->next;
   2333          
   2334                // Free the memory
   2335                zcl_mem_free( pLoop );
   2336          
   2337                // Update NV
   2338                zclGeneral_ScenesWriteNV();
   2339          
   2340                return ( TRUE );
   2341              }
   2342              pPrev = pLoop;
   \                     ??zclGeneral_RemoveScene_0:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   2343              pLoop = pLoop->next;
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   604C         JZ      ??zclGeneral_RemoveScene_1
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6E           XRL     A,R6
   \   00002C   70E7         JNZ     ??zclGeneral_RemoveScene_0
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6A           XRL     A,R2
   \   000037   7003         JNZ     ??zclGeneral_RemoveScene_2
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6B           XRL     A,R3
   \                     ??zclGeneral_RemoveScene_2:
   \   00003C   70D7         JNZ     ??zclGeneral_RemoveScene_0
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6F           XRL     A,R7
   \   000049   70CA         JNZ     ??zclGeneral_RemoveScene_0
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000052   EC           MOV     A,R4
   \   000053   4D           ORL     A,R5
   \   000054   7005         JNZ     ??zclGeneral_RemoveScene_3
   \   000056   90....       MOV     DPTR,#zclGenSceneTable
   \   000059   8004         SJMP    ??zclGeneral_RemoveScene_4
   \                     ??zclGeneral_RemoveScene_3:
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \                     ??zclGeneral_RemoveScene_4:
   \   00005F   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   E8           MOV     A,R0
   \   000063   FA           MOV     R2,A
   \   000064   E9           MOV     A,R1
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000069                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000069   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay; Banked call to: zclGeneral_ScenesWriteNV
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   8002         SJMP    ??zclGeneral_RemoveScene_5
   2344            }
   2345          
   2346            return ( FALSE );
   \                     ??zclGeneral_RemoveScene_1:
   \   000070   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RemoveScene_5:
   \   000072   02....       LJMP    ??Subroutine88_0 & 0xFFFF
   2347          }
   2348          #endif // ZCL_STANDALONE
   2349          
   2350          #if !defined ( ZCL_STANDALONE )
   2351          /*********************************************************************
   2352           * @fn      zclGeneral_RemoveAllScenes
   2353           *
   2354           * @brief   Remove all scenes with endpoint and group Id
   2355           *
   2356           * @param   endpoint -
   2357           * @param   groupID - ID to look for group
   2358           *
   2359           * @return  none
   2360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2361          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   \                     zclGeneral_RemoveAllScenes:
   2362          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   2363            zclGenSceneItem_t *pLoop;
   2364            zclGenSceneItem_t *pPrev;
   2365            zclGenSceneItem_t *pNext;
   2366          
   2367            // Look for end of list
   2368            pLoop = zclGenSceneTable;
   \   00000B   90....       MOV     DPTR,#zclGenSceneTable
   \   00000E   12....       LCALL   ?Subroutine39 & 0xFFFF
   2369            pPrev = NULL;
   \                     ??CrossCallReturnLabel_72:
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   8011         SJMP    ??zclGeneral_RemoveAllScenes_0
   2370            while ( pLoop )
   2371            {
   2372              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2373              {
   2374                if ( pPrev == NULL )
   2375                  zclGenSceneTable = pLoop->next;
   2376                else
   2377                  pPrev->next = pLoop->next;
   \                     ??zclGeneral_RemoveAllScenes_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \                     ??zclGeneral_RemoveAllScenes_2:
   \   00001B   12....       LCALL   ?Subroutine55 & 0xFFFF
   2378                pNext = pLoop->next;
   \                     ??CrossCallReturnLabel_99:
   \   00001E   12....       LCALL   ?Subroutine36 & 0xFFFF
   2379          
   2380                // Free the memory
   2381                zcl_mem_free( pLoop );
   \                     ??CrossCallReturnLabel_58:
   \   000021                ; Setup parameters for call to function osal_mem_free
   \   000021   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2382                pLoop = pNext;
   \   000024   AA..         MOV     R2,?V2
   \   000026   AB..         MOV     R3,?V3
   \                     ??zclGeneral_RemoveAllScenes_0:
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   603A         JZ      ??zclGeneral_RemoveAllScenes_3
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   65..         XRL     A,?V4
   \   000035   7022         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   65..         XRL     A,?V0
   \   000041   7004         JNZ     ??zclGeneral_RemoveAllScenes_5
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   65..         XRL     A,?V1
   \                     ??zclGeneral_RemoveAllScenes_5:
   \   000047   7010         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000050   EE           MOV     A,R6
   \   000051   4F           ORL     A,R7
   \   000052   70C3         JNZ     ??zclGeneral_RemoveAllScenes_1
   \   000054   90....       MOV     DPTR,#zclGenSceneTable
   \   000057   80C2         SJMP    ??zclGeneral_RemoveAllScenes_2
   2383              }
   2384              else
   2385              {
   2386                pPrev = pLoop;
   \                     ??zclGeneral_RemoveAllScenes_4:
   \   000059   EA           MOV     A,R2
   \   00005A   FE           MOV     R6,A
   \   00005B   EB           MOV     A,R3
   \   00005C   FF           MOV     R7,A
   2387                pLoop = pLoop->next;
   \   00005D   8A82         MOV     DPL,R2
   \   00005F   8B83         MOV     DPH,R3
   \   000061   12....       LCALL   ?Subroutine39 & 0xFFFF
   2388              }
   2389            }
   \                     ??CrossCallReturnLabel_73:
   \   000064   80C2         SJMP    ??zclGeneral_RemoveAllScenes_0
   2390          
   2391            // Update NV
   2392            zclGeneral_ScenesWriteNV();
   \                     ??zclGeneral_RemoveAllScenes_3:
   \   000066                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000066   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay; Banked call to: zclGeneral_ScenesWriteNV
   2393          }
   \   000069   7F05         MOV     R7,#0x5
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
   2394          #endif // ZCL_STANDALONE
   2395          
   2396          #if !defined ( ZCL_STANDALONE )
   2397          /*********************************************************************
   2398           * @fn      zclGeneral_CountScenes
   2399           *
   2400           * @brief   Count the number of scenes for an endpoint
   2401           *
   2402           * @param   endpoint -
   2403           *
   2404           * @return  number of scenes assigned to an endpoint
   2405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2406          uint8 zclGeneral_CountScenes( uint8 endpoint )
   \                     zclGeneral_CountScenes:
   2407          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2408            zclGenSceneItem_t *pLoop;
   2409            uint8 cnt = 0;
   \   000006   7900         MOV     R1,#0x0
   2410          
   2411            // Look for end of list
   2412            pLoop = zclGenSceneTable;
   \   000008   90....       MOV     DPTR,#zclGenSceneTable
   \   00000B   800F         SJMP    ??zclGeneral_CountScenes_0
   2413            while ( pLoop )
   2414            {
   2415              if ( pLoop->endpoint == endpoint  )
   \                     ??zclGeneral_CountScenes_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   68           XRL     A,R0
   \   000015   7001         JNZ     ??zclGeneral_CountScenes_2
   2416                cnt++;
   \   000017   09           INC     R1
   2417              pLoop = pLoop->next;
   \                     ??zclGeneral_CountScenes_2:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   2418            }
   \                     ??zclGeneral_CountScenes_0:
   \   00001C   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00001F   70EC         JNZ     ??zclGeneral_CountScenes_1
   2419            return ( cnt );
   \   000021   80..         SJMP    ?Subroutine4
   2420          }
   2421          #endif
   2422          
   2423          #if !defined ( ZCL_STANDALONE )
   2424          /*********************************************************************
   2425           * @fn      zclGeneral_CountAllScenes
   2426           *
   2427           * @brief   Count the total number of scenes
   2428           *
   2429           * @param   none
   2430           *
   2431           * @return  number of scenes
   2432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2433          uint8 zclGeneral_CountAllScenes( void )
   \                     zclGeneral_CountAllScenes:
   2434          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2435            zclGenSceneItem_t *pLoop;
   2436            uint8 cnt = 0;
   \   000004   7900         MOV     R1,#0x0
   2437          
   2438            // Look for end of list
   2439            pLoop = zclGenSceneTable;
   \   000006   90....       MOV     DPTR,#zclGenSceneTable
   \   000009   8001         SJMP    ??zclGeneral_CountAllScenes_0
   2440            while ( pLoop )
   2441            {
   2442              cnt++;
   \                     ??zclGeneral_CountAllScenes_1:
   \   00000B   09           INC     R1
   2443              pLoop = pLoop->next;
   2444            }
   \                     ??zclGeneral_CountAllScenes_0:
   \   00000C   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   70F2         JNZ     ??zclGeneral_CountAllScenes_1
   2445            return ( cnt );
   \   000019                REQUIRE ?Subroutine4
   \   000019                ; // Fall through to label ?Subroutine4
   2446          }
   2447          #endif // ZCL_STANDALONE
   2448          
   2449          /*********************************************************************
   2450           * @fn      zclGeneral_ReadSceneCountCB
   2451           *
   2452           * @brief   Read the number of scenes currently in the device's
   2453           *          scene table (i.e., the Scene Count attribute).
   2454           *
   2455           *          Note: This function gets called only when the pointer
   2456           *                'dataPtr' to the Scene Count attribute value is
   2457           *                NULL in the attribute database registered with
   2458           *                the ZCL.
   2459           *
   2460           * @param   clusterId - cluster that attribute belongs to
   2461           * @param   attrId - attribute to be read or written
   2462           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2463           * @param   pValue - pointer to attribute value
   2464           * @param   pLen - pointer to length of attribute value read
   2465           *
   2466           * @return  status
   2467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2468          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   \                     zclGeneral_ReadSceneCountCB:
   2469                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2470          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2471            ZStatus_t status = ZCL_STATUS_SUCCESS;
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   2472          
   2473            // This callback function should only be called for the Scene Count attribute
   2474            switch ( oper )
   \                     ??CrossCallReturnLabel_174:
   \   000012   E5..         MOV     A,?V1
   \   000014   6014         JZ      ??zclGeneral_ReadSceneCountCB_0
   \   000016   14           DEC     A
   \   000017   701D         JNZ     ??zclGeneral_ReadSceneCountCB_1
   2475            {
   2476              case ZCL_OPER_LEN:
   2477                *pLen = 1; // uint8
   2478                break;
   2479          
   2480              case ZCL_OPER_READ:
   2481                *pValue = zclGeneral_CountAllScenes();
   \   000019                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000019   12....       LCALL   ??zclGeneral_CountAllScenes?relay; Banked call to: zclGeneral_CountAllScenes
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
   2482          
   2483                if ( pLen != NULL )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   600F         JZ      ??zclGeneral_ReadSceneCountCB_2
   2484                {
   2485                  *pLen = 1;
   \                     ??zclGeneral_ReadSceneCountCB_0:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8003         SJMP    ??zclGeneral_ReadSceneCountCB_2
   2486                }
   2487                break;
   2488          
   2489              case ZCL_OPER_WRITE:
   2490                // Fall through
   2491          
   2492              default:
   2493                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   \                     ??zclGeneral_ReadSceneCountCB_1:
   \   000036   75..C1       MOV     ?V0,#-0x3f
   2494                break;
   2495            }
   2496          
   2497            return ( status );
   \                     ??zclGeneral_ReadSceneCountCB_2:
   \   000039   02....       LJMP    ?Subroutine9 & 0xFFFF
   2498          }
   2499          
   2500          /*********************************************************************
   2501           * @fn      zclGeneral_ProcessInScenesServer
   2502           *
   2503           * @brief   Process in the received Scenes Command.
   2504           *
   2505           * @param   pInMsg - pointer to the incoming message
   2506           *
   2507           * @return  ZStatus_t
   2508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006                REQUIRE ??Subroutine79_0
   \   000006                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine86_0
   \   000004                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine87_0
   \   000002                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2509          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesServer:
   2510                                                             zclGeneral_AppCallbacks_t *pCBs )
   2511          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV     A,#-0x3c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
   2512            zclGeneral_Scene_t scene;
   2513            zclGeneral_Scene_t *pScene;
   2514            uint8 *pData = pInMsg->pData;
   \   000012   EA           MOV     A,R2
   \   000013   2408         ADD     A,#0x8
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V3
   \   00001A   F5..         MOV     ?V9,A
   \   00001C   85..82       MOV     DPL,?V8
   \   00001F   F583         MOV     DPH,A
   \   000021   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   2515            uint8 nameLen;
   2516            uint8 status;
   2517            uint8 sceneCnt = 0;
   \                     ??CrossCallReturnLabel_254:
   \   000024   75..00       MOV     ?V1,#0x0
   2518            uint8 *sceneList = NULL;
   \   000027   75..00       MOV     ?V4,#0x0
   \   00002A   75..00       MOV     ?V5,#0x0
   2519            uint8 sendRsp = TRUE;
   2520            uint8 nameSupport = FALSE;
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   2521            ZStatus_t stat = ZSuccess;
   \   000035   75..00       MOV     ?V0,#0x0
   2522          
   2523            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000038                ; Setup parameters for call to function osal_memset
   \   000038   7C37         MOV     R4,#0x37
   \   00003A   FD           MOV     R5,A
   \   00003B   F9           MOV     R1,A
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP101_8
   \   000041   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2524          
   2525            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   000044   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000047   7405         MOV     A,#0x5
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   12....       LCALL   ?Subroutine48 & 0xFFFF
   2526            pData += 2;   // Move past group ID
   \                     ??CrossCallReturnLabel_85:
   \   00004F   5001         JNC     ??zclGeneral_ProcessInScenesServer_0
   \   000051   0F           INC     R7
   2527            scene.ID = *pData++;
   \                     ??zclGeneral_ProcessInScenesServer_0:
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FC           MOV     R4,A
   \   000058   7407         MOV     A,#0x7
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   EC           MOV     A,R4
   \   00005E   12....       LCALL   ?Subroutine49 & 0xFFFF
   2528          
   2529            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_89:
   \   000061   E5..         MOV     A,?V2
   \   000063   2406         ADD     A,#0x6
   \   000065   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000068   85..82       MOV     DPL,?V10
   \   00006B   F583         MOV     DPH,A
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6027         JZ      ??zclGeneral_ProcessInScenesServer_1
   \   000070   14           DEC     A
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??zclGeneral_ProcessInScenesServer_2 & 0xFFFF
   \   000076   14           DEC     A
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??zclGeneral_ProcessInScenesServer_3 & 0xFFFF
   \   00007C   14           DEC     A
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_4 & 0xFFFF
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??zclGeneral_ProcessInScenesServer_5 & 0xFFFF
   \   000088   14           DEC     A
   \   000089   7003         JNZ     $+5
   \   00008B   02....       LJMP    ??zclGeneral_ProcessInScenesServer_6 & 0xFFFF
   \   00008E   14           DEC     A
   \   00008F   7003         JNZ     $+5
   \   000091   02....       LJMP    ??zclGeneral_ProcessInScenesServer_7 & 0xFFFF
   \   000094   02....       LJMP    ??zclGeneral_ProcessInScenesServer_8 & 0xFFFF
   2530            {
   2531              case COMMAND_SCENE_ADD:
   2532          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2533              case COMMAND_SCENE_ENHANCED_ADD:
   2534          #endif // ZCL_LIGHT_LINK_ENHANCE
   2535                // Parse the rest of the incoming message
   2536                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesServer_1:
   \   000097   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00009A   7408         MOV     A,#0x8
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   12....       LCALL   ?Subroutine48 & 0xFFFF
   2537                pData += 2;
   \                     ??CrossCallReturnLabel_86:
   \   0000A2   5001         JNC     ??zclGeneral_ProcessInScenesServer_9
   \   0000A4   0F           INC     R7
   2538          
   2539                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   \                     ??zclGeneral_ProcessInScenesServer_9:
   \   0000A5   85..82       MOV     DPL,?V10
   \   0000A8   85..83       MOV     DPH,?V11
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6440         XRL     A,#0x40
   \   0000AE   702D         JNZ     ??CrossCallReturnLabel_184
   2540                {
   2541                  // Received transition time is in 1/10 second
   2542                  scene.transTime100ms = scene.transTime % 10;
   \   0000B0   7408         MOV     A,#0x8
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F8           MOV     R0,A
   \   0000B7   7A0A         MOV     R2,#0xa
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   12....       LCALL   ?US_DIV_MOD
   \   0000BE   740A         MOV     A,#0xa
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2543                  scene.transTime /= 10;
   \                     ??CrossCallReturnLabel_217:
   \   0000C6   7408         MOV     A,#0x8
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   2544                }
   \                     ??CrossCallReturnLabel_243:
   \   0000CE   7A0A         MOV     R2,#0xa
   \   0000D0   7B00         MOV     R3,#0x0
   \   0000D2   12....       LCALL   ?US_DIV_MOD
   \   0000D5   7408         MOV     A,#0x8
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ?Subroutine56 & 0xFFFF
   2545          
   2546                nameLen= *pData++; // Name length
   \                     ??CrossCallReturnLabel_184:
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F5..         MOV     ?V0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   0E           INC     R6
   \   0000E6   AF83         MOV     R7,DPH
   2547          
   2548                // Retrieve Name Support attribute
   2549                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2550                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   \   0000E8                ; Setup parameters for call to function zcl_ReadAttrData
   \   0000E8   78..         MOV     R0,#?V4
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F2   88..         MOV     ?V4,R0
   \   0000F4   89..         MOV     ?V5,R1
   \   0000F6   78..         MOV     R0,#?V4
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   7C04         MOV     R4,#0x4
   \   0000FD   7D00         MOV     R5,#0x0
   \   0000FF   7A05         MOV     R2,#0x5
   \   000101   7B00         MOV     R3,#0x0
   \   000103   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000106   12....       LCALL   ??zcl_ReadAttrData?relay; Banked call to: zcl_ReadAttrData
   \   000109   7404         MOV     A,#0x4
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   2551          
   2552                if ( nameSupport )
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   E0           MOVX    A,@DPTR
   \   000115   602C         JZ      ??zclGeneral_ProcessInScenesServer_10
   2553                {
   2554                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   000117   E5..         MOV     A,?V0
   \   000119   C3           CLR     C
   \   00011A   9410         SUBB    A,#0x10
   \   00011C   4003         JC      ??zclGeneral_ProcessInScenesServer_11
   2555                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   00011E   75..0F       MOV     ?V0,#0xf
   2556                  scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesServer_11:
   \   000121   740C         MOV     A,#0xc
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   E5..         MOV     A,?V0
   \   000128   12....       LCALL   ?Subroutine52 & 0xFFFF
   2557                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2558                }
   \                     ??CrossCallReturnLabel_96:
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012E   AC..         MOV     R4,?V0
   \   000130   7D00         MOV     R5,#0x0
   \   000132   7410         MOV     A,#0x10
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   AA82         MOV     R2,DPL
   \   000139   AB83         MOV     R3,DPH
   \   00013B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00013E   7403         MOV     A,#0x3
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
   2559          
   2560                pData += nameLen; // move past name, use original length
   \                     ??zclGeneral_ProcessInScenesServer_10:
   \   000143   A8..         MOV     R0,?V0
   \   000145   EE           MOV     A,R6
   \   000146   28           ADD     A,R0
   \   000147   FE           MOV     R6,A
   \   000148   E4           CLR     A
   \   000149   3F           ADDC    A,R7
   \   00014A   FF           MOV     R7,A
   2561          
   2562                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   \   00014B   85..82       MOV     DPL,?V8
   \   00014E   85..83       MOV     DPH,?V9
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F8           MOV     R0,A
   \   000153   EE           MOV     A,R6
   \   000154   F9           MOV     R1,A
   \   000155   85..82       MOV     DPL,?V2
   \   000158   85..83       MOV     DPH,?V3
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   C3           CLR     C
   \   000167   99           SUBB    A,R1
   \   000168   28           ADD     A,R0
   \   000169   F8           MOV     R0,A
   \   00016A   741C         MOV     A,#0x1c
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   E8           MOV     A,R0
   \   000170   F0           MOVX    @DPTR,A
   2563                if ( scene.extLen > 0 )
   \   000171   602E         JZ      ??zclGeneral_ProcessInScenesServer_12
   2564                {
   2565                  // Copy the extention field(s)
   2566                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   000173   C3           CLR     C
   \   000174   9420         SUBB    A,#0x20
   \   000176   4003         JC      ??zclGeneral_ProcessInScenesServer_13
   2567                  {
   2568                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   000178   741F         MOV     A,#0x1f
   \   00017A   F0           MOVX    @DPTR,A
   2569                  }
   2570                  zcl_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclGeneral_ProcessInScenesServer_13:
   \   00017B                ; Setup parameters for call to function osal_memcpy
   \   00017B   8E..         MOV     ?V4,R6
   \   00017D   8F..         MOV     ?V5,R7
   \   00017F   75..00       MOV     ?V6,#0x0
   \   000182   78..         MOV     R0,#?V4
   \   000184   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000187   741F         MOV     A,#0x1f
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   FC           MOV     R4,A
   \   00018E   7D00         MOV     R5,#0x0
   \   000190   7420         MOV     A,#0x20
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   AA82         MOV     R2,DPL
   \   000197   AB83         MOV     R3,DPH
   \   000199   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00019C   7403         MOV     A,#0x3
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   2571                }
   2572          
   2573                if ( scene.groupID == 0x0000 ||
   2574                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_12:
   \   0001A1   7405         MOV     A,#0x5
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0001A9   6015         JZ      ??zclGeneral_ProcessInScenesServer_14
   \   0001AB                ; Setup parameters for call to function aps_FindGroup
   \   0001AB   7405         MOV     A,#0x5
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0001B3   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   0001B6   8B..         MOV     ?V1,R3
   \   0001B8   EA           MOV     A,R2
   \   0001B9   45..         ORL     A,?V1
   \   0001BB   7003         JNZ     $+5
   \   0001BD   02....       LJMP    ??zclGeneral_ProcessInScenesServer_15 & 0xFFFF
   2575                {
   2576                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2577                  // does and the corresponding Group exits
   2578                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_14:
   \   0001C0                ; Setup parameters for call to function zclGeneral_FindScene
   \   0001C0   7407         MOV     A,#0x7
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FC           MOV     R4,A
   \   0001C7   7405         MOV     A,#0x5
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0001CF   12....       LCALL   ??zclGeneral_FindScene?relay; Banked call to: zclGeneral_FindScene
   \   0001D2   8A..         MOV     ?V0,R2
   \   0001D4   8B..         MOV     ?V1,R3
   \   0001D6   AE..         MOV     R6,?V0
   \   0001D8   AF..         MOV     R7,?V1
   2579                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   0001DA   EE           MOV     A,R6
   \   0001DB   4F           ORL     A,R7
   \   0001DC   700C         JNZ     ??zclGeneral_ProcessInScenesServer_16
   \   0001DE                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0001DE   12....       LCALL   ??zclGeneral_CountAllScenes?relay; Banked call to: zclGeneral_CountAllScenes
   \   0001E1   E9           MOV     A,R1
   \   0001E2   C3           CLR     C
   \   0001E3   9410         SUBB    A,#0x10
   \   0001E5   4003         JC      $+5
   \   0001E7   02....       LJMP    ??zclGeneral_ProcessInScenesServer_17 & 0xFFFF
   2580                  {
   2581                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_16:
   \   0001EA   75..00       MOV     ?V0,#0x0
   2582                    if ( pScene != NULL )
   \   0001ED   EE           MOV     A,R6
   \   0001EE   4F           ORL     A,R7
   \   0001EF   607D         JZ      ??zclGeneral_ProcessInScenesServer_18
   2583                    {
   2584                      // The Scene already exists so update it
   2585                      pScene->transTime = scene.transTime;
   \   0001F1   7408         MOV     A,#0x8
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0001F9   8E82         MOV     DPL,R6
   \   0001FB   8F83         MOV     DPH,R7
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   12....       LCALL   ?Subroutine56 & 0xFFFF
   2586                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   \                     ??CrossCallReturnLabel_185:
   \   000203                ; Setup parameters for call to function osal_memcpy
   \   000203   740C         MOV     A,#0xc
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   A982         MOV     R1,DPL
   \   00020A   AA83         MOV     R2,DPH
   \   00020C   89..         MOV     ?V4,R1
   \   00020E   8A..         MOV     ?V5,R2
   \   000210   75..00       MOV     ?V6,#0x0
   \   000213   78..         MOV     R0,#?V4
   \   000215   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000218   7C10         MOV     R4,#0x10
   \   00021A   7D00         MOV     R5,#0x0
   \   00021C   EE           MOV     A,R6
   \   00021D   2407         ADD     A,#0x7
   \   00021F   FA           MOV     R2,A
   \   000220   E4           CLR     A
   \   000221   3F           ADDC    A,R7
   \   000222   FB           MOV     R3,A
   \   000223   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000226   7403         MOV     A,#0x3
   \   000228   12....       LCALL   ?DEALLOC_XSTACK8
   2587          
   2588                      // Use the new extention field(s)
   2589                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   \   00022B                ; Setup parameters for call to function osal_memcpy
   \   00022B   741D         MOV     A,#0x1d
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   A982         MOV     R1,DPL
   \   000232   AA83         MOV     R2,DPH
   \   000234   89..         MOV     ?V4,R1
   \   000236   8A..         MOV     ?V5,R2
   \   000238   78..         MOV     R0,#?V4
   \   00023A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023D   741F         MOV     A,#0x1f
   \   00023F   12....       LCALL   ?XSTACK_DISP0_8
   \   000242   E0           MOVX    A,@DPTR
   \   000243   FC           MOV     R4,A
   \   000244   7D00         MOV     R5,#0x0
   \   000246   EE           MOV     A,R6
   \   000247   2418         ADD     A,#0x18
   \   000249   FA           MOV     R2,A
   \   00024A   E4           CLR     A
   \   00024B   3F           ADDC    A,R7
   \   00024C   FB           MOV     R3,A
   \   00024D   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000250   7403         MOV     A,#0x3
   \   000252   12....       LCALL   ?DEALLOC_XSTACK8
   2590                      pScene->extLen = scene.extLen;
   \   000255   741C         MOV     A,#0x1c
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   C0E0         PUSH    A
   \   00025D   EE           MOV     A,R6
   \   00025E   2417         ADD     A,#0x17
   \   000260   F582         MOV     DPL,A
   \   000262   E4           CLR     A
   \   000263   3F           ADDC    A,R7
   \   000264   F583         MOV     DPH,A
   \   000266   D0E0         POP     A
   \   000268   F0           MOVX    @DPTR,A
   2591          
   2592                      // Save Scenes
   2593                      zclGeneral_ScenesSave();
   \   000269                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000269   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay; Banked call to: zclGeneral_ScenesWriteNV
   2594                    }
   \   00026C   8015         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2595                    else
   2596                    {
   2597                      // The Scene doesn't exist so add it
   2598                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_18:
   \   00026E                ; Setup parameters for call to function zclGeneral_AddScene
   \   00026E   7405         MOV     A,#0x5
   \   000270   12....       LCALL   ?XSTACK_DISP101_8
   \   000273   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   2599                    }
   2600                  }
   \                     ??CrossCallReturnLabel_270:
   \   000276   12....       LCALL   ??zclGeneral_AddScene?relay; Banked call to: zclGeneral_AddScene
   \   000279   8008         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2601                  else
   2602                  {
   2603                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_17:
   \   00027B   75..89       MOV     ?V0,#-0x77
   \   00027E   8003         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2604                  }
   2605                }
   2606                else
   2607                {
   2608                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_15:
   \   000280   75..85       MOV     ?V0,#-0x7b
   2609                }
   2610          
   2611                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_19:
   \   000283   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000286   6003         JZ      $+5
   \   000288   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   00028B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00028E   6003         JZ      $+5
   \   000290   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2612                {
   2613                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   \   000293   85..82       MOV     DPL,?V10
   \   000296   85..83       MOV     DPH,?V11
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   6003         JZ      $+5
   \   00029C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2614                  {
   2615                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2616                                                    status, scene.groupID, scene.ID,
   2617                                                    true, pInMsg->hdr.transSeqNum );
   \   00029F                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   00029F   12....       LCALL   ?Subroutine12 & 0xFFFF
   2618                  }
   2619          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2620                  else // COMMAND_SCENE_ENHANCED_ADD
   2621                  {
   2622                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2623                                                            status, scene.groupID, scene.ID,
   2624                                                            true, pInMsg->hdr.transSeqNum );
   2625                  }
   2626          #endif // ZCL_LIGHT_LINK_ENHANCE
   2627                }
   \                     ??CrossCallReturnLabel_164:
   \   0002A2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A5   75..01       MOV     ?V1,#0x1
   \   0002A8   78..         MOV     R0,#?V1
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002AD   7409         MOV     A,#0x9
   \   0002AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B2   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0002B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002B8   7408         MOV     A,#0x8
   \   0002BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002C0   AD..         MOV     R5,?V0
   \   0002C2   7C00         MOV     R4,#0x0
   \   0002C4   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2628                stat = ZCL_STATUS_CMD_HAS_RSP;
   2629          
   2630                break;
   2631          
   2632              case COMMAND_SCENE_VIEW:
   2633          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2634              case COMMAND_SCENE_ENHANCED_VIEW:
   2635          #endif // ZCL_LIGHT_LINK_ENHANCE
   2636                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_2:
   \   0002C7                ; Setup parameters for call to function zclGeneral_FindScene
   \   0002C7   7405         MOV     A,#0x5
   \   0002C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0002CF   12....       LCALL   ??zclGeneral_FindScene?relay; Banked call to: zclGeneral_FindScene
   \   0002D2   8A..         MOV     ?V0,R2
   \   0002D4   8B..         MOV     ?V1,R3
   \   0002D6   AE..         MOV     R6,?V0
   \   0002D8   AF..         MOV     R7,?V1
   2637                if ( pScene != NULL )
   \   0002DA   EE           MOV     A,R6
   \   0002DB   4F           ORL     A,R7
   \   0002DC   6005         JZ      ??zclGeneral_ProcessInScenesServer_22
   2638                {
   2639                  status = ZCL_STATUS_SUCCESS;
   \   0002DE   75..00       MOV     ?V0,#0x0
   \   0002E1   8031         SJMP    ??zclGeneral_ProcessInScenesServer_23
   2640                }
   2641                else
   2642                {
   2643                  // Scene not found
   2644                  if ( scene.groupID != 0x0000 &&
   2645                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_22:
   \   0002E3   7405         MOV     A,#0x5
   \   0002E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E8   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0002EB   6017         JZ      ??zclGeneral_ProcessInScenesServer_24
   \   0002ED                ; Setup parameters for call to function aps_FindGroup
   \   0002ED   7405         MOV     A,#0x5
   \   0002EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0002F5   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   0002F8   8B..         MOV     ?V1,R3
   \   0002FA   EA           MOV     A,R2
   \   0002FB   45..         ORL     A,?V1
   \   0002FD   7005         JNZ     ??zclGeneral_ProcessInScenesServer_24
   2646                  {
   2647                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \   0002FF   75..85       MOV     ?V0,#-0x7b
   \   000302   8003         SJMP    ??zclGeneral_ProcessInScenesServer_25
   2648                  }
   2649                  else
   2650                  {
   2651                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_24:
   \   000304   75..8B       MOV     ?V0,#-0x75
   2652                  }
   2653                  pScene = &scene;
   \                     ??zclGeneral_ProcessInScenesServer_25:
   \   000307   7405         MOV     A,#0x5
   \   000309   12....       LCALL   ?XSTACK_DISP100_8
   \   00030C   88..         MOV     ?V4,R0
   \   00030E   89..         MOV     ?V5,R1
   \   000310   AE..         MOV     R6,?V4
   \   000312   AF..         MOV     R7,?V5
   2654                }
   2655          
   2656                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_23:
   \   000314   85..82       MOV     DPL,?V2
   \   000317   85..83       MOV     DPH,?V3
   \   00031A   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00031D   E5..         MOV     A,?V2
   \   00031F   2415         ADD     A,#0x15
   \   000321   F582         MOV     DPL,A
   \   000323   E4           CLR     A
   \   000324   35..         ADDC    A,?V3
   \   000326   F583         MOV     DPH,A
   \   000328   E0           MOVX    A,@DPTR
   \   000329   6003         JZ      $+5
   \   00032B   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   00032E   85..82       MOV     DPL,?V2
   \   000331   85..83       MOV     DPH,?V3
   \   000334   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000337   6003         JZ      $+5
   \   000339   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2657                {
   2658                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   \   00033C   85..82       MOV     DPL,?V10
   \   00033F   85..83       MOV     DPH,?V11
   \   000342   E0           MOVX    A,@DPTR
   \   000343   6401         XRL     A,#0x1
   \   000345   6003         JZ      $+5
   \   000347   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2659                  {
   2660                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2661                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   \   00034A                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   00034A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2662                  }
   2663          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2664                  else
   2665                  {
   2666                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2667                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   2668                  }
   2669          #endif // ZCL_LIGHT_LINK_ENHANCE
   2670                }
   \                     ??CrossCallReturnLabel_165:
   \   00034D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000350   75..01       MOV     ?V1,#0x1
   \   000353   78..         MOV     R0,#?V1
   \   000355   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000358   8E..         MOV     ?V4,R6
   \   00035A   8F..         MOV     ?V5,R7
   \   00035C   78..         MOV     R0,#?V4
   \   00035E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000361   AD..         MOV     R5,?V0
   \   000363   7C01         MOV     R4,#0x1
   \   000365   E5..         MOV     A,?V2
   \   000367   2406         ADD     A,#0x6
   \   000369   FA           MOV     R2,A
   \   00036A   E4           CLR     A
   \   00036B   35..         ADDC    A,?V3
   \   00036D   FB           MOV     R3,A
   \   00036E   E5..         MOV     A,?V2
   \   000370   2414         ADD     A,#0x14
   \   000372   F582         MOV     DPL,A
   \   000374   E4           CLR     A
   \   000375   35..         ADDC    A,?V3
   \   000377   F583         MOV     DPH,A
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   F9           MOV     R1,A
   \   00037B   12....       LCALL   ??zclGeneral_SendSceneViewRsp?relay; Banked call to: zclGeneral_SendSceneViewRsp
   \   00037E   7404         MOV     A,#0x4
   \   000380   12....       LCALL   ?DEALLOC_XSTACK8
   \   000383   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2671                stat = ZCL_STATUS_CMD_HAS_RSP;
   2672                break;
   2673          
   2674              case COMMAND_SCENE_REMOVE:
   2675                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   \                     ??zclGeneral_ProcessInScenesServer_3:
   \   000386                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   000386   7405         MOV     A,#0x5
   \   000388   12....       LCALL   ?XSTACK_DISP0_8
   \   00038B   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00038E   12....       LCALL   ??zclGeneral_RemoveScene?relay; Banked call to: zclGeneral_RemoveScene
   \   000391   E9           MOV     A,R1
   \   000392   6005         JZ      ??zclGeneral_ProcessInScenesServer_26
   2676                {
   2677                  status = ZCL_STATUS_SUCCESS;
   \   000394   75..00       MOV     ?V0,#0x0
   \   000397   801A         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2678                }
   2679                else
   2680                {
   2681                  // Scene not found
   2682                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_26:
   \   000399                ; Setup parameters for call to function aps_FindGroup
   \   000399   7405         MOV     A,#0x5
   \   00039B   12....       LCALL   ?XSTACK_DISP0_8
   \   00039E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0003A1   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   0003A4   8B..         MOV     ?V1,R3
   \   0003A6   EA           MOV     A,R2
   \   0003A7   45..         ORL     A,?V1
   \   0003A9   7005         JNZ     ??zclGeneral_ProcessInScenesServer_28
   2683                  {
   2684                    // The Group is not in the Group Table
   2685                    status = ZCL_STATUS_INVALID_FIELD;
   \   0003AB   75..85       MOV     ?V0,#-0x7b
   \   0003AE   8003         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2686                  }
   2687                  else
   2688                  {
   2689                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_28:
   \   0003B0   75..8B       MOV     ?V0,#-0x75
   2690                  }
   2691                }
   2692          
   2693                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_27:
   \   0003B3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0003B6   6003         JZ      $+5
   \   0003B8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0003BB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0003BE   6003         JZ      $+5
   \   0003C0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2694                {
   2695                  // Addressed to this device (not to a group) - send a response back
   2696                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2697                                                      status, scene.groupID,
   2698                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   \   0003C3                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0003C3   12....       LCALL   ?Subroutine12 & 0xFFFF
   2699                }
   \                     ??CrossCallReturnLabel_166:
   \   0003C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C9   75..01       MOV     ?V1,#0x1
   \   0003CC   78..         MOV     R0,#?V1
   \   0003CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003D1   7409         MOV     A,#0x9
   \   0003D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D6   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0003D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003DC   7408         MOV     A,#0x8
   \   0003DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003E4   AD..         MOV     R5,?V0
   \   0003E6   7C02         MOV     R4,#0x2
   \   0003E8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2700                stat = ZCL_STATUS_CMD_HAS_RSP;
   2701                break;
   2702          
   2703              case COMMAND_SCENE_REMOVE_ALL:
   2704                if ( scene.groupID == 0x0000 ||
   2705                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_4:
   \   0003EB   7405         MOV     A,#0x5
   \   0003ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F0   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0003F3   6012         JZ      ??zclGeneral_ProcessInScenesServer_29
   \   0003F5                ; Setup parameters for call to function aps_FindGroup
   \   0003F5   7405         MOV     A,#0x5
   \   0003F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0003FD   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   000400   8B..         MOV     ?V1,R3
   \   000402   EA           MOV     A,R2
   \   000403   45..         ORL     A,?V1
   \   000405   6010         JZ      ??zclGeneral_ProcessInScenesServer_30
   2706                {
   2707                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   \                     ??zclGeneral_ProcessInScenesServer_29:
   \   000407                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   000407   7405         MOV     A,#0x5
   \   000409   12....       LCALL   ?XSTACK_DISP0_8
   \   00040C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00040F   12....       LCALL   ??zclGeneral_RemoveAllScenes?relay; Banked call to: zclGeneral_RemoveAllScenes
   2708                  status = ZCL_STATUS_SUCCESS;
   \   000412   75..00       MOV     ?V0,#0x0
   \   000415   8003         SJMP    ??zclGeneral_ProcessInScenesServer_31
   2709                }
   2710                else
   2711                {
   2712                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_30:
   \   000417   75..85       MOV     ?V0,#-0x7b
   2713                }
   2714          
   2715                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_31:
   \   00041A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00041D   6003         JZ      $+5
   \   00041F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000422   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000425   6003         JZ      $+5
   \   000427   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2716                {
   2717                  // Addressed to this device (not to a group) - send a response back
   2718                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2719                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   00042A                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   00042A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2720                }
   \                     ??CrossCallReturnLabel_167:
   \   00042D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000430   75..01       MOV     ?V1,#0x1
   \   000433   78..         MOV     R0,#?V1
   \   000435   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000438   75..00       MOV     ?V1,#0x0
   \   00043B   78..         MOV     R0,#?V1
   \   00043D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000440   7408         MOV     A,#0x8
   \   000442   12....       LCALL   ?XSTACK_DISP0_8
   \   000445   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000448   AD..         MOV     R5,?V0
   \   00044A   7C03         MOV     R4,#0x3
   \   00044C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2721                stat = ZCL_STATUS_CMD_HAS_RSP;
   2722                break;
   2723          
   2724              case COMMAND_SCENE_STORE:
   2725                if ( scene.groupID == 0x0000 ||
   2726                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_5:
   \   00044F   7405         MOV     A,#0x5
   \   000451   12....       LCALL   ?XSTACK_DISP0_8
   \   000454   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000457   6015         JZ      ??zclGeneral_ProcessInScenesServer_32
   \   000459                ; Setup parameters for call to function aps_FindGroup
   \   000459   7405         MOV     A,#0x5
   \   00045B   12....       LCALL   ?XSTACK_DISP0_8
   \   00045E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000461   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   000464   8B..         MOV     ?V1,R3
   \   000466   EA           MOV     A,R2
   \   000467   45..         ORL     A,?V1
   \   000469   7003         JNZ     $+5
   \   00046B   02....       LJMP    ??zclGeneral_ProcessInScenesServer_33 & 0xFFFF
   2727                {
   2728                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2729                  // does and the corresponding Group exits
   2730                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_32:
   \   00046E                ; Setup parameters for call to function zclGeneral_FindScene
   \   00046E   7407         MOV     A,#0x7
   \   000470   12....       LCALL   ?XSTACK_DISP0_8
   \   000473   E0           MOVX    A,@DPTR
   \   000474   FC           MOV     R4,A
   \   000475   7405         MOV     A,#0x5
   \   000477   12....       LCALL   ?XSTACK_DISP0_8
   \   00047A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00047D   12....       LCALL   ??zclGeneral_FindScene?relay; Banked call to: zclGeneral_FindScene
   \   000480   8A..         MOV     ?V0,R2
   \   000482   8B..         MOV     ?V1,R3
   \   000484   AE..         MOV     R6,?V0
   \   000486   AF..         MOV     R7,?V1
   2731                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   000488   EE           MOV     A,R6
   \   000489   4F           ORL     A,R7
   \   00048A   7009         JNZ     ??zclGeneral_ProcessInScenesServer_34
   \   00048C                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   00048C   12....       LCALL   ??zclGeneral_CountAllScenes?relay; Banked call to: zclGeneral_CountAllScenes
   \   00048F   E9           MOV     A,R1
   \   000490   C3           CLR     C
   \   000491   9410         SUBB    A,#0x10
   \   000493   5075         JNC     ??zclGeneral_ProcessInScenesServer_35
   2732                  {
   2733                    uint8 sceneChanged = FALSE;
   \                     ??zclGeneral_ProcessInScenesServer_34:
   \   000495   75..00       MOV     ?V1,#0x0
   2734          
   2735                    status = ZCL_STATUS_SUCCESS;
   \   000498   75..00       MOV     ?V0,#0x0
   2736                    if ( pScene == NULL )
   \   00049B   EE           MOV     A,R6
   \   00049C   4F           ORL     A,R7
   \   00049D   700D         JNZ     ??zclGeneral_ProcessInScenesServer_36
   2737                    {
   2738                      // Haven't been added yet
   2739                      pScene = &scene;
   \   00049F   7405         MOV     A,#0x5
   \   0004A1   12....       LCALL   ?XSTACK_DISP100_8
   \   0004A4   88..         MOV     ?V4,R0
   \   0004A6   89..         MOV     ?V5,R1
   \   0004A8   AE..         MOV     R6,?V4
   \   0004AA   AF..         MOV     R7,?V5
   2740                    }
   2741          
   2742                    if ( pCBs->pfnSceneStoreReq )
   \                     ??zclGeneral_ProcessInScenesServer_36:
   \   0004AC   E5..         MOV     A,?V6
   \   0004AE   241A         ADD     A,#0x1a
   \   0004B0   F582         MOV     DPL,A
   \   0004B2   E4           CLR     A
   \   0004B3   35..         ADDC    A,?V7
   \   0004B5   F583         MOV     DPH,A
   \   0004B7   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0004BA   6023         JZ      ??zclGeneral_ProcessInScenesServer_37
   2743                    {
   2744                      zclSceneReq_t req;
   2745          
   2746                      req.srcAddr = &(pInMsg->msg->srcAddr);
   \   0004BC   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0004BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C2   12....       LCALL   ?Subroutine53 & 0xFFFF
   2747                      req.scene = pScene;
   \                     ??CrossCallReturnLabel_231:
   \   0004C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0004C8   EE           MOV     A,R6
   \   0004C9   F0           MOVX    @DPTR,A
   \   0004CA   A3           INC     DPTR
   \   0004CB   EF           MOV     A,R7
   \   0004CC   F0           MOVX    @DPTR,A
   2748          
   2749                      // Get the latest Scene info
   2750                      if ( pCBs->pfnSceneStoreReq( &req ) )
   \   0004CD                ; Setup parameters for indirect call
   \   0004CD   7401         MOV     A,#0x1
   \   0004CF   12....       LCALL   ?XSTACK_DISP101_8
   \   0004D2   8882         MOV     DPL,R0
   \   0004D4   8983         MOV     DPH,R1
   \   0004D6   12....       LCALL   ?CALL_IND
   \   0004D9   E9           MOV     A,R1
   \   0004DA   6003         JZ      ??zclGeneral_ProcessInScenesServer_37
   2751                      {
   2752                        sceneChanged = TRUE;
   \   0004DC   75..01       MOV     ?V1,#0x1
   2753                      }
   2754                    }
   2755          
   2756                    if ( pScene == &scene )
   \                     ??zclGeneral_ProcessInScenesServer_37:
   \   0004DF   7405         MOV     A,#0x5
   \   0004E1   12....       LCALL   ?XSTACK_DISP100_8
   \   0004E4   88..         MOV     ?V4,R0
   \   0004E6   89..         MOV     ?V5,R1
   \   0004E8   EE           MOV     A,R6
   \   0004E9   65..         XRL     A,?V4
   \   0004EB   7003         JNZ     ??zclGeneral_ProcessInScenesServer_38
   \   0004ED   EF           MOV     A,R7
   \   0004EE   65..         XRL     A,?V5
   \                     ??zclGeneral_ProcessInScenesServer_38:
   \   0004F0   700D         JNZ     ??zclGeneral_ProcessInScenesServer_39
   2757                    {
   2758                      // The Scene doesn't exist so add it
   2759                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \   0004F2                ; Setup parameters for call to function zclGeneral_AddScene
   \   0004F2   7405         MOV     A,#0x5
   \   0004F4   12....       LCALL   ?XSTACK_DISP101_8
   \   0004F7   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   2760                    }
   \                     ??CrossCallReturnLabel_271:
   \   0004FA   12....       LCALL   ??zclGeneral_AddScene?relay; Banked call to: zclGeneral_AddScene
   \   0004FD   8013         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2761                    else if ( sceneChanged )
   \                     ??zclGeneral_ProcessInScenesServer_39:
   \   0004FF   E5..         MOV     A,?V1
   \   000501   A2E0         MOV     C,0xE0 /* A   */.0
   \   000503   500D         JNC     ??zclGeneral_ProcessInScenesServer_40
   2762                    {
   2763                      // The Scene already exists so update only NV
   2764                      zclGeneral_ScenesSave();
   \   000505                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000505   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay; Banked call to: zclGeneral_ScenesWriteNV
   2765                    }
   2766                  }
   \   000508   8008         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2767                  else
   2768                  {
   2769                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_35:
   \   00050A   75..89       MOV     ?V0,#-0x77
   \   00050D   8003         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2770                  }
   2771                }
   2772                else
   2773                {
   2774                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_33:
   \   00050F   75..85       MOV     ?V0,#-0x7b
   2775                }
   2776          
   2777                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_40:
   \   000512   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000515   6003         JZ      $+5
   \   000517   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   00051A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00051D   6003         JZ      $+5
   \   00051F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2778                {
   2779                  // Addressed to this device (not to a group) - send a response back
   2780                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2781                                                     status, scene.groupID, scene.ID,
   2782                                                     true, pInMsg->hdr.transSeqNum );
   \   000522                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000522   12....       LCALL   ?Subroutine12 & 0xFFFF
   2783                }
   \                     ??CrossCallReturnLabel_168:
   \   000525   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000528   75..01       MOV     ?V1,#0x1
   \   00052B   78..         MOV     R0,#?V1
   \   00052D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000530   7409         MOV     A,#0x9
   \   000532   12....       LCALL   ?XSTACK_DISP0_8
   \   000535   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000538   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00053B   7408         MOV     A,#0x8
   \   00053D   12....       LCALL   ?XSTACK_DISP0_8
   \   000540   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000543   AD..         MOV     R5,?V0
   \   000545   7C04         MOV     R4,#0x4
   \                     ??zclGeneral_ProcessInScenesServer_21:
   \   000547   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00054A   12....       LCALL   ??zclGeneral_SendSceneResponse?relay; Banked call to: zclGeneral_SendSceneResponse
   \   00054D   7405         MOV     A,#0x5
   \   00054F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000552   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2784                stat = ZCL_STATUS_CMD_HAS_RSP;
   2785                break;
   2786          
   2787              case COMMAND_SCENE_RECALL:
   2788                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_6:
   \   000555                ; Setup parameters for call to function zclGeneral_FindScene
   \   000555   7405         MOV     A,#0x5
   \   000557   12....       LCALL   ?XSTACK_DISP0_8
   \   00055A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00055D   12....       LCALL   ??zclGeneral_FindScene?relay; Banked call to: zclGeneral_FindScene
   \   000560   8A..         MOV     ?V4,R2
   \   000562   8B..         MOV     ?V5,R3
   \   000564   AE..         MOV     R6,?V4
   \   000566   AF..         MOV     R7,?V5
   2789                if ( pScene && pCBs->pfnSceneRecallReq )
   \   000568   EE           MOV     A,R6
   \   000569   4F           ORL     A,R7
   \   00056A   7003         JNZ     $+5
   \   00056C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   \   00056F   E5..         MOV     A,?V6
   \   000571   241C         ADD     A,#0x1c
   \   000573   F582         MOV     DPL,A
   \   000575   E4           CLR     A
   \   000576   35..         ADDC    A,?V7
   \   000578   F583         MOV     DPH,A
   \   00057A   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00057D   7003         JNZ     $+5
   \   00057F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2790                {
   2791                  zclSceneReq_t req;
   2792          
   2793                  req.srcAddr = &(pInMsg->msg->srcAddr);
   \   000582   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000585   12....       LCALL   ?XSTACK_DISP0_8
   \   000588   12....       LCALL   ?Subroutine53 & 0xFFFF
   2794                  req.scene = pScene;
   \                     ??CrossCallReturnLabel_232:
   \   00058B   12....       LCALL   ?XSTACK_DISP0_8
   \   00058E   EE           MOV     A,R6
   \   00058F   F0           MOVX    @DPTR,A
   \   000590   A3           INC     DPTR
   \   000591   EF           MOV     A,R7
   \   000592   F0           MOVX    @DPTR,A
   2795          
   2796                  pCBs->pfnSceneRecallReq( &req );
   \   000593                ; Setup parameters for indirect call
   \   000593   7401         MOV     A,#0x1
   \   000595   12....       LCALL   ?XSTACK_DISP101_8
   \   000598   8882         MOV     DPL,R0
   \   00059A   8983         MOV     DPH,R1
   \   00059C   12....       LCALL   ?CALL_IND
   \   00059F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2797                }
   2798                // No response
   2799                break;
   2800          
   2801              case COMMAND_SCENE_GET_MEMBERSHIP:
   2802                // Find all the Scenes corresponding to the Group ID
   2803                if ( scene.groupID == 0x0000 ||
   2804                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_7:
   \   0005A2   7405         MOV     A,#0x5
   \   0005A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A7   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0005AA   6012         JZ      ??zclGeneral_ProcessInScenesServer_42
   \   0005AC                ; Setup parameters for call to function aps_FindGroup
   \   0005AC   7405         MOV     A,#0x5
   \   0005AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   0005B4   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   0005B7   8B..         MOV     ?V7,R3
   \   0005B9   EA           MOV     A,R2
   \   0005BA   45..         ORL     A,?V7
   \   0005BC   604D         JZ      ??zclGeneral_ProcessInScenesServer_43
   2805                {
   2806                  // Allocate space for the scene list
   2807                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   \                     ??zclGeneral_ProcessInScenesServer_42:
   \   0005BE                ; Setup parameters for call to function osal_mem_alloc
   \   0005BE   7A10         MOV     R2,#0x10
   \   0005C0   7B00         MOV     R3,#0x0
   \   0005C2   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0005C5   8A..         MOV     ?V4,R2
   \   0005C7   8B..         MOV     ?V5,R3
   2808                  if ( sceneList != NULL )
   \   0005C9   EA           MOV     A,R2
   \   0005CA   45..         ORL     A,?V5
   \   0005CC   6038         JZ      ??zclGeneral_ProcessInScenesServer_44
   2809                  {
   2810                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2811                                                                 scene.groupID, sceneList );
   \   0005CE                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   0005CE   AC..         MOV     R4,?V4
   \   0005D0   AD..         MOV     R5,?V5
   \   0005D2   7405         MOV     A,#0x5
   \   0005D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005D7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0005DA   12....       LCALL   ??zclGeneral_FindAllScenesForGroup?relay; Banked call to: zclGeneral_FindAllScenesForGroup
   \   0005DD   E9           MOV     A,R1
   \   0005DE   F5..         MOV     ?V1,A
   2812                    status = ZCL_STATUS_SUCCESS;
   \   0005E0   75..00       MOV     ?V0,#0x0
   2813                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   \   0005E3   85..82       MOV     DPL,?V2
   \   0005E6   85..83       MOV     DPH,?V3
   \   0005E9   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0005EC   2415         ADD     A,#0x15
   \   0005EE   F582         MOV     DPL,A
   \   0005F0   E4           CLR     A
   \   0005F1   39           ADDC    A,R1
   \   0005F2   F583         MOV     DPH,A
   \   0005F4   E0           MOVX    A,@DPTR
   \   0005F5   7009         JNZ     ??zclGeneral_ProcessInScenesServer_45
   \   0005F7   8882         MOV     DPL,R0
   \   0005F9   8983         MOV     DPH,R1
   \   0005FB   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0005FE   600E         JZ      ??zclGeneral_ProcessInScenesServer_46
   2814                    {
   2815                      // Addressed to the Group - ONLY send a response if an entry within the
   2816                      // Scene Table corresponds to the Group ID
   2817                      if ( sceneCnt == 0 )
   \                     ??zclGeneral_ProcessInScenesServer_45:
   \   000600   E5..         MOV     A,?V1
   \   000602   700A         JNZ     ??zclGeneral_ProcessInScenesServer_46
   \   000604   8056         SJMP    ??zclGeneral_ProcessInScenesServer_47
   2818                      {
   2819                        sendRsp = FALSE;
   2820                      }
   2821                    }
   2822                  }
   2823                  else
   2824                  {
   2825                    // Couldn't allocate space for the scene list!
   2826                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInScenesServer_44:
   \   000606   75..89       MOV     ?V0,#-0x77
   \   000609   8003         SJMP    ??zclGeneral_ProcessInScenesServer_46
   2827                  }
   2828                }
   2829                else
   2830                {
   2831                  // The Group is not in the Group Table - send a response back
   2832                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_43:
   \   00060B   75..85       MOV     ?V0,#-0x7b
   2833                }
   2834          
   2835          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2836                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2837          #else
   2838                if ( sendRsp )
   2839          #endif //ZCL_LIGHT_LINK_ENHANCE
   2840                {
   2841                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2842                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2843                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_46:
   \   00060E                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   00060E   12....       LCALL   ??zclGeneral_CountAllScenes?relay; Banked call to: zclGeneral_CountAllScenes
   \   000611   E9           MOV     A,R1
   \   000612   F9           MOV     R1,A
   \   000613   85..82       MOV     DPL,?V2
   \   000616   85..83       MOV     DPH,?V3
   \   000619   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   2844                }
   \                     ??CrossCallReturnLabel_255:
   \   00061C                ; Setup parameters for call to function zclGeneral_SendSceneGetMembershipResponse
   \   00061C   85..82       MOV     DPL,?V12
   \   00061F   85..83       MOV     DPH,?V13
   \   000622   E0           MOVX    A,@DPTR
   \   000623   F5..         MOV     ?V2,A
   \   000625   78..         MOV     R0,#?V2
   \   000627   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00062A   75..01       MOV     ?V2,#0x1
   \   00062D   78..         MOV     R0,#?V2
   \   00062F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000632   7407         MOV     A,#0x7
   \   000634   12....       LCALL   ?XSTACK_DISP0_8
   \   000637   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00063A   78..         MOV     R0,#?V4
   \   00063C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00063F   78..         MOV     R0,#?V1
   \   000641   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000644   7410         MOV     A,#0x10
   \   000646   C3           CLR     C
   \   000647   99           SUBB    A,R1
   \   000648   FD           MOV     R5,A
   \   000649   AC..         MOV     R4,?V0
   \   00064B   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00064E   12....       LCALL   ??zclGeneral_SendSceneGetMembershipResponse?rel; Banked call to: zclGeneral_SendSceneGetMembershipResponse
   \   000651   7407         MOV     A,#0x7
   \   000653   12....       LCALL   ?DEALLOC_XSTACK8
   2845          
   2846                if ( sceneList != NULL )
   \   000656   E5..         MOV     A,?V4
   \   000658   45..         ORL     A,?V5
   \   00065A   6007         JZ      ??zclGeneral_ProcessInScenesServer_20
   2847                  zcl_mem_free( sceneList );
   \                     ??zclGeneral_ProcessInScenesServer_47:
   \   00065C                ; Setup parameters for call to function osal_mem_free
   \   00065C   AA..         MOV     R2,?V4
   \   00065E   AB..         MOV     R3,?V5
   \   000660   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   2848          
   2849                stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInScenesServer_20:
   \   000663   75..FF       MOV     ?V0,#-0x1
   2850                break;
   \   000666   8003         SJMP    ??zclGeneral_ProcessInScenesServer_41
   2851          
   2852          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2853              case COMMAND_SCENE_COPY:
   2854                {
   2855                  uint8 mode;
   2856                  uint16 groupIDFrom, groupIDTo;
   2857                  uint8 sceneIDFrom, sceneIDTo;
   2858          
   2859                  pData = pInMsg->pData; // different payload format
   2860          
   2861                  mode = *pData++;
   2862                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   2863                  pData += 2;
   2864                  sceneIDFrom = *pData++; // from scene ID
   2865                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   2866                  pData += 2;
   2867                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   2868                  {
   2869                    sceneIDTo = *pData++; // to scene ID
   2870                  }
   2871          
   2872                  // Make sure the groups exist
   2873                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2874                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   2875                  {
   2876                    // Allocate space for the scene list
   2877                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   2878                    if ( sceneList == NULL )
   2879                    {
   2880                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2881                    }
   2882                    else
   2883                    {
   2884                      status = ZCL_STATUS_SUCCESS;
   2885                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2886                      {
   2887                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2888                                                                     groupIDFrom, sceneList );
   2889                      }
   2890                      else // Copy single scene
   2891                      {
   2892                        // Make sure the scene exists
   2893                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   2894                        if ( pScene != NULL )
   2895                        {
   2896                          sceneList[0] = sceneIDFrom;
   2897                          sceneCnt = 1;
   2898                        }
   2899                        else
   2900                        {
   2901                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2902                        }
   2903                      }
   2904                    }
   2905          
   2906                    if ( status == ZCL_STATUS_SUCCESS )
   2907                    {
   2908                      uint8 numScenesToAdd = 0;
   2909                      uint8 i;
   2910                      for ( i = 0; i < sceneCnt; i++ )
   2911                      {
   2912                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   2913                        {
   2914                          numScenesToAdd++;
   2915                        }
   2916                      }
   2917                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   2918                      {
   2919                        // Copy the scenes
   2920                        for ( i = 0; i < sceneCnt; i++ )
   2921                        {
   2922                          // Ignore scene ID from and scene ID to fields
   2923                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2924                          if ( pScene != NULL )
   2925                          {
   2926                            zclGeneral_Scene_t *pToScene;
   2927                            scene = *pScene;
   2928                            scene.groupID = groupIDTo;
   2929                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   2930          
   2931                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2932                            if( pToScene != NULL )
   2933                            {
   2934                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2935                            }
   2936                            // Add the scene
   2937                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2938                          }
   2939                        }
   2940                      }
   2941                      else
   2942                      {
   2943                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2944                      }
   2945                    }
   2946                  }
   2947                  else
   2948                  {
   2949                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2950                  }
   2951          
   2952                  if ( UNICAST_MSG( pInMsg->msg ) )
   2953                  {
   2954                    if ( pScene == NULL )
   2955                    {
   2956                      pScene = &scene;
   2957                    }
   2958                    // Addressed to this device (not to a group) - send a response back
   2959                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2960                                                      status, pScene->groupID, pScene->ID,
   2961                                                      true, pInMsg->hdr.transSeqNum );
   2962                  }
   2963          
   2964                  if ( sceneList != NULL )
   2965                  {
   2966                    zcl_mem_free( sceneList );
   2967                  }
   2968                }
   2969          
   2970                stat = ZCL_STATUS_CMD_HAS_RSP;
   2971                break;
   2972          #endif // ZCL_LIGHT_LINK_ENHANCE
   2973          
   2974              default:
   2975                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesServer_8:
   \   000668   75..01       MOV     ?V0,#0x1
   2976              break;
   2977            }
   2978          
   2979            return ( stat );
   \                     ??zclGeneral_ProcessInScenesServer_41:
   \   00066B   A9..         MOV     R1,?V0
   \   00066D   743C         MOV     A,#0x3c
   \   00066F   02....       LJMP    ?Subroutine2 & 0xFFFF
   2980          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine93_0
   \   000001                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7403         MOV     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine94_0
   \   000004                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2406         ADD     A,#0x6
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   7401         MOV     A,#0x1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EE           MOV     A,R6
   \   00000C   2415         ADD     A,#0x15
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   3F           ADDC    A,R7
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine98_0
   \   000006                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E..         MOV     ?V4,R6
   \   000003   8F..         MOV     ?V5,R7
   \   000005   75..00       MOV     ?V6,#0x0
   \   000008   78..         MOV     R0,#?V4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   FE           MOV     R6,A
   \   000009   22           RET
   2981          
   2982          /*********************************************************************
   2983           * @fn      zclGeneral_ProcessInScenesClient
   2984           *
   2985           * @brief   Process in the received Scenes Command.
   2986           *
   2987           * @param   pInMsg - pointer to the incoming message
   2988           *
   2989           * @return  ZStatus_t
   2990           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2991          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesClient:
   2992                                                             zclGeneral_AppCallbacks_t *pCBs )
   2993          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV     A,#-0x41
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2994            zclGeneral_Scene_t scene;
   2995            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine32 & 0xFFFF
   2996            uint8 nameLen;
   2997            zclSceneRsp_t rsp;
   2998            uint8 i;
   2999            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_257:
   \   000015   75..00       MOV     ?V10,#0x0
   3000          
   3001            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C37         MOV     R4,#0x37
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   3002            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   3003          
   3004            // Get the status field first
   3005            rsp.status = *pData++;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine49 & 0xFFFF
   3006          
   3007            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   \                     ??CrossCallReturnLabel_90:
   \   000044   E5..         MOV     A,?V8
   \   000046   2407         ADD     A,#0x7
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V9
   \   00004D   F5..         MOV     ?V1,A
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6406         XRL     A,#0x6
   \   000057   7014         JNZ     ??zclGeneral_ProcessInScenesClient_0
   3008            {
   3009              rsp.capacity = *pData++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7407         MOV     A,#0x7
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine69 & 0xFFFF
   3010            }
   \                     ??CrossCallReturnLabel_121:
   \   00006A   0E           INC     R6
   \   00006B   AF83         MOV     R7,DPH
   3011          
   3012            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesClient_0:
   \   00006D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine48 & 0xFFFF
   3013            pData += 2;   // Move past group ID
   \                     ??CrossCallReturnLabel_87:
   \   000076   5001         JNC     ??zclGeneral_ProcessInScenesClient_1
   \   000078   0F           INC     R7
   3014          
   3015            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesClient_1:
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   A882         MOV     R0,DPL
   \   000080   A983         MOV     R1,DPH
   \   000082   E5..         MOV     A,?V2
   \   000084   241E         ADD     A,#0x1e
   \   000086   F5..         MOV     ?V2,A
   \   000088   5002         JNC     ??zclGeneral_ProcessInScenesClient_2
   \   00008A   05..         INC     ?V3
   \                     ??zclGeneral_ProcessInScenesClient_2:
   \   00008C   85..82       MOV     DPL,?V0
   \   00008F   85..83       MOV     DPH,?V1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6074         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   000095   14           DEC     A
   \   000096   6013         JZ      ??zclGeneral_ProcessInScenesClient_4
   \   000098   14           DEC     A
   \   000099   606E         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   00009B   14           DEC     A
   \   00009C   606B         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   00009E   14           DEC     A
   \   00009F   6068         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000A1   24FE         ADD     A,#-0x2
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??zclGeneral_ProcessInScenesClient_5 & 0xFFFF
   \   0000A8   02....       LJMP    ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   3016            {
   3017              case COMMAND_SCENE_VIEW_RSP:
   3018                // Parse the rest of the incoming message
   3019                scene.ID = *pData++; // Not applicable to Remove All Response command
   \                     ??zclGeneral_ProcessInScenesClient_4:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C0E0         PUSH    A
   \   0000B2   740C         MOV     A,#0xc
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   FE           MOV     R6,A
   \   0000BC   E9           MOV     A,R1
   \   0000BD   FF           MOV     R7,A
   3020                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \   0000BE   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000C1   740D         MOV     A,#0xd
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ?Subroutine48 & 0xFFFF
   3021                pData += 2;
   \                     ??CrossCallReturnLabel_88:
   \   0000C9   5001         JNC     ??zclGeneral_ProcessInScenesClient_7
   \   0000CB   0F           INC     R7
   3022                nameLen = *pData++; // Name length
   \                     ??zclGeneral_ProcessInScenesClient_7:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F5..         MOV     ?V7,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   0E           INC     R6
   \   0000D5   AF83         MOV     R7,DPH
   3023                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   0000D7   C3           CLR     C
   \   0000D8   9410         SUBB    A,#0x10
   \   0000DA   4003         JC      ??zclGeneral_ProcessInScenesClient_8
   3024                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   0000DC   75..0F       MOV     ?V7,#0xf
   3025          
   3026                scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesClient_8:
   \   0000DF   7411         MOV     A,#0x11
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E5..         MOV     A,?V7
   \   0000E6   12....       LCALL   ?Subroutine52 & 0xFFFF
   3027                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \                     ??CrossCallReturnLabel_97:
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EC   AC..         MOV     R4,?V7
   \   0000EE   7D00         MOV     R5,#0x0
   \   0000F0   7415         MOV     A,#0x15
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   AA82         MOV     R2,DPL
   \   0000F7   AB83         MOV     R3,DPH
   \   0000F9   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000FC   7403         MOV     A,#0x3
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   3028          
   3029                pData += nameLen; // move past name, use original length
   \   000101   A8..         MOV     R0,?V7
   \   000103   EE           MOV     A,R6
   \   000104   28           ADD     A,R0
   \   000105   FE           MOV     R6,A
   \   000106   E4           CLR     A
   \   000107   3F           ADDC    A,R7
   \   000108   FF           MOV     R7,A
   3030          
   3031                //*** Do something with the extension field(s)
   3032          
   3033                // Fall through to callback - break is left off intentionally
   3034          
   3035              case COMMAND_SCENE_ADD_RSP:
   3036              case COMMAND_SCENE_REMOVE_RSP:
   3037              case COMMAND_SCENE_REMOVE_ALL_RSP:
   3038              case COMMAND_SCENE_STORE_RSP:
   3039                if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_3:
   \   000109   85..82       MOV     DPL,?V2
   \   00010C   85..83       MOV     DPH,?V3
   \   00010F   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000112   7003         JNZ     $+5
   \   000114   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3040                {
   3041                  if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   000117   85..82       MOV     DPL,?V0
   \   00011A   85..83       MOV     DPH,?V1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   6403         XRL     A,#0x3
   \   000120   600F         JZ      ??zclGeneral_ProcessInScenesClient_10
   3042                  {
   3043                    scene.ID = *pData++;
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   E0           MOVX    A,@DPTR
   \   000127   C0E0         PUSH    A
   \   000129   740C         MOV     A,#0xc
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   D0E0         POP     A
   \   000130   F0           MOVX    @DPTR,A
   3044                  }
   3045                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInScenesClient_10:
   \   000131   12....       LCALL   ?Subroutine19 & 0xFFFF
   3046                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_13:
   \   000134   C0E0         PUSH    A
   \   000136   7402         MOV     A,#0x2
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   3047                  rsp.scene = &scene;
   \   00013E   740A         MOV     A,#0xa
   \   000140   12....       LCALL   ?XSTACK_DISP100_8
   \   000143   7408         MOV     A,#0x8
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?Subroutine16 & 0xFFFF
   3048          
   3049                  pCBs->pfnSceneRsp( &rsp );
   3050                }
   \                     ??CrossCallReturnLabel_285:
   \   00014B   12....       LCALL   ?CALL_IND
   \   00014E   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3051                break;
   3052          
   3053              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   3054                {
   3055                  uint8 *sceneList = NULL;
   \                     ??zclGeneral_ProcessInScenesClient_5:
   \   000151   75..00       MOV     ?V4,#0x0
   \   000154   75..00       MOV     ?V5,#0x0
   3056          
   3057                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   \   000157   7403         MOV     A,#0x3
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   7048         JNZ     ??zclGeneral_ProcessInScenesClient_11
   3058                  {
   3059                    uint8 sceneCnt = *pData++;
   \   00015F   8E82         MOV     DPL,R6
   \   000161   8F83         MOV     DPH,R7
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F5..         MOV     ?V6,A
   \   000166   E8           MOV     A,R0
   \   000167   FE           MOV     R6,A
   \   000168   E9           MOV     A,R1
   \   000169   FF           MOV     R7,A
   3060          
   3061                    if ( sceneCnt > 0 )
   \   00016A   E5..         MOV     A,?V6
   \   00016C   6039         JZ      ??zclGeneral_ProcessInScenesClient_11
   3062                    {
   3063                      // Allocate space for the scene list
   3064                      sceneList = zcl_mem_alloc( sceneCnt );
   \   00016E                ; Setup parameters for call to function osal_mem_alloc
   \   00016E   FA           MOV     R2,A
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000174   8A..         MOV     ?V4,R2
   \   000176   8B..         MOV     ?V5,R3
   3065                      if ( sceneList != NULL )
   \   000178   EA           MOV     A,R2
   \   000179   45..         ORL     A,?V5
   \   00017B   602A         JZ      ??zclGeneral_ProcessInScenesClient_11
   3066                      {
   3067                        rsp.sceneCnt = sceneCnt;
   \   00017D   7404         MOV     A,#0x4
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E5..         MOV     A,?V6
   \   000184   F0           MOVX    @DPTR,A
   3068                        for ( i = 0; i < sceneCnt; i++ )
   \   000185   7A00         MOV     R2,#0x0
   \   000187   8018         SJMP    ??zclGeneral_ProcessInScenesClient_12
   3069                          sceneList[i] = *pData++;
   \                     ??zclGeneral_ProcessInScenesClient_13:
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   C0E0         PUSH    A
   \   000190   EA           MOV     A,R2
   \   000191   F8           MOV     R0,A
   \   000192   E5..         MOV     A,?V4
   \   000194   28           ADD     A,R0
   \   000195   F582         MOV     DPL,A
   \   000197   E4           CLR     A
   \   000198   3B           ADDC    A,R3
   \   000199   F583         MOV     DPH,A
   \   00019B   D0E0         POP     A
   \   00019D   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0001A0   0A           INC     R2
   \                     ??zclGeneral_ProcessInScenesClient_12:
   \   0001A1   EA           MOV     A,R2
   \   0001A2   C3           CLR     C
   \   0001A3   95..         SUBB    A,?V6
   \   0001A5   40E2         JC      ??zclGeneral_ProcessInScenesClient_13
   3070                      }
   3071                    }
   3072                  }
   3073          
   3074                  if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_11:
   \   0001A7   85..82       MOV     DPL,?V2
   \   0001AA   85..83       MOV     DPH,?V3
   \   0001AD   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0001B0   6029         JZ      ??zclGeneral_ProcessInScenesClient_14
   3075                  {
   3076                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001B2   12....       LCALL   ?Subroutine19 & 0xFFFF
   3077                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_14:
   \   0001B5   C0E0         PUSH    A
   \   0001B7   7402         MOV     A,#0x2
   \   0001B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BC   D0E0         POP     A
   \   0001BE   F0           MOVX    @DPTR,A
   3078                    rsp.sceneList = sceneList;
   \   0001BF   7405         MOV     A,#0x5
   \   0001C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C4   E5..         MOV     A,?V4
   \   0001C6   F0           MOVX    @DPTR,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   E5..         MOV     A,?V5
   \   0001CA   F0           MOVX    @DPTR,A
   3079                    rsp.scene = &scene;
   \   0001CB   740A         MOV     A,#0xa
   \   0001CD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D0   7408         MOV     A,#0x8
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   12....       LCALL   ?Subroutine16 & 0xFFFF
   3080          
   3081                    pCBs->pfnSceneRsp( &rsp);
   3082                  }
   \                     ??CrossCallReturnLabel_286:
   \   0001D8   12....       LCALL   ?CALL_IND
   3083          
   3084                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesClient_14:
   \   0001DB   E5..         MOV     A,?V4
   \   0001DD   45..         ORL     A,?V5
   \   0001DF   600C         JZ      ??zclGeneral_ProcessInScenesClient_9
   3085                  {
   3086                    zcl_mem_free( sceneList );
   \   0001E1                ; Setup parameters for call to function osal_mem_free
   \   0001E1   AA..         MOV     R2,?V4
   \   0001E3   AB..         MOV     R3,?V5
   \   0001E5   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0001E8   8003         SJMP    ??zclGeneral_ProcessInScenesClient_9
   3087                  }
   3088                }
   3089                break;
   3090          
   3091              default:
   3092                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesClient_6:
   \   0001EA   75..01       MOV     ?V10,#0x1
   3093                break;
   3094            }
   3095          
   3096            return ( stat );
   \                     ??zclGeneral_ProcessInScenesClient_9:
   \   0001ED   A9..         MOV     R1,?V10
   \   0001EF   7441         MOV     A,#0x41
   \   0001F1                REQUIRE ?Subroutine2
   \   0001F1                ; // Fall through to label ?Subroutine2
   3097          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for indirect call
   \   000005                ; Setup parameters for indirect call
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F                REQUIRE ??Subroutine100_0
   \   00000F                ; // Fall through to label ??Subroutine100_0
   3098          #endif // ZCL_SCENES
   3099          
   3100          #ifdef ZCL_ON_OFF
   3101          /*********************************************************************
   3102           * @fn      zclGeneral_ProcessInCmdOnOff
   3103           *
   3104           * @brief   Process in the received On/Off Command.
   3105           *
   3106           * @param   pInMsg - pointer to the incoming message
   3107           *
   3108           * @return  ZStatus_t
   3109           */
   3110          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   3111                                                      zclGeneral_AppCallbacks_t *pCBs )
   3112          {
   3113            ZStatus_t stat = ZSuccess;
   3114          
   3115            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3116            {
   3117              switch ( pInMsg->hdr.commandID )
   3118              {
   3119                case COMMAND_OFF:
   3120                case COMMAND_ON:
   3121                case COMMAND_TOGGLE:
   3122                  if ( pCBs->pfnOnOff )
   3123                  {
   3124                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   3125                  }
   3126                  break;
   3127          
   3128          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3129                case COMMAND_OFF_WITH_EFFECT:
   3130                  if ( pCBs->pfnOnOff_OffWithEffect )
   3131                  {
   3132                    zclOffWithEffect_t cmd;
   3133          
   3134                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3135                    cmd.effectId = pInMsg->pData[0];
   3136                    cmd.effectVariant = pInMsg->pData[1];
   3137          
   3138                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3139                  }
   3140                  break;
   3141          
   3142                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3143                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   3144                  {
   3145                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   3146                  }
   3147                  break;
   3148          
   3149                case COMMAND_ON_WITH_TIMED_OFF:
   3150                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   3151                  {
   3152                    zclOnWithTimedOff_t cmd;
   3153          
   3154                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   3155                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3156                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   3157                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   3158                  }
   3159                  break;
   3160          #endif // ZCL_LIGHT_LINK_ENHANCE
   3161          
   3162                default:
   3163                  stat = ZFailure;
   3164                  break;
   3165              }
   3166            }
   3167            // no Client command
   3168          
   3169            return ( stat );
   3170          }
   3171          #endif // ZCL_ON_OFF
   3172          
   3173          #ifdef ZCL_LEVEL_CTRL
   3174          /*********************************************************************
   3175           * @fn      zclGeneral_ProcessInLevelControl
   3176           *
   3177           * @brief   Process in the received Level Control Command.
   3178           *
   3179           * @param   pInMsg - pointer to the incoming message
   3180           *
   3181           * @return  ZStatus_t
   3182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3D           ADDC    A,R5
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007                REQUIRE ??Subroutine91_0
   \   000007                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3183          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInLevelControl:
   3184                                                             zclGeneral_AppCallbacks_t *pCBs )
   3185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3186            uint8 withOnOff = FALSE;
   \   00000A   7800         MOV     R0,#0x0
   3187            ZStatus_t stat = ZSuccess;
   \   00000C   7E00         MOV     R6,#0x0
   3188          
   3189            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5408         ANL     A,#0x8
   \   000017   6003         JZ      $+5
   \   000019   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3190            {
   3191              switch ( pInMsg->hdr.commandID )
   \   00001C   EA           MOV     A,R2
   \   00001D   2408         ADD     A,#0x8
   \   00001F   F5..         MOV     ?V0,A
   \   000021   E4           CLR     A
   \   000022   3B           ADDC    A,R3
   \   000023   F5..         MOV     ?V1,A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6023         JZ      ??zclGeneral_ProcessInLevelControl_1
   \   000033   14           DEC     A
   \   000034   605E         JZ      ??zclGeneral_ProcessInLevelControl_2
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??zclGeneral_ProcessInLevelControl_3 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??zclGeneral_ProcessInLevelControl_4 & 0xFFFF
   \   000042   14           DEC     A
   \   000043   600F         JZ      ??zclGeneral_ProcessInLevelControl_5
   \   000045   14           DEC     A
   \   000046   604A         JZ      ??zclGeneral_ProcessInLevelControl_6
   \   000048   14           DEC     A
   \   000049   6078         JZ      ??zclGeneral_ProcessInLevelControl_7
   \   00004B   14           DEC     A
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??zclGeneral_ProcessInLevelControl_4 & 0xFFFF
   \   000051   02....       LJMP    ??zclGeneral_ProcessInLevelControl_8 & 0xFFFF
   3192              {
   3193                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3194                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_5:
   \   000054   7801         MOV     R0,#0x1
   3195                  // fall through
   3196                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3197                  if ( pCBs->pfnLevelControlMoveToLevel )
   \                     ??zclGeneral_ProcessInLevelControl_1:
   \   000056   EC           MOV     A,R4
   \   000057   2410         ADD     A,#0x10
   \   000059   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3198                  {
   3199                    zclLCMoveToLevel_t cmd;
   3200          
   3201                    cmd.level = pInMsg->pData[0];
   \   000061   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   F0           MOVX    @DPTR,A
   3202          
   3203                    if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
   3204                         ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
   \   00006B   6020         JZ      ??zclGeneral_ProcessInLevelControl_9
   \   00006D   F4           CPL     A
   \   00006E   601D         JZ      ??zclGeneral_ProcessInLevelControl_9
   3205                    {
   3206                      cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \   000070   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000073   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FB           MOV     R3,A
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E5..         MOV     A,?V0
   \   00007F   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   3207                      cmd.withOnOff = withOnOff;
   \                     ??CrossCallReturnLabel_233:
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E8           MOV     A,R0
   \   000086   F0           MOVX    @DPTR,A
   3208          
   3209                      pCBs->pfnLevelControlMoveToLevel( &cmd );
   \   000087                ; Setup parameters for indirect call
   \   000087   AA..         MOV     R2,?XSP + 0
   \   000089   AB..         MOV     R3,?XSP + 1
   \   00008B   8079         SJMP    ??zclGeneral_ProcessInLevelControl_10
   3210                    }
   3211                    else
   3212                    {
   3213                      // level range requested is invalid
   3214                      stat = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclGeneral_ProcessInLevelControl_9:
   \   00008D   7E87         MOV     R6,#-0x79
   \   00008F   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3215                    }
   3216                  }
   3217                  break;
   3218          
   3219                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3220                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_6:
   \   000092   7801         MOV     R0,#0x1
   3221                  // fall through
   3222                case COMMAND_LEVEL_MOVE:
   3223                  if ( pCBs->pfnLevelControlMove )
   \                     ??zclGeneral_ProcessInLevelControl_2:
   \   000094   EC           MOV     A,R4
   \   000095   2412         ADD     A,#0x12
   \   000097   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00009A   7003         JNZ     $+5
   \   00009C   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3224                  {
   3225                    zclLCMove_t cmd;
   3226          
   3227                    cmd.moveMode = pInMsg->pData[0];
   \   00009F   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A2   C0E0         PUSH    A
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   D0E0         POP     A
   \   0000AB   12....       LCALL   ?Subroutine41 & 0xFFFF
   3228                    cmd.rate = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_77:
   \   0000AE   C0E0         PUSH    A
   \   0000B0   7405         MOV     A,#0x5
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   D0E0         POP     A
   \   0000B7   F0           MOVX    @DPTR,A
   3229                    cmd.withOnOff = withOnOff;
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E8           MOV     A,R0
   \   0000BE   F0           MOVX    @DPTR,A
   3230          
   3231                    pCBs->pfnLevelControlMove( &cmd );
   \   0000BF                ; Setup parameters for indirect call
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   8040         SJMP    ??zclGeneral_ProcessInLevelControl_11
   3232                  }
   3233                  break;
   3234          
   3235                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3236                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_7:
   \   0000C3   7801         MOV     R0,#0x1
   3237                  // fall through
   3238                case COMMAND_LEVEL_STEP:
   3239                  if ( pCBs->pfnLevelControlStep )
   \                     ??zclGeneral_ProcessInLevelControl_3:
   \   0000C5   EC           MOV     A,R4
   \   0000C6   2414         ADD     A,#0x14
   \   0000C8   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000CB   6057         JZ      ??zclGeneral_ProcessInLevelControl_0
   3240                  {
   3241                    zclLCStep_t cmd;
   3242          
   3243                    cmd.stepMode = pInMsg->pData[0];
   \   0000CD   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000D0   C0E0         PUSH    A
   \   0000D2   7407         MOV     A,#0x7
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   D0E0         POP     A
   \   0000D9   12....       LCALL   ?Subroutine41 & 0xFFFF
   3244                    cmd.amount =  pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_78:
   \   0000DC   C0E0         PUSH    A
   \   0000DE   7408         MOV     A,#0x8
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP     A
   \   0000E5   F0           MOVX    @DPTR,A
   3245                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \   0000E6   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000E9   A3           INC     DPTR
   \   0000EA   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   FB           MOV     R3,A
   \   0000F0   7409         MOV     A,#0x9
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   E5..         MOV     A,?V0
   \   0000F7   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   3246                    cmd.withOnOff = withOnOff;
   \                     ??CrossCallReturnLabel_212:
   \   0000FA   740B         MOV     A,#0xb
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   E8           MOV     A,R0
   \   000100   F0           MOVX    @DPTR,A
   3247          
   3248                    pCBs->pfnLevelControlStep( &cmd );
   \   000101                ; Setup parameters for indirect call
   \   000101   7407         MOV     A,#0x7
   \                     ??zclGeneral_ProcessInLevelControl_11:
   \   000103   12....       LCALL   ?XSTACK_DISP101_8
   \                     ??zclGeneral_ProcessInLevelControl_10:
   \   000106   8C82         MOV     DPL,R4
   \   000108   8D83         MOV     DPH,R5
   3249                  }
   \   00010A   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00010D   800E         SJMP    ??zclGeneral_ProcessInLevelControl_12
   3250                  break;
   3251          
   3252                case COMMAND_LEVEL_STOP:
   3253                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3254                  // Both Stop commands are identical
   3255                  if ( pCBs->pfnLevelControlStop )
   \                     ??zclGeneral_ProcessInLevelControl_4:
   \   00010F   EC           MOV     A,R4
   \   000110   2416         ADD     A,#0x16
   \   000112   F582         MOV     DPL,A
   \   000114   E4           CLR     A
   \   000115   3D           ADDC    A,R5
   \   000116   F583         MOV     DPH,A
   \   000118   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00011B   6007         JZ      ??zclGeneral_ProcessInLevelControl_0
   3256                  {
   3257                    pCBs->pfnLevelControlStop();
   \   00011D                ; Setup parameters for indirect call
   \                     ??zclGeneral_ProcessInLevelControl_12:
   \   00011D   12....       LCALL   ?CALL_IND
   \   000120   8002         SJMP    ??zclGeneral_ProcessInLevelControl_0
   3258                  }
   3259                  break;
   3260          
   3261                default:
   3262                  stat = ZFailure;
   \                     ??zclGeneral_ProcessInLevelControl_8:
   \   000122   7E01         MOV     R6,#0x1
   3263                  break;
   3264              }
   3265            }
   3266            // no Client command
   3267          
   3268            return ( stat );
   \                     ??zclGeneral_ProcessInLevelControl_0:
   \   000124   EE           MOV     A,R6
   \   000125   F9           MOV     R1,A
   \   000126   740C         MOV     A,#0xc
   \   000128   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   3269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8982         MOV     DPL,R1
   \   00000E   22           RET
   3270          #endif // ZCL_LEVEL_CTRL
   3271          
   3272          #ifdef ZCL_ALARMS
   3273          /*********************************************************************
   3274           * @fn      zclGeneral_AddAlarm
   3275           *
   3276           * @brief   Add an alarm for a cluster
   3277           *
   3278           * @param   endpoint -
   3279           * @param   alarm - new alarm item
   3280           *
   3281           * @return  ZStatus_t
   3282           */
   3283          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3284          {
   3285            zclGenAlarmItem_t *pNewItem;
   3286            zclGenAlarmItem_t *pLoop;
   3287          
   3288            // Fill in the new profile list
   3289            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3290            if ( pNewItem == NULL )
   3291              return ( ZMemError );
   3292          
   3293            // Fill in the plugin record.
   3294            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3295            pNewItem->endpoint =  endpoint;
   3296            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3297          
   3298            // Find spot in list
   3299            if (  zclGenAlarmTable == NULL )
   3300            {
   3301              zclGenAlarmTable = pNewItem;
   3302            }
   3303            else
   3304            {
   3305              // Look for end of list
   3306              pLoop = zclGenAlarmTable;
   3307              while ( pLoop->next != NULL )
   3308                pLoop = pLoop->next;
   3309          
   3310              // Put new item at end of list
   3311              pLoop->next = pNewItem;
   3312            }
   3313          
   3314            return ( ZSuccess );
   3315          }
   3316          
   3317          /*********************************************************************
   3318           * @fn      zclGeneral_FindAlarm
   3319           *
   3320           * @brief   Find an alarm with alarmCode and clusterID
   3321           *
   3322           * @param   endpoint -
   3323           * @param   groupID - what group the scene belongs to
   3324           * @param   sceneID - ID to look for scene
   3325           *
   3326           * @return  a pointer to the alarm information, NULL if not found
   3327           */
   3328          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3329          {
   3330            zclGenAlarmItem_t *pLoop;
   3331          
   3332            // Look for the alarm
   3333            pLoop = zclGenAlarmTable;
   3334            while ( pLoop )
   3335            {
   3336              if ( pLoop->endpoint == endpoint &&
   3337                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3338              {
   3339                return ( &(pLoop->alarm) );
   3340              }
   3341              pLoop = pLoop->next;
   3342            }
   3343          
   3344            return ( (zclGeneral_Alarm_t *)NULL );
   3345          }
   3346          
   3347          /*********************************************************************
   3348           * @fn      zclGeneral_FindEarliestAlarm
   3349           *
   3350           * @brief   Find an alarm with the earliest timestamp
   3351           *
   3352           * @param   endpoint -
   3353           *
   3354           * @return  a pointer to the alarm information, NULL if not found
   3355           */
   3356          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3357          {
   3358            zclGenAlarmItem_t *pLoop;
   3359            zclGenAlarmItem_t earliestAlarm;
   3360            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3361          
   3362            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3363          
   3364            // Look for alarm with earliest time
   3365            pLoop = zclGenAlarmTable;
   3366            while ( pLoop )
   3367            {
   3368              if ( pLoop->endpoint == endpoint &&
   3369                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3370              {
   3371                pEarliestAlarm = pLoop;
   3372              }
   3373              pLoop = pLoop->next;
   3374            }
   3375          
   3376            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3377              return ( &(pEarliestAlarm->alarm) );
   3378          
   3379            // No alarm
   3380            return ( (zclGeneral_Alarm_t *)NULL );
   3381          }
   3382          
   3383          /*********************************************************************
   3384           * @fn      zclGeneral_ResetAlarm
   3385           *
   3386           * @brief   Remove an alarm with alarmCode and clusterID
   3387           *
   3388           * @param   endpoint -
   3389           * @param   alarmCode -
   3390           * @param   clusterID -
   3391           *
   3392           * @return  TRUE if removed, FALSE if not found
   3393           */
   3394          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3395          {
   3396            zclGenAlarmItem_t *pLoop;
   3397            zclGenAlarmItem_t *pPrev;
   3398          
   3399            // Look for end of list
   3400            pLoop = zclGenAlarmTable;
   3401            pPrev = NULL;
   3402            while ( pLoop )
   3403            {
   3404              if ( pLoop->endpoint == endpoint &&
   3405                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3406              {
   3407                if ( pPrev == NULL )
   3408                  zclGenAlarmTable = pLoop->next;
   3409                else
   3410                  pPrev->next = pLoop->next;
   3411          
   3412                // Free the memory
   3413                zcl_mem_free( pLoop );
   3414          
   3415                // Notify the Application so that if the alarm condition still active then
   3416                // a new notification will be generated, and a new alarm record will be
   3417                // added to the alarm log
   3418                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3419                return;
   3420              }
   3421              pPrev = pLoop;
   3422              pLoop = pLoop->next;
   3423            }
   3424          }
   3425          
   3426          /*********************************************************************
   3427           * @fn      zclGeneral_ResetAllAlarms
   3428           *
   3429           * @brief   Remove all alarms with endpoint
   3430           *
   3431           * @param   endpoint -
   3432           * @param   notifyApp -
   3433           *
   3434           * @return  none
   3435           */
   3436          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3437          {
   3438            zclGenAlarmItem_t *pLoop;
   3439            zclGenAlarmItem_t *pPrev;
   3440            zclGenAlarmItem_t *pNext;
   3441          
   3442            // Look for end of list
   3443            pLoop = zclGenAlarmTable;
   3444            pPrev = NULL;
   3445            while ( pLoop )
   3446            {
   3447              if (  pLoop->endpoint == endpoint )
   3448              {
   3449                if ( pPrev == NULL )
   3450                  zclGenAlarmTable = pLoop->next;
   3451                else
   3452                  pPrev->next = pLoop->next;
   3453          
   3454                pNext = pLoop->next;
   3455          
   3456                // Free the memory
   3457                zcl_mem_free( pLoop );
   3458          
   3459                pLoop = pNext;
   3460              }
   3461              else
   3462              {
   3463                pPrev = pLoop;
   3464                pLoop = pLoop->next;
   3465              }
   3466            }
   3467          
   3468            if ( notifyApp )
   3469            {
   3470              // Notify the Application so that if any alarm conditions still active then
   3471              // a new notification will be generated, and a new alarm record will be
   3472              // added to the alarm log
   3473              // zclGeneral_NotifyResetAll(); // callback function?
   3474            }
   3475          }
   3476          
   3477          /*********************************************************************
   3478           * @fn      zclGeneral_ProcessInAlarmsServer
   3479           *
   3480           * @brief   Process in the received Alarms Command.
   3481           *
   3482           * @param   pInMsg - pointer to the incoming message
   3483           *
   3484           * @return  ZStatus_t
   3485           */
   3486          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3487                                                             zclGeneral_AppCallbacks_t *pCBs )
   3488          {
   3489            zclAlarm_t alarm;
   3490            zclGeneral_Alarm_t *pAlarm;
   3491            uint8 *pData = pInMsg->pData;
   3492            ZStatus_t stat = ZSuccess;
   3493          
   3494            switch ( pInMsg->hdr.commandID )
   3495            {
   3496              case COMMAND_ALARMS_RESET:
   3497                if ( pCBs->pfnAlarm )
   3498                {
   3499                  alarm.cmdID = pInMsg->hdr.commandID;
   3500                  alarm.alarmCode = pData[0];
   3501                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3502          
   3503                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3504                }
   3505                else
   3506                {
   3507                  stat = ZCL_STATUS_FAILURE;
   3508                }
   3509                break;
   3510          
   3511              case COMMAND_ALARMS_RESET_ALL:
   3512                if ( pCBs->pfnAlarm )
   3513                {
   3514                  alarm.cmdID = pInMsg->hdr.commandID;
   3515          
   3516                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3517                }
   3518                else
   3519                {
   3520                  stat = ZCL_STATUS_FAILURE;
   3521                }
   3522                break;
   3523          
   3524              case COMMAND_ALARMS_GET:
   3525                if ( pCBs->pfnAlarm )
   3526                {
   3527                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3528                  alarm.cmdID = pInMsg->hdr.commandID;
   3529          
   3530                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3531          
   3532                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3533                  if ( pAlarm )
   3534                  {
   3535                    // Send a response back
   3536                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3537                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3538                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3539                                                     true, pInMsg->hdr.transSeqNum );
   3540                    // Remove the entry from the Alarm table
   3541                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3542                  }
   3543                  else
   3544                  {
   3545                    // Send a response back
   3546                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3547                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3548                                                     true, pInMsg->hdr.transSeqNum );
   3549                  }
   3550                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3551                }
   3552                else
   3553                {
   3554                  stat = ZCL_STATUS_FAILURE;
   3555                }
   3556                break;
   3557          
   3558              case COMMAND_ALARMS_RESET_LOG:
   3559                if ( pCBs->pfnAlarm )
   3560                {
   3561                  alarm.cmdID = pInMsg->hdr.commandID;
   3562          
   3563                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3564          
   3565                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3566                }
   3567                else
   3568                {
   3569                  stat = ZCL_STATUS_FAILURE;
   3570                }
   3571                break;
   3572          
   3573          #ifdef SE_UK_EXT
   3574              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3575                if ( pCBs->pfnPublishEventLog )
   3576                {
   3577                  zclPublishEventLog_t eventLog;
   3578          
   3579                  eventLog.logID = *pData++;
   3580                  eventLog.cmdIndex = *pData++;
   3581                  eventLog.totalCmds = *pData++;
   3582          
   3583                  // First try to find out number of Sub Log Payloads
   3584                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3585                  if ( eventLog.numSubLogs > 0 )
   3586                  {
   3587                    // Try to alloc space for Log Payload
   3588                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3589                                                                             eventLog.numSubLogs );
   3590                    if ( eventLog.pLogs != NULL )
   3591                    {
   3592                      // Copy Log Payload
   3593                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3594                      {
   3595                        eventLog.pLogs[i].eventId = *pData++;
   3596                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3597                        pData += 4;
   3598                      }
   3599                    }
   3600                    else
   3601                    {
   3602                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3603                    }
   3604                  }
   3605                  else
   3606                  {
   3607                    eventLog.pLogs = NULL;
   3608                  }
   3609          
   3610                  if ( stat == ZSuccess )
   3611                  {
   3612                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3613                  }
   3614          
   3615                  if ( eventLog.pLogs != NULL )
   3616                  {
   3617                    zcl_mem_free( eventLog.pLogs );
   3618                  }
   3619                }
   3620                break;
   3621          #endif // SE_UK_EXT
   3622          
   3623              default:
   3624                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3625                break;
   3626            }
   3627          
   3628            return ( stat );
   3629          }
   3630          
   3631          /*********************************************************************
   3632           * @fn      zclGeneral_ProcessInAlarmsClient
   3633           *
   3634           * @brief   Process in the received Alarms Command.
   3635           *
   3636           * @param   pInMsg - pointer to the incoming message
   3637           *
   3638           * @return  ZStatus_t
   3639           */
   3640          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3641                                                             zclGeneral_AppCallbacks_t *pCBs )
   3642          {
   3643            uint8 *pData = pInMsg->pData;
   3644            zclAlarm_t alarm;
   3645            ZStatus_t stat = ZSuccess;
   3646          
   3647            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3648          
   3649            switch ( pInMsg->hdr.commandID )
   3650            {
   3651              case COMMAND_ALARMS_ALARM:
   3652                if ( pCBs->pfnAlarm )
   3653                {
   3654                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3655                  alarm.cmdID = pInMsg->hdr.commandID;
   3656                  alarm.alarmCode = pData[0];
   3657                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3658          
   3659                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3660                }
   3661                else
   3662                {
   3663                  stat = ZCL_STATUS_FAILURE;
   3664                }
   3665                break;
   3666          
   3667              case COMMAND_ALARMS_GET_RSP:
   3668                if ( pCBs->pfnAlarm )
   3669                {
   3670                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3671                  alarm.cmdID = pInMsg->hdr.commandID;
   3672                  alarm.alarmCode = *pData++;
   3673                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3674          
   3675                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3676                }
   3677                else
   3678                {
   3679                  stat = ZCL_STATUS_FAILURE;
   3680                }
   3681                break;
   3682          
   3683          #ifdef SE_UK_EXT
   3684              case COMMAND_ALARMS_GET_EVENT_LOG:
   3685                if ( pCBs->pfnGetEventLog )
   3686                {
   3687                  zclGetEventLog_t eventLog;
   3688          
   3689                  eventLog.logID = *pData++;
   3690                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3691                  pData += 4;
   3692                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3693                  pData += 4;
   3694                  eventLog.numEvents = *pData;
   3695          
   3696                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3697                                        &eventLog, pInMsg->hdr.transSeqNum );
   3698                }
   3699                break;
   3700          #endif // SE_UK_EXT
   3701          
   3702              default:
   3703                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3704                break;
   3705            }
   3706          
   3707            return ( stat );
   3708          }
   3709          #endif // ZCL_ALARMS
   3710          
   3711          #ifdef ZCL_LOCATION
   3712          /*********************************************************************
   3713           * @fn      zclGeneral_ProcessInLocationServer
   3714           *
   3715           * @brief   Process in the received Location Command.
   3716           *
   3717           * @param   pInMsg - pointer to the incoming message
   3718           *
   3719           * @return  ZStatus_t
   3720           */
   3721          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3722                                                               zclGeneral_AppCallbacks_t *pCBs )
   3723          {
   3724            uint8 *pData = pInMsg->pData;
   3725            zclLocation_t cmd;
   3726            ZStatus_t stat = ZSuccess;
   3727          
   3728            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3729          
   3730            switch ( pInMsg->hdr.commandID )
   3731            {
   3732              case COMMAND_LOCATION_SET_ABSOLUTE:
   3733                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3734                pData += 2;
   3735                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3736                pData += 2;
   3737                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3738                pData += 2;
   3739                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3740                pData += 2;
   3741                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3742          
   3743                if ( pCBs->pfnLocation )
   3744                {
   3745                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3746                  cmd.cmdID = pInMsg->hdr.commandID;
   3747          
   3748                  // Update the absolute location info
   3749                  pCBs->pfnLocation( &cmd );
   3750                }
   3751                break;
   3752          
   3753              case COMMAND_LOCATION_SET_DEV_CFG:
   3754                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3755                pData += 2;
   3756                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3757                pData += 2;
   3758                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3759                pData += 2;
   3760                cmd.un.devCfg.numMeasurements = *pData++;
   3761                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3762          
   3763                if ( pCBs->pfnLocation )
   3764                {
   3765                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3766                  cmd.cmdID = pInMsg->hdr.commandID;
   3767          
   3768                  // Update the device configuration info
   3769                  pCBs->pfnLocation( &cmd );
   3770                }
   3771                break;
   3772          
   3773              case COMMAND_LOCATION_GET_DEV_CFG:
   3774                cmd.un.ieeeAddr = pData;
   3775          
   3776                if ( pCBs->pfnLocation )
   3777                {
   3778                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3779                  cmd.cmdID = pInMsg->hdr.commandID;
   3780                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3781          
   3782                  // Retreive the Device Configuration
   3783                  pCBs->pfnLocation( &cmd );
   3784                }
   3785                stat = ZCL_STATUS_CMD_HAS_RSP;
   3786                break;
   3787          
   3788              case COMMAND_LOCATION_GET_DATA:
   3789                cmd.un.loc.bitmap.locByte = *pData++;
   3790                cmd.un.loc.numResponses = *pData++;
   3791          
   3792                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3793                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3794          
   3795                if ( pCBs->pfnLocation )
   3796                {
   3797                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3798                  cmd.cmdID = pInMsg->hdr.commandID;
   3799                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3800          
   3801                  // Retreive the Location Data
   3802                  pCBs->pfnLocation( &cmd );
   3803                }
   3804                stat = ZCL_STATUS_CMD_HAS_RSP;
   3805                break;
   3806          
   3807              default:
   3808                stat = ZFailure;
   3809                break;
   3810            }
   3811          
   3812            return ( stat );
   3813          }
   3814          
   3815          /*********************************************************************
   3816           * @fn      zclGeneral_ProcessInLocationDataRsp
   3817           *
   3818           * @brief   Process in the received Location Command.
   3819           *
   3820           * @param   pInMsg - pointer to the incoming message
   3821           *
   3822           * @return  ZStatus_t
   3823           */
   3824          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3825                                                           zclGeneral_AppCallbacks_t *pCBs )
   3826          {
   3827            uint8 *pData = pInMsg->pData;
   3828            zclLocationRsp_t rsp;
   3829          
   3830            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3831          
   3832            if ( pCBs->pfnLocationRsp )
   3833            {
   3834              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3835                rsp.un.loc.status = *pData++;
   3836          
   3837              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3838                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3839              {
   3840                rsp.un.loc.data.type = *pData++;
   3841                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3842                pData += 2;
   3843                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3844                pData += 2;
   3845          
   3846                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3847                {
   3848                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3849                  pData += 2;
   3850                }
   3851          
   3852                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3853                {
   3854                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3855                  pData += 2;
   3856                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3857                  pData += 2;
   3858                }
   3859          
   3860                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3861                {
   3862                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3863                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3864          
   3865                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3866                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3867                }
   3868              }
   3869          
   3870              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3871              rsp.cmdID = pInMsg->hdr.commandID;
   3872          
   3873              // Notify the Application
   3874              pCBs->pfnLocationRsp( &rsp );
   3875            }
   3876          }
   3877          
   3878          /*********************************************************************
   3879           * @fn      zclGeneral_ProcessInLocationClient
   3880           *
   3881           * @brief   Process in the received Location Command.
   3882           *
   3883           * @param   pInMsg - pointer to the incoming message
   3884           *
   3885           * @return  ZStatus_t
   3886           */
   3887          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3888                                                               zclGeneral_AppCallbacks_t *pCBs )
   3889          {
   3890            uint8 *pData = pInMsg->pData;
   3891            zclLocationRsp_t rsp;
   3892            ZStatus_t stat = ZSuccess;
   3893          
   3894            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3895          
   3896            switch ( pInMsg->hdr.commandID )
   3897            {
   3898              case COMMAND_LOCATION_DEV_CFG_RSP:
   3899                if ( pCBs->pfnLocationRsp )
   3900                {
   3901                  rsp.un.devCfg.status = *pData++;
   3902                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   3903                  {
   3904                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   3905                    pData += 2;
   3906                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3907                    pData += 2;
   3908                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3909                    pData += 2;
   3910                    rsp.un.devCfg.data.numMeasurements = *pData++;
   3911                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3912          
   3913                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3914                    rsp.cmdID = pInMsg->hdr.commandID;
   3915          
   3916                    // Notify the Application
   3917                    pCBs->pfnLocationRsp( &rsp );
   3918                  }
   3919                }
   3920                break;
   3921          
   3922              case COMMAND_LOCATION_DATA_RSP:
   3923              case COMMAND_LOCATION_DATA_NOTIF:
   3924              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   3925                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   3926                break;
   3927          
   3928              case COMMAND_LOCATION_RSSI_PING:
   3929                if ( pCBs->pfnLocationRsp )
   3930                {
   3931                  rsp.un.locationType = *pData;
   3932          
   3933                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3934                  rsp.cmdID = pInMsg->hdr.commandID;
   3935          
   3936                  // Notify the Application
   3937                  pCBs->pfnLocationRsp( &rsp );
   3938                }
   3939                break;
   3940          
   3941              default:
   3942                stat = ZFailure;
   3943                break;
   3944            }
   3945          
   3946            return ( stat );
   3947          }
   3948          #endif // ZCL_LOCATION
   3949          
   3950          #ifdef ZCL_SCENES
   3951          #if !defined ( ZCL_STANDALONE )
   3952          /*********************************************************************
   3953           * @fn      zclGeneral_ScenesInitNV
   3954           *
   3955           * @brief   Initialize the NV Scene Table Items
   3956           *
   3957           * @param   none
   3958           *
   3959           * @return  number of scenes
   3960           */
   3961          static uint8 zclGeneral_ScenesInitNV( void )
   3962          {
   3963            uint8  status;
   3964            uint16 size;
   3965          
   3966            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   3967                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   3968          
   3969            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   3970          
   3971            if ( status != ZSUCCESS )
   3972            {
   3973              zclGeneral_ScenesSetDefaultNV();
   3974            }
   3975          
   3976            return status;
   3977          }
   3978          #endif // ZCL_STANDALONE
   3979          
   3980          #if !defined ( ZCL_STANDALONE )
   3981          /*********************************************************************
   3982           * @fn          zclGeneral_ScenesSetDefaultNV
   3983           *
   3984           * @brief       Write the defaults to NV
   3985           *
   3986           * @param       none
   3987           *
   3988           * @return      none
   3989           */
   3990          static void zclGeneral_ScenesSetDefaultNV( void )
   3991          {
   3992            nvGenScenesHdr_t hdr;
   3993          
   3994            // Initialize the header
   3995            hdr.numRecs = 0;
   3996          
   3997            // Save off the header
   3998            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3999          }
   4000          #endif // ZCL_STANDALONE
   4001          
   4002          #if !defined ( ZCL_STANDALONE )
   4003          /*********************************************************************
   4004           * @fn          zclGeneral_ScenesWriteNV
   4005           *
   4006           * @brief       Save the Scene Table in NV
   4007           *
   4008           * @param       none
   4009           *
   4010           * @return      none
   4011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4012          static void zclGeneral_ScenesWriteNV( void )
   \                     zclGeneral_ScenesWriteNV:
   4013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4014            nvGenScenesHdr_t hdr;
   4015            zclGenSceneItem_t *pLoop;
   4016            zclGenSceneNVItem_t item;
   4017          
   4018            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   4019          
   4020            // Look for end of list
   4021            pLoop = zclGenSceneTable;
   \   000014   90....       MOV     DPTR,#zclGenSceneTable
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   807E         SJMP    ??zclGeneral_ScenesWriteNV_0
   4022            while ( pLoop )
   4023            {
   4024              // Build the record
   4025              item.endpoint = pLoop->endpoint;
   \                     ??zclGeneral_ScenesWriteNV_1:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine69 & 0xFFFF
   4026              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   \                     ??CrossCallReturnLabel_120:
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A982         MOV     R1,DPL
   \   000034   AA83         MOV     R2,DPH
   \   000036   89..         MOV     ?V0,R1
   \   000038   8A..         MOV     ?V1,R2
   \   00003A   75..00       MOV     ?V2,#0x0
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   7C37         MOV     R4,#0x37
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7406         MOV     A,#0x6
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000052   7403         MOV     A,#0x3
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   4027          
   4028              // Save the record to NV
   4029              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   4030                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   4031                              sizeof ( zclGenSceneNVItem_t ), &item );
   \   000057                ; Setup parameters for call to function osal_nv_write
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V0,R0
   \   00005E   89..         MOV     ?V1,R1
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   75..38       MOV     ?V0,#0x38
   \   000068   75..00       MOV     ?V1,#0x0
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7404         MOV     A,#0x4
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000078   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00007B   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   4032          
   4033              hdr.numRecs++;
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   2401         ADD     A,#0x1
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F0           MOVX    @DPTR,A
   4034          
   4035              pLoop = pLoop->next;
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   12....       LCALL   ?Subroutine29 & 0xFFFF
   4036            }
   \                     ??CrossCallReturnLabel_42:
   \   000099   FE           MOV     R6,A
   \   00009A   E9           MOV     A,R1
   \                     ??zclGeneral_ScenesWriteNV_0:
   \   00009B   FF           MOV     R7,A
   \   00009C   EE           MOV     A,R6
   \   00009D   4F           ORL     A,R7
   \   00009E   6003         JZ      $+5
   \   0000A0   02....       LJMP    ??zclGeneral_ScenesWriteNV_1 & 0xFFFF
   4037          
   4038            // Save off the header
   4039            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   \   0000A3                ; Setup parameters for call to function osal_nv_write
   \   0000A3   A8..         MOV     R0,?XSP + 0
   \   0000A5   A9..         MOV     R1,?XSP + 1
   \   0000A7   88..         MOV     ?V0,R0
   \   0000A9   89..         MOV     ?V1,R1
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   75..02       MOV     ?V0,#0x2
   \   0000B3   75..00       MOV     ?V1,#0x0
   \   0000B6   78..         MOV     R0,#?V0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   7D00         MOV     R5,#0x0
   \   0000BF   7A91         MOV     R2,#-0x6f
   \   0000C1   7B00         MOV     R3,#0x0
   \   0000C3   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   4040          }
   \   0000CB   743A         MOV     A,#0x3a
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F03         MOV     R7,#0x3
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   75F038       MOV     B,#0x38
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   AAF0         MOV     R2,B
   \   000007   75F038       MOV     B,#0x38
   \   00000A   E9           MOV     A,R1
   \   00000B   A4           MUL     AB
   \   00000C   2A           ADD     A,R2
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   2402         ADD     A,#0x2
   \   000011   FC           MOV     R4,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   FD           MOV     R5,A
   \   000015   7A91         MOV     R2,#-0x6f
   \   000017   7B00         MOV     R3,#0x0
   \   000019   22           RET
   4041          #endif // ZCL_STANDALONE
   4042          
   4043          #if !defined ( ZCL_STANDALONE )
   4044          /*********************************************************************
   4045           * @fn          zclGeneral_ScenesRestoreFromNV
   4046           *
   4047           * @brief       Restore the Scene table from NV
   4048           *
   4049           * @param       none
   4050           *
   4051           * @return      Number of entries restored
   4052           */
   4053          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   4054          {
   4055            uint16 x;
   4056            nvGenScenesHdr_t hdr;
   4057          
   4058            zclGenSceneNVItem_t item;
   4059            uint16 numAdded = 0;
   4060          
   4061            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   4062            {
   4063              // Read in the device list
   4064              for ( x = 0; x < hdr.numRecs; x++ )
   4065              {
   4066                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4067                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4068                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   4069                {
   4070                  // Add the scene
   4071                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   4072                  {
   4073                    numAdded++;
   4074                  }
   4075                }
   4076              }
   4077            }
   4078          
   4079            return ( numAdded );
   4080          }
   4081          #endif // ZCL_STANDALONE
   4082          
   4083          #if !defined ( ZCL_STANDALONE )
   4084          /*********************************************************************
   4085           * @fn          zclGeneral_ScenesInit
   4086           *
   4087           * @brief       Initialize the scenes table
   4088           *
   4089           * @param       none
   4090           *
   4091           * @return      none
   4092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4093          void zclGeneral_ScenesInit( void )
   \                     zclGeneral_ScenesInit:
   4094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4095            // Initialize NV items
   4096            zclGeneral_ScenesInitNV();
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C82         MOV     R4,#-0x7e
   \   000016   7D03         MOV     R5,#0x3
   \   000018   7A91         MOV     R2,#-0x6f
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   602A         JZ      ??zclGeneral_ScenesInit_0
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV     ?V0,#0x2
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A91         MOV     R2,#-0x6f
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   4097          
   4098            // Restore the Scene table
   4099            zclGeneral_ScenesRestoreFromNV();
   \                     ??zclGeneral_ScenesInit_0:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV     R0,?XSP + 0
   \   000053   A9..         MOV     R1,?XSP + 1
   \   000055   88..         MOV     ?V0,R0
   \   000057   89..         MOV     ?V1,R1
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV     ?V0,#0x2
   \   000061   75..00       MOV     ?V1,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A91         MOV     R2,#-0x6f
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   705A         JNZ     ??zclGeneral_ScenesInit_1
   \   00007C   7E00         MOV     R6,#0x0
   \   00007E   7F00         MOV     R7,#0x0
   \   000080   8044         SJMP    ??zclGeneral_ScenesInit_2
   \                     ??zclGeneral_ScenesInit_3:
   \   000082                ; Setup parameters for call to function osal_nv_read
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP100_8
   \   000087   88..         MOV     ?V0,R0
   \   000089   89..         MOV     ?V1,R1
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..38       MOV     ?V0,#0x38
   \   000093   75..00       MOV     ?V1,#0x0
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   EE           MOV     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   F9           MOV     R1,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000A3   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV     A,R1
   \   0000AC   7013         JNZ     ??zclGeneral_ScenesInit_4
   \   0000AE                ; Setup parameters for call to function zclGeneral_AddScene
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   ??zclGeneral_AddScene?relay; Banked call to: zclGeneral_AddScene
   \                     ??zclGeneral_ScenesInit_4:
   \   0000C1   0E           INC     R6
   \   0000C2   EE           MOV     A,R6
   \   0000C3   7001         JNZ     ??zclGeneral_ScenesInit_2
   \   0000C5   0F           INC     R7
   \                     ??zclGeneral_ScenesInit_2:
   \   0000C6   85..82       MOV     DPL,?XSP + 0
   \   0000C9   85..83       MOV     DPH,?XSP + 1
   \   0000CC   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   0000CF   C3           CLR     C
   \   0000D0   EE           MOV     A,R6
   \   0000D1   98           SUBB    A,R0
   \   0000D2   EF           MOV     A,R7
   \   0000D3   99           SUBB    A,R1
   \   0000D4   40AC         JC      ??zclGeneral_ScenesInit_3
   4100          }
   \                     ??zclGeneral_ScenesInit_1:
   \   0000D6   743A         MOV     A,#0x3a
   \   0000D8   80..         SJMP    ??Subroutine101_0
   4101          #endif // ZCL_STANDALONE
   4102          
   4103          #if !defined ( ZCL_STANDALONE )
   4104          /*********************************************************************
   4105           * @fn          zclGeneral_ScenesSave
   4106           *
   4107           * @brief       Save the scenes table
   4108           *
   4109           * @param       none
   4110           *
   4111           * @return      none
   4112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4113          void zclGeneral_ScenesSave( void )
   \                     zclGeneral_ScenesSave:
   4114          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4115            // Update NV
   4116            zclGeneral_ScenesWriteNV();
   \   000004                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000004   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay; Banked call to: zclGeneral_ScenesWriteNV
   4117          }
   \   000007   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RegisterCmdCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyEZModeInvoke?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyEZModeInvoke

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyUpdateCommState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyUpdateCommState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyQueryResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyQueryResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendAddGroupRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupGetMembershipRequest?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupGetMembershipRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupViewResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupViewResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendAddSceneRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneViewRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneViewRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneGetMembershipResponse?rel:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneGetMembershipResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlMoveToLevelRequest:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlMoveToLevelRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlMoveRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlMoveRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlStepRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlStepRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlStopRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlStopRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_HdlIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_HdlInSpecificCommands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlInSpecificCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInIdentity?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInIdentity

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_AddGroup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInGroupsServer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInGroupsClient?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_AddScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_FindScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_FindAllScenesForGroup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindAllScenesForGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RemoveScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RemoveAllScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_CountScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_CountAllScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ReadSceneCountCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ReadSceneCountCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInScenesServer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInScenesClient?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInLevelControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInLevelControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesWriteNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesSave?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesSave
   4118          #endif // ZCL_STANDALONE
   4119          
   4120          #endif // ZCL_SCENES
   4121          
   4122          /***************************************************************************
   4123          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     85   zclGeneral_AddGroup
        0      9   -> addSceneSelector_setGroupID
      0     91   zclGeneral_AddScene
        0      9   -> addSceneSelector_setSceneID
      2     82   zclGeneral_CountAllScenes
      2      0   zclGeneral_CountScenes
      1     92   zclGeneral_FindAllScenesForGroup
      0     91   zclGeneral_FindScene
      0     10   zclGeneral_HdlInSpecificCommands
        0     10   -> zclGeneral_ProcessInGroupsClient
        0     10   -> zclGeneral_ProcessInGroupsServer
        0     10   -> zclGeneral_ProcessInIdentity
        0     10   -> zclGeneral_ProcessInLevelControl
        0     10   -> zclGeneral_ProcessInScenesClient
        0     10   -> zclGeneral_ProcessInScenesServer
      2      0   zclGeneral_HdlIncoming
        2      0   -> zclGeneral_HdlInSpecificCommands
      1     63   zclGeneral_ProcessInGroupsClient
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      1     93   zclGeneral_ProcessInGroupsServer
        0     76   -> aps_CountAllGroups
        0     76   -> aps_FindAllGroupsForEndpoint
        0     76   -> aps_FindGroup
        0     76   -> aps_RemoveAllGroup
        0     76   -> aps_RemoveGroup
        0     76   -> osal_mem_alloc
        0     76   -> osal_mem_free
        0     76   -> osal_memset
        0     76   -> zclGeneral_AddGroup
        0     76   -> zclGeneral_RemoveAllScenes
        0     83   -> zclGeneral_SendGroupGetMembershipRequest
        0     80   -> zclGeneral_SendGroupResponse
        0     79   -> zclGeneral_SendGroupViewResponse
        0     80   -> zcl_ReadAttrData
        0     83   -> zcl_SendDefaultRspCmd
      0     32   zclGeneral_ProcessInIdentity
        0     20   -> zclGeneral_SendIdentifyQueryResponse
        0     22   -> zcl_ReadAttrData
      1     32   zclGeneral_ProcessInLevelControl
      1    100   zclGeneral_ProcessInScenesClient
        0     87   -> osal_mem_alloc
        0     87   -> osal_mem_free
        0     90   -> osal_memcpy
        0     87   -> osal_memset
      1     99   zclGeneral_ProcessInScenesServer
        0     82   -> aps_FindGroup
        0     82   -> osal_mem_alloc
        0     82   -> osal_mem_free
        0     85   -> osal_memcpy
        0     82   -> osal_memset
        0     82   -> zclGeneral_AddScene
        0     82   -> zclGeneral_CountAllScenes
        0     82   -> zclGeneral_FindAllScenesForGroup
        0     82   -> zclGeneral_FindScene
        0     82   -> zclGeneral_RemoveAllScenes
        0     82   -> zclGeneral_RemoveScene
        0     82   -> zclGeneral_ScenesWriteNV
        0     89   -> zclGeneral_SendSceneGetMembershipResponse
        0     87   -> zclGeneral_SendSceneResponse
        0     86   -> zclGeneral_SendSceneViewRsp
        0     86   -> zcl_ReadAttrData
      1     14   zclGeneral_ReadSceneCountCB
        0     10   -> zclGeneral_CountAllScenes
      1     14   zclGeneral_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     12   -> zclGeneral_ScenesInit
        0     14   -> zcl_registerPlugin
      0     95   zclGeneral_RemoveAllScenes
        0     13   -> osal_mem_free
        0     13   -> zclGeneral_ScenesWriteNV
      0     91   zclGeneral_RemoveScene
        0      9   -> osal_mem_free
        0      9   -> zclGeneral_ScenesWriteNV
      0     84   zclGeneral_ScenesInit
        0     70   -> osal_nv_item_init
        0     72   -> osal_nv_read
        0     72   -> osal_nv_write
        0     68   -> zclGeneral_AddScene
      2      0   zclGeneral_ScenesSave
        2      0   -> zclGeneral_ScenesWriteNV
      1    155   zclGeneral_ScenesWriteNV
        0     72   -> osal_memcpy
        0     73   -> osal_nv_write
      1     38   zclGeneral_SendAddGroupRequest
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     40   zclGeneral_SendAddSceneRequest
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand
      1    114   zclGeneral_SendGroupGetMembershipRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclGeneral_SendGroupRequest
        0     25   -> zcl_SendCommand
      1    106   zclGeneral_SendGroupResponse
        0     26   -> zcl_SendCommand
      1    112   zclGeneral_SendGroupViewResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentify
        0     23   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentifyEZModeInvoke
        0     24   -> zcl_SendCommand
      1     43   zclGeneral_SendIdentifyQueryResponse
        0     23   -> zcl_SendCommand
      1     27   zclGeneral_SendIdentifyUpdateCommState
        0     25   -> zcl_SendCommand
      1     28   zclGeneral_SendLevelControlMoveRequest
        0     25   -> zcl_SendCommand
      1     30   zclGeneral_SendLevelControlMoveToLevelRequest
        0     26   -> zcl_SendCommand
      1     32   zclGeneral_SendLevelControlStepRequest
        0     27   -> zcl_SendCommand
      0     24   zclGeneral_SendLevelControlStopRequest
        0     23   -> zcl_SendCommand
      1    118   zclGeneral_SendSceneGetMembershipResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     29   -> zcl_SendCommand
      1     30   zclGeneral_SendSceneRequest
        0     26   -> zcl_SendCommand
      1    114   zclGeneral_SendSceneResponse
        0     27   -> zcl_SendCommand
      1    123   zclGeneral_SendSceneViewRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ??Subroutine100_0
       3  ??Subroutine101_0
       5  ??Subroutine102_0
      12  ??Subroutine76_0
      12  ??Subroutine77_0
      13  ??Subroutine78_0
       6  ??Subroutine79_0
      10  ??Subroutine80_0
       3  ??Subroutine81_0
       5  ??Subroutine82_0
       6  ??Subroutine83_0
       7  ??Subroutine84_0
       5  ??Subroutine85_0
       2  ??Subroutine86_0
       5  ??Subroutine87_0
       5  ??Subroutine88_0
       1  ??Subroutine89_0
       5  ??Subroutine90_0
       5  ??Subroutine91_0
       6  ??Subroutine92_0
       7  ??Subroutine93_0
       8  ??Subroutine94_0
       4  ??Subroutine95_0
       6  ??Subroutine96_0
       6  ??Subroutine97_0
      16  ??Subroutine98_0
       5  ??Subroutine99_0
       6  ??zclGeneral_AddGroup?relay
       6  ??zclGeneral_AddScene?relay
       6  ??zclGeneral_CountAllScenes?relay
       6  ??zclGeneral_CountScenes?relay
       6  ??zclGeneral_FindAllScenesForGroup?relay
       6  ??zclGeneral_FindScene?relay
       6  ??zclGeneral_HdlInSpecificCommands?relay
       6  ??zclGeneral_HdlIncoming?relay
       6  ??zclGeneral_ProcessInGroupsClient?relay
       6  ??zclGeneral_ProcessInGroupsServer?relay
       6  ??zclGeneral_ProcessInIdentity?relay
       6  ??zclGeneral_ProcessInLevelControl?relay
       6  ??zclGeneral_ProcessInScenesClient?relay
       6  ??zclGeneral_ProcessInScenesServer?relay
       6  ??zclGeneral_ReadSceneCountCB?relay
       6  ??zclGeneral_RegisterCmdCallbacks?relay
       6  ??zclGeneral_RemoveAllScenes?relay
       6  ??zclGeneral_RemoveScene?relay
       6  ??zclGeneral_ScenesInit?relay
       6  ??zclGeneral_ScenesSave?relay
       6  ??zclGeneral_ScenesWriteNV?relay
       6  ??zclGeneral_SendAddGroupRequest?relay
       6  ??zclGeneral_SendAddSceneRequest?relay
       6  ??zclGeneral_SendGroupGetMembershipRequest?rela
       6  ??zclGeneral_SendGroupRequest?relay
       6  ??zclGeneral_SendGroupResponse?relay
       6  ??zclGeneral_SendGroupViewResponse?relay
       6  ??zclGeneral_SendIdentify?relay
       6  ??zclGeneral_SendIdentifyEZModeInvoke?relay
       6  ??zclGeneral_SendIdentifyQueryResponse?relay
       6  ??zclGeneral_SendIdentifyUpdateCommState?relay
       6  ??zclGeneral_SendLevelControlMoveRequest?relay
       6  ??zclGeneral_SendLevelControlMoveToLevelRequest
       6  ??zclGeneral_SendLevelControlStepRequest?relay
       6  ??zclGeneral_SendLevelControlStopRequest?relay
       6  ??zclGeneral_SendSceneGetMembershipResponse?rel
       6  ??zclGeneral_SendSceneRequest?relay
       6  ??zclGeneral_SendSceneResponse?relay
       6  ??zclGeneral_SendSceneViewRsp?relay
       4  ?Subroutine0
      29  ?Subroutine1
       3  ?Subroutine10
       4  ?Subroutine11
       6  ?Subroutine12
      22  ?Subroutine13
      15  ?Subroutine14
       8  ?Subroutine15
      15  ?Subroutine16
      22  ?Subroutine17
      17  ?Subroutine18
      17  ?Subroutine19
       3  ?Subroutine2
       7  ?Subroutine20
       9  ?Subroutine21
      12  ?Subroutine22
       6  ?Subroutine23
       9  ?Subroutine24
      11  ?Subroutine25
       8  ?Subroutine26
      13  ?Subroutine27
       4  ?Subroutine28
       4  ?Subroutine29
      12  ?Subroutine3
       8  ?Subroutine30
       5  ?Subroutine31
      12  ?Subroutine32
       6  ?Subroutine33
       6  ?Subroutine34
       3  ?Subroutine35
       8  ?Subroutine36
      18  ?Subroutine37
      15  ?Subroutine38
       4  ?Subroutine39
       7  ?Subroutine4
      17  ?Subroutine40
       7  ?Subroutine41
      10  ?Subroutine42
      14  ?Subroutine43
       4  ?Subroutine44
       4  ?Subroutine45
       1  ?Subroutine46
       1  ?Subroutine47
      10  ?Subroutine48
       8  ?Subroutine49
       2  ?Subroutine5
      15  ?Subroutine50
      12  ?Subroutine51
      11  ?Subroutine52
       1  ?Subroutine53
       6  ?Subroutine54
      10  ?Subroutine55
       1  ?Subroutine56
       9  ?Subroutine57
      26  ?Subroutine58
       4  ?Subroutine59
      17  ?Subroutine6
       4  ?Subroutine60
       4  ?Subroutine61
       9  ?Subroutine62
       1  ?Subroutine63
       5  ?Subroutine64
      17  ?Subroutine65
       6  ?Subroutine66
      15  ?Subroutine67
       7  ?Subroutine68
       7  ?Subroutine69
      16  ?Subroutine7
      12  ?Subroutine70
      19  ?Subroutine71
      16  ?Subroutine72
       6  ?Subroutine73
       9  ?Subroutine74
      11  ?Subroutine75
       5  ?Subroutine8
       5  ?Subroutine9
       2  zclGenCBs
       1  zclGenPluginRegisted
       2  zclGenSceneTable
      11  zclGeneral_AddGroup
      10  zclGeneral_AddScene
      25  zclGeneral_CountAllScenes
      35  zclGeneral_CountScenes
      78  zclGeneral_FindAllScenesForGroup
      83  zclGeneral_FindScene
     260  zclGeneral_HdlInSpecificCommands
      29  zclGeneral_HdlIncoming
     477  zclGeneral_ProcessInGroupsClient
     830  zclGeneral_ProcessInGroupsServer
     264  zclGeneral_ProcessInIdentity
     299  zclGeneral_ProcessInLevelControl
     497  zclGeneral_ProcessInScenesClient
    1650  zclGeneral_ProcessInScenesServer
      60  zclGeneral_ReadSceneCountCB
     142  zclGeneral_RegisterCmdCallbacks
     110  zclGeneral_RemoveAllScenes
     117  zclGeneral_RemoveScene
     218  zclGeneral_ScenesInit
      10  zclGeneral_ScenesSave
     213  zclGeneral_ScenesWriteNV
     220  zclGeneral_SendAddGroupRequest
     288  zclGeneral_SendAddSceneRequest
     250  zclGeneral_SendGroupGetMembershipRequest
     104  zclGeneral_SendGroupRequest
     110  zclGeneral_SendGroupResponse
     277  zclGeneral_SendGroupViewResponse
      86  zclGeneral_SendIdentify
     106  zclGeneral_SendIdentifyEZModeInvoke
      83  zclGeneral_SendIdentifyQueryResponse
     102  zclGeneral_SendIdentifyUpdateCommState
     113  zclGeneral_SendLevelControlMoveRequest
     116  zclGeneral_SendLevelControlMoveToLevelRequest
     134  zclGeneral_SendLevelControlStepRequest
      82  zclGeneral_SendLevelControlStopRequest
     237  zclGeneral_SendSceneGetMembershipResponse
     129  zclGeneral_SendSceneRequest
     141  zclGeneral_SendSceneResponse
     338  zclGeneral_SendSceneViewRsp

 
 9 227 bytes in segment BANKED_CODE
   234 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_Z
 
 9 461 bytes of CODE  memory
     5 bytes of XDATA memory

Errors: none
Warnings: none
