###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                22/Jan/2018  09:11:07
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\Source\zcl_sceneselector.c
#    Command line       =  
#        -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=120000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=120000)
#        -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\Source\zcl_sceneselector.c"
#        -D SCENE_SELECTOR_TOUCHKEY -D xSCENE_SELECTOR -D ISR_KEYINTERRUPT -D
#        OSC32K_CRYSTAL_INSTALLED=FALSE -D xxHAL_PA_LNA -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_SCENES
#        -D ZCL_ON_OFF -D ZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        -lA "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddSceneSelector\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddCommon\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\Source\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Source\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\zcl_sceneselector.lst
#    Object file        =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\zcl_sceneselector.r51
#
###############################################################################

E:\GitHub\√Ê∞ÂZ-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\Source\zcl_sceneselector.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This device will be like an On/Off Switch device. This application
     42            is not intended to be a On/Off Switch device, but will use the device
     43            description to implement this sample code.
     44          
     45            ----------------------------------------
     46            Main:
     47              - SW1: Toggle remote light
     48              - SW2: Invoke EZMode
     49              - SW4: Enable/Disable Permit Join
     50              - SW5: Go to Help screen
     51            ----------------------------------------
     52          *********************************************************************/
     53          
     54          /*********************************************************************
     55           * INCLUDES
     56           */
     57          #include "ZComDef.h"
     58          #include "OSAL.h"
     59          #include "AF.h"
     60          #include "ZDApp.h"
     61          #include "ZDObject.h"
     62          #include "ZDProfile.h"
     63          #include "MT_SYS.h"
     64          
     65          #include "zcl.h"
     66          #include "zcl_general.h"
     67          #include "zcl_ha.h"
     68          #include "zcl_sceneselector.h"
     69          #include "zcl_ezmode.h"
     70          
     71          #include "onboard.h"
     72          
     73          /* HAL */
     74          #include "hal_lcd.h"
     75          #include "hal_led.h"
     76          #include "hal_key.h"
     77          
     78          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     79          #include "zcl_ota.h"
     80          #include "hal_ota.h"
     81          #endif
     82          
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          /*********************************************************************
     89           * CONSTANTS
     90           */
     91          /*********************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          byte zclSceneSelector_TaskID;
   \                     zclSceneSelector_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          uint8 zclSceneSelectorSeqNum;
   \                     zclSceneSelectorSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint8 zclSceneSelector_OnOffSwitchType = ON_OFF_SWITCH_TYPE_TOGGLE;
   \                     zclSceneSelector_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          uint8 zclSceneSelector_OnOffSwitchActions = ON_OFF_SWITCH_ACTIONS_2;   // Toggle -> Toggle
   \                     zclSceneSelector_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSceneSelector_OnOffSwitch`
   \   000001                REQUIRE __INIT_XDATA_I
    105          
    106          /*********************************************************************
    107           * GLOBAL FUNCTIONS
    108           */
    109          
    110          /*********************************************************************
    111           * LOCAL VARIABLES
    112           */
    113          #ifdef ZCL_ON_OFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          afAddrType_t zclSceneSelector_DstAddr;
   \                     zclSceneSelector_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    115          #endif
    116          
    117          #ifdef ZCL_EZMODE
    118          static void zclSceneSelector_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    119          static void zclSceneSelector_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    120          
    121          static const zclEZMode_RegisterData_t zclSceneSelector_RegisterEZModeData =
    122          {
    123            &zclSceneSelector_TaskID,
    124            SCENESELECTOR_EZMODE_NEXTSTATE_EVT,
    125            SCENESELECTOR_EZMODE_TIMEOUT_EVT,
    126            &zclSceneSelectorSeqNum,
    127            zclSceneSelector_EZModeCB
    128          };
    129          
    130          // NOT ZLC_EZMODE, Use EndDeviceBind
    131          #else
    132          
    133          static cId_t bindingOutClusters[] =
    134          {
    135            ZCL_CLUSTER_ID_GEN_ON_OFF
    136          };
    137          #define ZCLSCENESELECTOR_BINDINGLIST   (sizeof(bindingOutClusters)/sizeof(bindingOutClusters[0]))
    138          #endif  // ZLC_EZMODE
    139          
    140          // Endpoint to allow SYS_APP_MSGs
    141          /*static endPointDesc_t sceneSelector_TestEp =
    142          {
    143            SCENESELECTOR_ENDPOINT,                  // endpoint
    144            &zclSceneSelector_TaskID,
    145            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    146            (afNetworkLatencyReq_t)0            // No Network Latency req
    147          };*/
    148          //###########################################################################
    149          //###########################################################################

   \                                 In  segment XDATA_I, align 1, keep-with-next
    150          static endPointDesc_t sceneSelector_TestEp1 =
   \                     sceneSelector_TestEp1:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sceneSelector_TestEp1>`
   \   000006                REQUIRE __INIT_XDATA_I
    151          {
    152            SCENESELECTOR_ENDPOINT1,                  // endpoint
    153            &zclSceneSelector_TaskID,
    154            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    155            (afNetworkLatencyReq_t)0            // No Network Latency req
    156          };
    157          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static endPointDesc_t sceneSelector_TestEp2 =
   \                     sceneSelector_TestEp2:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sceneSelector_TestEp2>`
   \   000006                REQUIRE __INIT_XDATA_I
    159          {
    160            SCENESELECTOR_ENDPOINT2,                  // endpoint
    161            &zclSceneSelector_TaskID,
    162            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    163            (afNetworkLatencyReq_t)0            // No Network Latency req
    164          };
    165          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          static endPointDesc_t sceneSelector_TestEp3 =
   \                     sceneSelector_TestEp3:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sceneSelector_TestEp3>`
   \   000006                REQUIRE __INIT_XDATA_I
    167          {
    168            SCENESELECTOR_ENDPOINT3,                  // endpoint
    169            &zclSceneSelector_TaskID,
    170            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    171            (afNetworkLatencyReq_t)0            // No Network Latency req
    172          };
    173          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    174          static endPointDesc_t sceneSelector_TestEp4 =
   \                     sceneSelector_TestEp4:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sceneSelector_TestEp4>`
   \   000006                REQUIRE __INIT_XDATA_I
    175          {
    176            SCENESELECTOR_ENDPOINT4,                  // endpoint
    177            &zclSceneSelector_TaskID,
    178            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    179            (afNetworkLatencyReq_t)0            // No Network Latency req
    180          };
    181          //###########################################################################
    182          //###########################################################################
    183          
    184          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 giSwScreenMode = SW_MAINMODE;   // display the main screen mode first
   \                     giSwScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    187          static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
   \                     aProcessCmd:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for aProcessCmd>`
   \   000004                REQUIRE __INIT_XDATA_I
    188          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 gPermitDuration = 0;    // permit joining default to disabled
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    191          devStates_t zclSceneSelector_NwkState = DEV_INIT;
   \                     zclSceneSelector_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSceneSelector_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    192          
    193          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    194          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    195          #endif
    196          
    197          /*********************************************************************
    198           * LOCAL FUNCTIONS
    199           */
    200          static void zclSceneSelector_HandleKeys( byte shift, byte keys );
    201          static void zclSceneSelector_BasicResetCB( void );
    202          static void zclSceneSelector_IdentifyCB( zclIdentify_t *pCmd );
    203          static void zclSceneSelector_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp );
    204          static void zclSceneSelector_ProcessIdentifyTimeChange( void );
    205          
    206          // app display functions
    207          void zclSceneSelector_LcdDisplayUpdate(void);
    208          void zclSceneSelector_LcdDisplayMainMode(void);
    209          void zclSceneSelector_LcdDisplayHelpMode(void);
    210          
    211          // Functions to process ZCL Foundation incoming Command/Response messages
    212          static void zclSceneSelector_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    213          #ifdef ZCL_READ
    214          static uint8 zclSceneSelector_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    215          #endif
    216          #ifdef ZCL_WRITE
    217          static uint8 zclSceneSelector_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    218          #endif
    219          static uint8 zclSceneSelector_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    220          #ifdef ZCL_DISCOVER
    221          static uint8 zclSceneSelector_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    222          static uint8 zclSceneSelector_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    223          static uint8 zclSceneSelector_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    224          #endif
    225          
    226          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    227          static void zclSceneSelector_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    228          #endif
    229          
    230          /*********************************************************************
    231           * ZCL General Profile Callback table
    232           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    233          static zclGeneral_AppCallbacks_t zclSceneSelector_CmdCallbacks =
   \                     zclSceneSelector_CmdCallbacks:
   \   000000                DS 36
   \   000024                REQUIRE `?<Initializer for zclSceneSelector_CmdCallback`
   \   000024                REQUIRE __INIT_XDATA_I
    234          {
    235            zclSceneSelector_BasicResetCB,               // Basic Cluster Reset command
    236            zclSceneSelector_IdentifyCB,                 // Identify command
    237          #ifdef ZCL_EZMODE
    238            NULL,                                   // Identify EZ-Mode Invoke command
    239            NULL,                                   // Identify Update Commission State command
    240          #endif
    241            NULL,                                   // Identify Trigger Effect command
    242            zclSceneSelector_IdentifyQueryRspCB,         // Identify Query Response command
    243            NULL,                                   // On/Off cluster commands
    244            NULL,                                   // On/Off cluster enhanced command Off with Effect
    245            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    246            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    247          #ifdef ZCL_LEVEL_CTRL
    248            NULL,                                   // Level Control Move to Level command
    249            NULL,                                   // Level Control Move command
    250            NULL,                                   // Level Control Step command
    251            NULL,                                   // Level Control Stop command
    252          #endif
    253          #ifdef ZCL_GROUPS
    254            NULL,                                   // Group Response commands
    255          #endif
    256          #ifdef ZCL_SCENES
    257            NULL,                                   // Scene Store Request command
    258            NULL,                                   // Scene Recall Request command
    259            NULL,                                   // Scene Response command
    260          #endif
    261          #ifdef ZCL_ALARMS
    262            NULL,                                   // Alarm (Response) commands
    263          #endif
    264          #ifdef SE_UK_EXT
    265            NULL,                                   // Get Event Log command
    266            NULL,                                   // Publish Event Log command
    267          #endif
    268            NULL,                                   // RSSI Location command
    269            NULL                                    // RSSI Location Response command
    270          };
    271          
    272          
    273          /*********************************************************************
    274           * STATUS STRINGS
    275           */
    276          #ifdef LCD_SUPPORTED
    277          const char sDeviceName[]   = "  Sample Switch";
    278          const char sClearLine[]    = " ";
    279          const char sSwLight[]      = "SW1: ToggleLight";
    280          const char sSwEZMode[]     = "SW2: EZ-Mode";
    281          const char sSwHelp[]       = "SW5: Help";
    282          const char sCmdSent[]      = "  COMMAND SENT";
    283          #endif
    284          
    285          /*********************************************************************
    286           * @fn          zclSceneSelector_Init
    287           *
    288           * @brief       Initialization function for the zclGeneral layer.
    289           *
    290           * @param       none
    291           *
    292           * @return      none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void zclSceneSelector_Init( byte task_id )
   \                     zclSceneSelector_Init:
    295          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    296            zclSceneSelector_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   000009   F0           MOVX    @DPTR,A
    297          
    298          #ifdef ZCL_ON_OFF
    299            // Set destination address to indirect
    300            zclSceneSelector_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#zclSceneSelector_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    301            zclSceneSelector_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    302            zclSceneSelector_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#zclSceneSelector_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    303          #endif
    304          
    305            // This app is part of the Home Automation Profile
    306            //zclHA_Init( &zclSceneSelector_SimpleDesc );
    307          //###########################################################################
    308          //###########################################################################
    309            zclHA_Init( &zclSceneSelector_SimpleDesc1 );
   \   000017                ; Setup parameters for call to function zclHA_Init
   \   000017   7A..         MOV     R2,#zclSceneSelector_SimpleDesc1 & 0xff
   \   000019   7B..         MOV     R3,#(zclSceneSelector_SimpleDesc1 >> 8) & 0xff
   \   00001B   12....       LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
    310            zclHA_Init( &zclSceneSelector_SimpleDesc2 );
   \   00001E                ; Setup parameters for call to function zclHA_Init
   \   00001E   7A..         MOV     R2,#zclSceneSelector_SimpleDesc2 & 0xff
   \   000020   7B..         MOV     R3,#(zclSceneSelector_SimpleDesc2 >> 8) & 0xff
   \   000022   12....       LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
    311            zclHA_Init( &zclSceneSelector_SimpleDesc3 );
   \   000025                ; Setup parameters for call to function zclHA_Init
   \   000025   7A..         MOV     R2,#zclSceneSelector_SimpleDesc3 & 0xff
   \   000027   7B..         MOV     R3,#(zclSceneSelector_SimpleDesc3 >> 8) & 0xff
   \   000029   12....       LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
    312            zclHA_Init( &zclSceneSelector_SimpleDesc4 );
   \   00002C                ; Setup parameters for call to function zclHA_Init
   \   00002C   7A..         MOV     R2,#zclSceneSelector_SimpleDesc4 & 0xff
   \   00002E   7B..         MOV     R3,#(zclSceneSelector_SimpleDesc4 >> 8) & 0xff
   \   000030   12....       LCALL   ??zclHA_Init?relay   ; Banked call to: zclHA_Init
    313          //###########################################################################
    314          //###########################################################################
    315          
    316            // Register the ZCL General Cluster Library callback functions
    317            //zclGeneral_RegisterCmdCallbacks( SCENESELECTOR_ENDPOINT, &zclSceneSelector_CmdCallbacks );
    318          //###########################################################################
    319          //###########################################################################
    320            zclGeneral_RegisterCmdCallbacks( SCENESELECTOR_ENDPOINT1, &zclSceneSelector_CmdCallbacks );
   \   000033                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000033   7A..         MOV     R2,#zclSceneSelector_CmdCallbacks & 0xff
   \   000035   7B..         MOV     R3,#(zclSceneSelector_CmdCallbacks >> 8) & 0xff
   \   000037   7901         MOV     R1,#0x1
   \   000039   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay; Banked call to: zclGeneral_RegisterCmdCallbacks
    321            zclGeneral_RegisterCmdCallbacks( SCENESELECTOR_ENDPOINT2, &zclSceneSelector_CmdCallbacks );
   \   00003C                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00003C   7A..         MOV     R2,#zclSceneSelector_CmdCallbacks & 0xff
   \   00003E   7B..         MOV     R3,#(zclSceneSelector_CmdCallbacks >> 8) & 0xff
   \   000040   7902         MOV     R1,#0x2
   \   000042   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay; Banked call to: zclGeneral_RegisterCmdCallbacks
    322            zclGeneral_RegisterCmdCallbacks( SCENESELECTOR_ENDPOINT3, &zclSceneSelector_CmdCallbacks );
   \   000045                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000045   7A..         MOV     R2,#zclSceneSelector_CmdCallbacks & 0xff
   \   000047   7B..         MOV     R3,#(zclSceneSelector_CmdCallbacks >> 8) & 0xff
   \   000049   7903         MOV     R1,#0x3
   \   00004B   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay; Banked call to: zclGeneral_RegisterCmdCallbacks
    323            zclGeneral_RegisterCmdCallbacks( SCENESELECTOR_ENDPOINT4, &zclSceneSelector_CmdCallbacks ); 
   \   00004E                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00004E   7A..         MOV     R2,#zclSceneSelector_CmdCallbacks & 0xff
   \   000050   7B..         MOV     R3,#(zclSceneSelector_CmdCallbacks >> 8) & 0xff
   \   000052   7904         MOV     R1,#0x4
   \   000054   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay; Banked call to: zclGeneral_RegisterCmdCallbacks
    324          //###########################################################################
    325          //###########################################################################
    326          
    327            // Register the application's attribute list
    328            //zcl_registerAttrList( SCENESELECTOR_ENDPOINT, SCENESELECTOR_MAX_ATTRIBUTES, zclSceneSelector_Attrs );
    329          //###########################################################################
    330          //###########################################################################
    331            zcl_registerAttrList( SCENESELECTOR_ENDPOINT1, SCENESELECTOR_MAX_ATTRIBUTES, zclSceneSelector_Attrs );
   \   000057                ; Setup parameters for call to function zcl_registerAttrList
   \   000057   7C..         MOV     R4,#zclSceneSelector_Attrs & 0xff
   \   000059   7D..         MOV     R5,#(zclSceneSelector_Attrs >> 8) & 0xff
   \   00005B   7A0F         MOV     R2,#0xf
   \   00005D   7901         MOV     R1,#0x1
   \   00005F   12....       LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
    332            zcl_registerAttrList( SCENESELECTOR_ENDPOINT2, SCENESELECTOR_MAX_ATTRIBUTES, zclSceneSelector_Attrs );
   \   000062                ; Setup parameters for call to function zcl_registerAttrList
   \   000062   7C..         MOV     R4,#zclSceneSelector_Attrs & 0xff
   \   000064   7D..         MOV     R5,#(zclSceneSelector_Attrs >> 8) & 0xff
   \   000066   7A0F         MOV     R2,#0xf
   \   000068   7902         MOV     R1,#0x2
   \   00006A   12....       LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
    333            zcl_registerAttrList( SCENESELECTOR_ENDPOINT3, SCENESELECTOR_MAX_ATTRIBUTES, zclSceneSelector_Attrs );
   \   00006D                ; Setup parameters for call to function zcl_registerAttrList
   \   00006D   7C..         MOV     R4,#zclSceneSelector_Attrs & 0xff
   \   00006F   7D..         MOV     R5,#(zclSceneSelector_Attrs >> 8) & 0xff
   \   000071   7A0F         MOV     R2,#0xf
   \   000073   7903         MOV     R1,#0x3
   \   000075   12....       LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
    334            zcl_registerAttrList( SCENESELECTOR_ENDPOINT4, SCENESELECTOR_MAX_ATTRIBUTES, zclSceneSelector_Attrs );   
   \   000078                ; Setup parameters for call to function zcl_registerAttrList
   \   000078   7C..         MOV     R4,#zclSceneSelector_Attrs & 0xff
   \   00007A   7D..         MOV     R5,#(zclSceneSelector_Attrs >> 8) & 0xff
   \   00007C   7A0F         MOV     R2,#0xf
   \   00007E   7904         MOV     R1,#0x4
   \   000080   12....       LCALL   ??zcl_registerAttrList?relay; Banked call to: zcl_registerAttrList
    335          //###########################################################################
    336          //###########################################################################
    337          
    338            // Register the Application to receive the unprocessed Foundation command/response messages
    339            zcl_registerForMsg( zclSceneSelector_TaskID );
   \   000083                ; Setup parameters for call to function zcl_registerForMsg
   \   000083   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??zcl_registerForMsg?relay; Banked call to: zcl_registerForMsg
    340          
    341          #ifdef ZCL_EZMODE
    342            // Register EZ-Mode
    343            zcl_RegisterEZMode( &zclSceneSelector_RegisterEZModeData );
    344          
    345            // Register with the ZDO to receive Match Descriptor Responses
    346            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
    347          #endif
    348          
    349            // Register for all key events - This app will handle all key events
    350            RegisterForKeys( zclSceneSelector_TaskID );
   \   00008B                ; Setup parameters for call to function RegisterForKeys
   \   00008B   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    351          
    352            // Register for a test endpoint
    353            //afRegister( &sceneSelector_TestEp );
    354          //###########################################################################
    355          //###########################################################################
    356            afRegister( &sceneSelector_TestEp1 );
   \   000093                ; Setup parameters for call to function afRegister
   \   000093   7A..         MOV     R2,#sceneSelector_TestEp1 & 0xff
   \   000095   7B..         MOV     R3,#(sceneSelector_TestEp1 >> 8) & 0xff
   \   000097   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    357            afRegister( &sceneSelector_TestEp2 );
   \   00009A                ; Setup parameters for call to function afRegister
   \   00009A   7A..         MOV     R2,#sceneSelector_TestEp2 & 0xff
   \   00009C   7B..         MOV     R3,#(sceneSelector_TestEp2 >> 8) & 0xff
   \   00009E   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    358            afRegister( &sceneSelector_TestEp3 );
   \   0000A1                ; Setup parameters for call to function afRegister
   \   0000A1   7A..         MOV     R2,#sceneSelector_TestEp3 & 0xff
   \   0000A3   7B..         MOV     R3,#(sceneSelector_TestEp3 >> 8) & 0xff
   \   0000A5   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    359            afRegister( &sceneSelector_TestEp4 ); 
   \   0000A8                ; Setup parameters for call to function afRegister
   \   0000A8   7A..         MOV     R2,#sceneSelector_TestEp4 & 0xff
   \   0000AA   7B..         MOV     R3,#(sceneSelector_TestEp4 >> 8) & 0xff
   \   0000AC   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    360          //###########################################################################
    361          //###########################################################################
    362          
    363            ZDO_RegisterForZDOMsg( zclSceneSelector_TaskID, End_Device_Bind_rsp );
   \   0000AF                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000AF   7A20         MOV     R2,#0x20
   \   0000B1   7B80         MOV     R3,#-0x80
   \   0000B3   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    364            ZDO_RegisterForZDOMsg( zclSceneSelector_TaskID, Match_Desc_rsp );
   \   0000BB                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000BB   7A06         MOV     R2,#0x6
   \   0000BD   7B80         MOV     R3,#-0x80
   \   0000BF   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    365          
    366          #ifdef LCD_SUPPORTED
    367            HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
    368          #endif
    369          
    370          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    371            // Register for callback events from the ZCL OTA
    372            zclOTA_Register(zclSceneSelector_TaskID);
    373          #endif
    374          
    375          //###################################################################
    376          //###################################################################
    377          	addSceneSelector_init();
   \   0000C7                ; Setup parameters for call to function addSceneSelector_init
   \   0000C7   12....       LCALL   ??addSceneSelector_init?relay; Banked call to: addSceneSelector_init
    378          //###################################################################
    379          //###################################################################
    380          
    381          }
   \   0000CA   7F01         MOV     R7,#0x1
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
    382          
    383          /*********************************************************************
    384           * @fn          zclSample_event_loop
    385           *
    386           * @brief       Event Loop Processor for zclGeneral.
    387           *
    388           * @param       none
    389           *
    390           * @return      none
    391           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          uint16 zclSceneSelector_event_loop( uint8 task_id, uint16 events )
   \                     zclSceneSelector_event_loop:
    393          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    394            afIncomingMSGPacket_t *MSGpkt;
    395            (void)task_id;  // Intentionally unreferenced parameter
    396          
    397            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7044         JNZ     ??zclSceneSelector_event_loop_0
    398            {
    399              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSceneSelector_TaskID )) )
    400              {
    401                switch ( MSGpkt->hdr.event )
    402                {
    403          #ifdef ZCL_EZMODE
    404                  case ZDO_CB_MSG:
    405                    zclSceneSelector_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    406                    break;
    407          #endif
    408                  case ZCL_INCOMING_MSG:
    409                    // Incoming ZCL Foundation command/response messages
    410                    zclSceneSelector_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    411                    break;
    412          
    413                  case KEY_CHANGE:
    414                    zclSceneSelector_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    415                    break;
    416          
    417                  case ZDO_STATE_CHANGE:
    418                    zclSceneSelector_NwkState = (devStates_t)(MSGpkt->hdr.status);
    419          
    420          //###################################################################
    421          //###################################################################
    422          	addCommon_networkState_led(zclSceneSelector_NwkState);
    423          //###################################################################
    424          //###################################################################
    425          
    426                    // now on the network
    427                    if ( (zclSceneSelector_NwkState == DEV_ZB_COORD) ||
    428                         (zclSceneSelector_NwkState == DEV_ROUTER)   ||
    429                         (zclSceneSelector_NwkState == DEV_END_DEVICE) )
    430                    {
    431          #ifndef HOLD_AUTO_START
    432                      giSwScreenMode = SW_MAINMODE;
    433                      zclSceneSelector_LcdDisplayUpdate();
    434          #endif
    435          #ifdef ZCL_EZMODE
    436                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    437          #endif
    438                    }
    439                    break;
    440          
    441          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    442                  case ZCL_OTA_CALLBACK_IND:
    443                    zclSceneSelector_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    444                    break;
    445          #endif
    446          
    447                  default:
    448                    break;
    449                }
    450          
    451                // Release the memory
    452                osal_msg_deallocate( (uint8 *)MSGpkt );
    453              }
    454          
    455              // return unprocessed events
    456              return (events ^ SYS_EVENT_MSG);
    457            }
    458          
    459            if ( events & SCENESELECTOR_IDENTIFY_TIMEOUT_EVT )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   4003         JC      $+5
   \   000012   02....       LJMP    ??zclSceneSelector_event_loop_1 & 0xFFFF
    460            {
    461              zclSceneSelector_IdentifyTime = 10;
   \   000015   90....       MOV     DPTR,#zclSceneSelector_IdentifyTime
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
    462              zclSceneSelector_ProcessIdentifyTimeChange();
   \   00001E                ; Setup parameters for call to function zclSceneSelector_ProcessIdentifyTimeChange
   \   00001E   12....       LCALL   ??zclSceneSelector_ProcessIdentifyTimeChange?re; Banked call to: zclSceneSelector_ProcessIdentifyTimeChange
    463          
    464              return ( events ^ SCENESELECTOR_IDENTIFY_TIMEOUT_EVT );
   \   000021   EE           MOV     A,R6
   \   000022   6401         XRL     A,#0x1
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   02....       LJMP    ??zclSceneSelector_event_loop_2 & 0xFFFF
    465            }
   \                     ??zclSceneSelector_event_loop_3:
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   90....       MOV     DPTR,#zclSceneSelector_NwkState
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F                ; Setup parameters for call to function addCommon_networkState_led
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??addCommon_networkState_led?relay; Banked call to: addCommon_networkState_led
   \   000033   90....       MOV     DPTR,#zclSceneSelector_NwkState
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6409         XRL     A,#0x9
   \   000039   600A         JZ      ??zclSceneSelector_event_loop_4
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6407         XRL     A,#0x7
   \   00003E   6005         JZ      ??zclSceneSelector_event_loop_4
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6406         XRL     A,#0x6
   \   000043   7005         JNZ     ??zclSceneSelector_event_loop_5
   \                     ??zclSceneSelector_event_loop_4:
   \   000045   90....       MOV     DPTR,#giSwScreenMode
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
   \                     ??zclSceneSelector_event_loop_5:
   \   00004A                ; Setup parameters for call to function osal_msg_deallocate
   \   00004A   AA..         MOV     R2,?V0
   \   00004C   AB..         MOV     R3,?V1
   \   00004E   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \                     ??zclSceneSelector_event_loop_0:
   \   000051                ; Setup parameters for call to function osal_msg_receive
   \   000051   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   000059   8A..         MOV     ?V0,R2
   \   00005B   8B..         MOV     ?V1,R3
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V1
   \   000060   6056         JZ      ??zclSceneSelector_event_loop_6
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E0           MOVX    A,@DPTR
   \   000067   24CC         ADD     A,#-0x34
   \   000069   6006         JZ      ??zclSceneSelector_event_loop_7
   \   00006B   2463         ADD     A,#0x63
   \   00006D   60BA         JZ      ??zclSceneSelector_event_loop_3
   \   00006F   80D9         SJMP    ??zclSceneSelector_event_loop_5
   \                     ??zclSceneSelector_event_loop_7:
   \   000071   EA           MOV     A,R2
   \   000072   2417         ADD     A,#0x17
   \   000074   F8           MOV     R0,A
   \   000075   E4           CLR     A
   \   000076   35..         ADDC    A,?V1
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   FA           MOV     R2,A
   \   00007B   E9           MOV     A,R1
   \   00007C   FB           MOV     R3,A
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   14           DEC     A
   \   000086   6011         JZ      ??zclSceneSelector_event_loop_8
   \   000088   24FD         ADD     A,#-0x3
   \   00008A   701A         JNZ     ??zclSceneSelector_event_loop_9
   \   00008C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   E8           MOV     A,R0
   \   000092   C3           CLR     C
   \   000093   99           SUBB    A,R1
   \   000094   5010         JNC     ??zclSceneSelector_event_loop_9
   \   000096   08           INC     R0
   \   000097   80F6         SJMP    ??CrossCallReturnLabel_0
   \                     ??zclSceneSelector_event_loop_8:
   \   000099   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009C   8001         SJMP    ??zclSceneSelector_event_loop_10
   \                     ??zclSceneSelector_event_loop_11:
   \   00009E   08           INC     R0
   \                     ??zclSceneSelector_event_loop_10:
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   E8           MOV     A,R0
   \   0000A2   C3           CLR     C
   \   0000A3   99           SUBB    A,R1
   \   0000A4   40F8         JC      ??zclSceneSelector_event_loop_11
   \                     ??zclSceneSelector_event_loop_9:
   \   0000A6   8A82         MOV     DPL,R2
   \   0000A8   8B83         MOV     DPH,R3
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FA           MOV     R2,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   FB           MOV     R3,A
   \   0000AF   EA           MOV     A,R2
   \   0000B0   4B           ORL     A,R3
   \   0000B1   6097         JZ      ??zclSceneSelector_event_loop_5
   \   0000B3                ; Setup parameters for call to function osal_mem_free
   \   0000B3   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000B6   8092         SJMP    ??zclSceneSelector_event_loop_5
   \                     ??zclSceneSelector_event_loop_6:
   \   0000B8   EE           MOV     A,R6
   \   0000B9   FA           MOV     R2,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   6480         XRL     A,#0x80
   \                     ??zclSceneSelector_event_loop_2:
   \   0000BD   FB           MOV     R3,A
   \   0000BE   8012         SJMP    ??zclSceneSelector_event_loop_12
    466          
    467            if ( events & SCENESELECTOR_MAIN_SCREEN_EVT )
   \                     ??zclSceneSelector_event_loop_1:
   \   0000C0   5410         ANL     A,#0x10
   \   0000C2   600B         JZ      ??zclSceneSelector_event_loop_13
    468            {
    469              giSwScreenMode = SW_MAINMODE;
   \   0000C4   90....       MOV     DPTR,#giSwScreenMode
   \   0000C7   E4           CLR     A
   \   0000C8   F0           MOVX    @DPTR,A
    470          
    471              zclSceneSelector_LcdDisplayUpdate();
    472          
    473          #ifdef LCD_SUPPORTED
    474              HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
    475          #endif
    476              return ( events ^ SCENESELECTOR_MAIN_SCREEN_EVT );
   \   0000C9   EE           MOV     A,R6
   \   0000CA   6410         XRL     A,#0x10
   \   0000CC   FA           MOV     R2,A
   \   0000CD   8003         SJMP    ??zclSceneSelector_event_loop_12
    477            }
    478          
    479          #ifdef ZCL_EZMODE
    480            if ( events & SCENESELECTOR_EZMODE_NEXTSTATE_EVT )
    481            {
    482              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
    483              return ( events ^ SCENESELECTOR_EZMODE_NEXTSTATE_EVT );
    484            }
    485          
    486            if ( events & SCENESELECTOR_EZMODE_TIMEOUT_EVT )
    487            {
    488              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
    489              return ( events ^ SCENESELECTOR_EZMODE_TIMEOUT_EVT );
    490            }
    491          
    492          #endif // ZLC_EZMODE
    493          
    494          //###################################################################
    495          //###################################################################
    496          	return addSceneSelector_eventLoop(task_id, events);
   \                     ??zclSceneSelector_event_loop_13:
   \   0000CF                ; Setup parameters for call to function addSceneSelector_eventLoop
   \   0000CF   12....       LCALL   ??addSceneSelector_eventLoop?relay; Banked call to: addSceneSelector_eventLoop
   \                     ??zclSceneSelector_event_loop_12:
   \   0000D2   7F06         MOV     R7,#0x6
   \   0000D4   02....       LJMP    ?BANKED_LEAVE_XDATA
    497          //###################################################################
    498          //###################################################################
    499          
    500            // Discard unknown events
    501            return 0;
                   ^
Warning[Pe111]: statement is unreachable

  static cId_t bindingOutClusters[] =
               ^
"E:\GitHub\√Ê∞ÂZ-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\Source\zcl_sceneselector.c",133  Warning[Pe177]: 
          variable "bindingOutClusters" was declared but never referenced
    502          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET
    503          
    504          /*********************************************************************
    505           * @fn      zclSceneSelector_HandleKeys
    506           *
    507           * @brief   Handles all key events for this device.
    508           *
    509           * @param   shift - true if in shift/alt.
    510           * @param   keys - bit field for key events. Valid entries:
    511           *                 HAL_KEY_SW_5
    512           *                 HAL_KEY_SW_4
    513           *                 HAL_KEY_SW_2
    514           *                 HAL_KEY_SW_1
    515           *
    516           * @return  none
    517           */
    518          static void zclSceneSelector_HandleKeys( byte shift, byte keys )
    519          {
    520          //#####################################################################
    521          //#####################################################################
    522          /*
    523            // toggle remote light
    524            if ( keys & HAL_KEY_SW_1 )
    525            {
    526              giSwScreenMode = SW_MAINMODE;   // remove help screen if there
    527          
    528              // Using this as the "Light Switch"
    529          #ifdef ZCL_ON_OFF
    530              zclGeneral_SendOnOff_CmdToggle( SCENESELECTOR_ENDPOINT, &zclSceneSelector_DstAddr, FALSE, 0 );
    531          #endif
    532          #ifdef LCD_SUPPORTED
    533              HalLcdWriteString( (char *)sCmdSent, HAL_LCD_LINE_2 );
    534          
    535              // clear message on screen after 3 seconds
    536              osal_start_timerEx( zclSceneSelector_TaskID, SCENESELECTOR_MAIN_SCREEN_EVT, 3000 );
    537          #endif
    538            }
    539          
    540            // invoke EZ-Mode
    541            if ( keys & HAL_KEY_SW_2 )
    542            {
    543              giSwScreenMode = SW_MAINMODE;   // remove help screen if there
    544          
    545          #ifdef ZCL_EZMODE
    546              {
    547                zclEZMode_InvokeData_t ezModeData;
    548                static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_GEN_ON_OFF };   // only bind on the on/off cluster
    549          
    550                // Invoke EZ-Mode
    551                ezModeData.endpoint = SCENESELECTOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
    552                if ( (zclSceneSelector_NwkState == DEV_ZB_COORD) ||
    553                         (zclSceneSelector_NwkState == DEV_ROUTER)   ||
    554                         (zclSceneSelector_NwkState == DEV_END_DEVICE) )
    555                {
    556                  ezModeData.onNetwork = TRUE;      // node is already on the network
    557                }
    558                else
    559                {
    560                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
    561                }
    562                ezModeData.initiator = TRUE;        // OnOffSwitch is an initiator
    563                ezModeData.numActiveOutClusters = 1;   // active output cluster
    564                ezModeData.pActiveOutClusterIDs = clusterIDs;
    565                ezModeData.numActiveInClusters = 0;  // no active input clusters
    566                ezModeData.pActiveInClusterIDs = NULL;
    567                zcl_InvokeEZMode( &ezModeData );
    568          
    569           #ifdef LCD_SUPPORTED
    570                HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
    571           #endif
    572              }
    573          
    574          #else // NOT ZCL_EZMODE
    575              // bind to remote light
    576              zAddrType_t dstAddr;
    577              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    578          
    579              // Initiate an End Device Bind Request, this bind request will
    580              // only use a cluster list that is important to binding.
    581              dstAddr.addrMode = afAddr16Bit;
    582              dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    583              ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    584                                     SCENESELECTOR_ENDPOINT,
    585                                     ZCL_HA_PROFILE_ID,
    586                                     0, NULL,   // No incoming clusters to bind
    587                                     ZCLSCENESELECTOR_BINDINGLIST, bindingOutClusters,
    588                                     TRUE );
    589          #endif // ZCL_EZMODE
    590            }
    591          
    592            // toggle permit join
    593            if ( keys & HAL_KEY_SW_4 )
    594            {
    595              giSwScreenMode = SW_MAINMODE;   // remove help screen if there
    596          
    597              if ( ( zclSceneSelector_NwkState == DEV_ZB_COORD ) ||
    598                   ( zclSceneSelector_NwkState == DEV_ROUTER ) )
    599              {
    600                zAddrType_t tmpAddr;
    601          
    602                tmpAddr.addrMode = Addr16Bit;
    603                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
    604          
    605                // toggle permit join
    606                gPermitDuration = gPermitDuration ? 0 : 0xff;
    607          
    608                // Trust Center significance is always true
    609                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
    610              }
    611            }
    612          
    613            if ( shift && ( keys & HAL_KEY_SW_5 ) )
    614            {
    615              zclSceneSelector_BasicResetCB();
    616            }
    617            else if ( keys & HAL_KEY_SW_5 )
    618            {
    619              giSwScreenMode = giSwScreenMode ? SW_MAINMODE : SW_HELPMODE;
    620          #ifdef LCD_SUPPORTED
    621              HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
    622          #endif
    623            }
    624          
    625            // update the display
    626            zclSceneSelector_LcdDisplayUpdate();
    627          */
    628          //#####################################################################
    629          //#####################################################################
    630          }
    631          
    632          /*********************************************************************
    633           * @fn      zclSceneSelector_LcdDisplayUpdate
    634           *
    635           * @brief   Called to update the LCD display.
    636           *
    637           * @param   none
    638           *
    639           * @return  none
    640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void zclSceneSelector_LcdDisplayUpdate(void)
   \                     zclSceneSelector_LcdDisplayUpdate:
    642          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    643          //#####################################################################
    644          //#####################################################################
    645          /*
    646            if ( giSwScreenMode == SW_HELPMODE )
    647            {
    648              zclSceneSelector_LcdDisplayHelpMode();
    649            }
    650            else
    651            {
    652              zclSceneSelector_LcdDisplayMainMode();
    653            }
    654          */
    655          //#####################################################################
    656          //#####################################################################
    657          }
   \   000000   02....       LJMP    ?BRET
    658          
    659          /*********************************************************************
    660           * @fn      zclSceneSelector_LcdDisplayMainMode
    661           *
    662           * @brief   Called to display the main screen on the LCD.
    663           *
    664           * @param   none
    665           *
    666           * @return  none
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          void zclSceneSelector_LcdDisplayMainMode(void)
   \                     zclSceneSelector_LcdDisplayMainMode:
    669          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    670          //#####################################################################
    671          //#####################################################################
    672          /*
    673            if ( zclSceneSelector_NwkState == DEV_ZB_COORD )
    674            {
    675              zclHA_LcdStatusLine1(0);
    676            }
    677            else if ( zclSceneSelector_NwkState == DEV_ROUTER )
    678            {
    679              zclHA_LcdStatusLine1(1);
    680            }
    681            else if ( zclSceneSelector_NwkState == DEV_END_DEVICE )
    682            {
    683              zclHA_LcdStatusLine1(2);
    684            }
    685          
    686          #ifdef LCD_SUPPORTED
    687            if ( ( zclSceneSelector_NwkState == DEV_ZB_COORD ) ||
    688                 ( zclSceneSelector_NwkState == DEV_ROUTER ) )
    689            {
    690              // display help key with permit join status
    691              if ( gPermitDuration )
    692              {
    693                HalLcdWriteString("SW5: Help      *", HAL_LCD_LINE_3);
    694              }
    695              else
    696              {
    697                HalLcdWriteString("SW5: Help       ", HAL_LCD_LINE_3);
    698              }
    699            }
    700            else
    701            {
    702              // display help key
    703              HalLcdWriteString((char *)sSwHelp, HAL_LCD_LINE_3);
    704            }
    705          #endif
    706          */
    707          //#####################################################################
    708          //#####################################################################
    709          }
   \   000000   02....       LJMP    ?BRET
    710          
    711          /*********************************************************************
    712           * @fn      zclSceneSelector_LcdDisplayHelpMode
    713           *
    714           * @brief   Called to display the SW options on the LCD.
    715           *
    716           * @param   none
    717           *
    718           * @return  none
    719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void zclSceneSelector_LcdDisplayHelpMode(void)
   \                     zclSceneSelector_LcdDisplayHelpMode:
    721          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    722          //#####################################################################
    723          //#####################################################################
    724          /*
    725          #ifdef LCD_SUPPORTED
    726            HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
    727            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
    728            HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
    729          #endif
    730          */
    731          //#####################################################################
    732          //#####################################################################
    733          }
   \   000000   02....       LJMP    ?BRET
    734          
    735          /*********************************************************************
    736           * @fn      zclSceneSelector_ProcessIdentifyTimeChange
    737           *
    738           * @brief   Called to process any change to the IdentifyTime attribute.
    739           *
    740           * @param   none
    741           *
    742           * @return  none
    743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          static void zclSceneSelector_ProcessIdentifyTimeChange( void )
   \                     zclSceneSelector_ProcessIdentifyTimeChange:
    745          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    746            if ( zclSceneSelector_IdentifyTime > 0 )
   \   000004   90....       MOV     DPTR,#zclSceneSelector_IdentifyTime
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6026         JZ      ??zclSceneSelector_ProcessIdentifyTimeChange_0
    747            {
    748              osal_start_timerEx( zclSceneSelector_TaskID, SCENESELECTOR_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   000010                ; Setup parameters for call to function osal_start_timerEx
   \   000010   90....       MOV     DPTR,#__Constant_3e8
   \   000013   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000016   7A01         MOV     R2,#0x1
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
    749              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000027                ; Setup parameters for call to function HalLedBlink
   \   000027   7CE8         MOV     R4,#-0x18
   \   000029   7D03         MOV     R5,#0x3
   \   00002B   7B05         MOV     R3,#0x5
   \   00002D   7AFF         MOV     R2,#-0x1
   \   00002F   7908         MOV     R1,#0x8
   \   000031   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
   \   000034   801D         SJMP    ??zclSceneSelector_ProcessIdentifyTimeChange_1
    750            }
    751            else
    752            {
    753              if ( zclSceneSelector_OnOff )
   \                     ??zclSceneSelector_ProcessIdentifyTimeChange_0:
   \   000036   90....       MOV     DPTR,#zclSceneSelector_OnOff
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6004         JZ      ??zclSceneSelector_ProcessIdentifyTimeChange_2
    754                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   8002         SJMP    ??zclSceneSelector_ProcessIdentifyTimeChange_3
    755              else
    756                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSceneSelector_ProcessIdentifyTimeChange_2:
   \   000040                ; Setup parameters for call to function HalLedSet
   \   000040   7A00         MOV     R2,#0x0
   \                     ??zclSceneSelector_ProcessIdentifyTimeChange_3:
   \   000042   7908         MOV     R1,#0x8
   \   000044   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
    757              osal_stop_timerEx( zclSceneSelector_TaskID, SCENESELECTOR_IDENTIFY_TIMEOUT_EVT );
   \   000047                ; Setup parameters for call to function osal_stop_timerEx
   \   000047   7A01         MOV     R2,#0x1
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#zclSceneSelector_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
    758            }
    759          }
   \                     ??zclSceneSelector_ProcessIdentifyTimeChange_1:
   \   000053                REQUIRE ?Subroutine0
   \   000053                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    760          
    761          /*********************************************************************
    762           * @fn      zclSceneSelector_BasicResetCB
    763           *
    764           * @brief   Callback from the ZCL General Cluster Library
    765           *          to set all the Basic Cluster attributes to  default values.
    766           *
    767           * @param   none
    768           *
    769           * @return  none
    770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          static void zclSceneSelector_BasicResetCB( void )
   \                     zclSceneSelector_BasicResetCB:
    772          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    773            // Put device back to factory default settings
    774            zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
   \   000004                ; Setup parameters for call to function zgWriteStartupOptions
   \   000004   7A03         MOV     R2,#0x3
   \   000006   79FF         MOV     R1,#-0x1
   \   000008   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
    775          
    776            // restart device
    777            MT_SysCommandProcessing( aProcessCmd );
   \   00000B                ; Setup parameters for call to function MT_SysCommandProcessing
   \   00000B   7A..         MOV     R2,#aProcessCmd & 0xff
   \   00000D   7B..         MOV     R3,#(aProcessCmd >> 8) & 0xff
   \   00000F   12....       LCALL   ??MT_SysCommandProcessing?relay; Banked call to: MT_SysCommandProcessing
    778          }
   \   000012   80..         SJMP    ?Subroutine0
    779          
    780          /*********************************************************************
    781           * @fn      zclSceneSelector_IdentifyCB
    782           *
    783           * @brief   Callback from the ZCL General Cluster Library when
    784           *          it received an Identity Command for this application.
    785           *
    786           * @param   srcAddr - source address and endpoint of the response message
    787           * @param   identifyTime - the number of seconds to identify yourself
    788           *
    789           * @return  none
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          static void zclSceneSelector_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSceneSelector_IdentifyCB:
    792          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    793            zclSceneSelector_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#zclSceneSelector_IdentifyTime
   \   000012   E8           MOV     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E9           MOV     A,R1
   \   000016   F0           MOVX    @DPTR,A
    794            zclSceneSelector_ProcessIdentifyTimeChange();
   \   000017                ; Setup parameters for call to function zclSceneSelector_ProcessIdentifyTimeChange
   \   000017   12....       LCALL   ??zclSceneSelector_ProcessIdentifyTimeChange?re; Banked call to: zclSceneSelector_ProcessIdentifyTimeChange
    795          }
   \   00001A   80..         SJMP    ?Subroutine0
    796          
    797          /*********************************************************************
    798           * @fn      zclSceneSelector_IdentifyQueryRspCB
    799           *
    800           * @brief   Callback from the ZCL General Cluster Library when
    801           *          it received an Identity Query Response Command for this application.
    802           *
    803           * @param   srcAddr - source address
    804           * @param   timeout - number of seconds to identify yourself (valid for query response)
    805           *
    806           * @return  none
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          static void zclSceneSelector_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSceneSelector_IdentifyQueryRspCB:
    809          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    810            (void)pRsp;
    811          #ifdef ZCL_EZMODE
    812            {
    813              zclEZMode_ActionData_t data;
    814              data.pIdentifyQueryRsp = pRsp;
    815              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
    816            }
    817          #endif
    818          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSceneSelector_OnOffSwitch`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sceneSelector_TestEp1>`:
   \   000000   01           DB 1
   \   000001   ....         DW zclSceneSelector_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sceneSelector_TestEp2>`:
   \   000000   02           DB 2
   \   000001   ....         DW zclSceneSelector_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sceneSelector_TestEp3>`:
   \   000000   03           DB 3
   \   000001   ....         DW zclSceneSelector_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sceneSelector_TestEp4>`:
   \   000000   04           DB 4
   \   000001   ....         DW zclSceneSelector_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for aProcessCmd>`:
   \   000000   01           DB 1
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSceneSelector_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSceneSelector_CmdCallback`:
   \   000000   ....         DW ??zclSceneSelector_BasicResetCB?relay
   \   000002   ....         DW ??zclSceneSelector_IdentifyCB?relay
   \   000004   0000         DW 0H
   \   000006   ....         DW ??zclSceneSelector_IdentifyQueryRspCB?relay
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_LcdDisplayUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_LcdDisplayMainMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_LcdDisplayMainMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_LcdDisplayHelpMode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_LcdDisplayHelpMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_ProcessIdentifyTimeChange?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSceneSelector_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSceneSelector_IdentifyQueryRspCB
    819          
    820          /******************************************************************************
    821           *
    822           *  Functions for processing ZCL Foundation incoming Command/Response messages
    823           *
    824           *****************************************************************************/
    825          
    826          /*********************************************************************
    827           * @fn      zclSceneSelector_ProcessIncomingMsg
    828           *
    829           * @brief   Process ZCL Foundation incoming message
    830           *
    831           * @param   pInMsg - pointer to the received message
    832           *
    833           * @return  none
    834           */
    835          static void zclSceneSelector_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    836          {
    837            switch ( pInMsg->zclHdr.commandID )
    838            {
    839          #ifdef ZCL_READ
    840              case ZCL_CMD_READ_RSP:
    841                zclSceneSelector_ProcessInReadRspCmd( pInMsg );
    842                break;
    843          #endif
    844          #ifdef ZCL_WRITE
    845              case ZCL_CMD_WRITE_RSP:
    846                zclSceneSelector_ProcessInWriteRspCmd( pInMsg );
    847                break;
    848          #endif
    849          #ifdef ZCL_REPORT
    850              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    851              case ZCL_CMD_CONFIG_REPORT:
    852                //zclSceneSelector_ProcessInConfigReportCmd( pInMsg );
    853                break;
    854          
    855              case ZCL_CMD_CONFIG_REPORT_RSP:
    856                //zclSceneSelector_ProcessInConfigReportRspCmd( pInMsg );
    857                break;
    858          
    859              case ZCL_CMD_READ_REPORT_CFG:
    860                //zclSceneSelector_ProcessInReadReportCfgCmd( pInMsg );
    861                break;
    862          
    863              case ZCL_CMD_READ_REPORT_CFG_RSP:
    864                //zclSceneSelector_ProcessInReadReportCfgRspCmd( pInMsg );
    865                break;
    866          
    867              case ZCL_CMD_REPORT:
    868                //zclSceneSelector_ProcessInReportCmd( pInMsg );
    869                break;
    870          #endif
    871              case ZCL_CMD_DEFAULT_RSP:
    872                zclSceneSelector_ProcessInDefaultRspCmd( pInMsg );
    873                break;
    874          #ifdef ZCL_DISCOVER
    875              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    876                zclSceneSelector_ProcessInDiscCmdsRspCmd( pInMsg );
    877                break;
    878          
    879              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    880                zclSceneSelector_ProcessInDiscCmdsRspCmd( pInMsg );
    881                break;
    882          
    883              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    884                zclSceneSelector_ProcessInDiscAttrsRspCmd( pInMsg );
    885                break;
    886          
    887              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    888                zclSceneSelector_ProcessInDiscAttrsExtRspCmd( pInMsg );
    889                break;
    890          #endif
    891              default:
    892                break;
    893            }
    894          
    895            if ( pInMsg->attrCmd )
    896              osal_mem_free( pInMsg->attrCmd );
    897          }
    898          
    899          #ifdef ZCL_READ
    900          /*********************************************************************
    901           * @fn      zclSceneSelector_ProcessInReadRspCmd
    902           *
    903           * @brief   Process the "Profile" Read Response Command
    904           *
    905           * @param   pInMsg - incoming message to process
    906           *
    907           * @return  none
    908           */
    909          static uint8 zclSceneSelector_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    910          {
    911            zclReadRspCmd_t *readRspCmd;
    912            uint8 i;
    913          
    914            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    915            for (i = 0; i < readRspCmd->numAttr; i++)
    916            {
    917              // Notify the originator of the results of the original read attributes
    918              // attempt and, for each successfull request, the value of the requested
    919              // attribute
    920            }
    921          
    922            return TRUE;
    923          }
    924          #endif // ZCL_READ
    925          
    926          #ifdef ZCL_WRITE
    927          /*********************************************************************
    928           * @fn      zclSceneSelector_ProcessInWriteRspCmd
    929           *
    930           * @brief   Process the "Profile" Write Response Command
    931           *
    932           * @param   pInMsg - incoming message to process
    933           *
    934           * @return  none
    935           */
    936          static uint8 zclSceneSelector_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    937          {
    938            zclWriteRspCmd_t *writeRspCmd;
    939            uint8 i;
    940          
    941            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    942            for (i = 0; i < writeRspCmd->numAttr; i++)
    943            {
    944              // Notify the device of the results of the its original write attributes
    945              // command.
    946            }
    947          
    948            return TRUE;
    949          }
    950          #endif // ZCL_WRITE
    951          
    952          /*********************************************************************
    953           * @fn      zclSceneSelector_ProcessInDefaultRspCmd
    954           *
    955           * @brief   Process the "Profile" Default Response Command
    956           *
    957           * @param   pInMsg - incoming message to process
    958           *
    959           * @return  none
    960           */
    961          static uint8 zclSceneSelector_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    962          {
    963            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    964            // Device is notified of the Default Response command.
    965            (void)pInMsg;
    966            return TRUE;
    967          }
    968          
    969          #ifdef ZCL_DISCOVER
    970          /*********************************************************************
    971           * @fn      zclSceneSelector_ProcessInDiscCmdsRspCmd
    972           *
    973           * @brief   Process the Discover Commands Response Command
    974           *
    975           * @param   pInMsg - incoming message to process
    976           *
    977           * @return  none
    978           */
    979          static uint8 zclSceneSelector_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
    980          {
    981            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    982            uint8 i;
    983          
    984            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
    985            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
    986            {
    987              // Device is notified of the result of its attribute discovery command.
    988            }
    989          
    990            return TRUE;
    991          }
    992          
    993          /*********************************************************************
    994           * @fn      zclSceneSelector_ProcessInDiscAttrsRspCmd
    995           *
    996           * @brief   Process the "Profile" Discover Attributes Response Command
    997           *
    998           * @param   pInMsg - incoming message to process
    999           *
   1000           * @return  none
   1001           */
   1002          static uint8 zclSceneSelector_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1003          {
   1004            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1005            uint8 i;
   1006          
   1007            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1008            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1009            {
   1010              // Device is notified of the result of its attribute discovery command.
   1011            }
   1012          
   1013            return TRUE;
   1014          }
   1015          
   1016          /*********************************************************************
   1017           * @fn      zclSceneSelector_ProcessInDiscAttrsExtRspCmd
   1018           *
   1019           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1020           *
   1021           * @param   pInMsg - incoming message to process
   1022           *
   1023           * @return  none
   1024           */
   1025          static uint8 zclSceneSelector_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1026          {
   1027            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1028            uint8 i;
   1029          
   1030            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1031            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1032            {
   1033              // Device is notified of the result of its attribute discovery command.
   1034            }
   1035          
   1036            return TRUE;
   1037          }
   1038          #endif // ZCL_DISCOVER
   1039          
   1040          #if ZCL_EZMODE
   1041          /*********************************************************************
   1042           * @fn      zclSceneSelector_ProcessZDOMsgs
   1043           *
   1044           * @brief   Called when this node receives a ZDO/ZDP response.
   1045           *
   1046           * @param   none
   1047           *
   1048           * @return  status
   1049           */
   1050          static void zclSceneSelector_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1051          {
   1052          
   1053            // Let EZ-Mode know of the Match Descriptor Reponse (same as ActiveEP Response)
   1054            if ( pMsg->clusterID == Match_Desc_rsp )
   1055            {
   1056              zclEZMode_ActionData_t data;
   1057              ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   1058              data.pMatchDescRsp = pRsp;
   1059              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1060              osal_mem_free(pRsp);
   1061            }
   1062          }
   1063          
   1064          /*********************************************************************
   1065           * @fn      zclSceneSelector_EZModeCB
   1066           *
   1067           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1068          *           going on during EZ-Mode steering/finding/binding.
   1069           *
   1070           * @param   state - an
   1071           *
   1072           * @return  none
   1073           */
   1074          static void zclSceneSelector_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   1075          {
   1076          #ifdef LCD_SUPPORTED
   1077            char szLine[20];
   1078            char *pStr;
   1079            uint8 err;
   1080          #endif
   1081          
   1082            // time to go into identify mode
   1083            if ( state == EZMODE_STATE_IDENTIFYING )
   1084            {
   1085              zclSceneSelector_IdentifyTime = (EZMODE_TIME / 1000);  // convert to seconds
   1086              zclSceneSelector_ProcessIdentifyTimeChange();
   1087            }
   1088          
   1089            // autoclosing, show what happened (success, cancelled, etc...)
   1090            if( state == EZMODE_STATE_AUTOCLOSE )
   1091            {
   1092          #ifdef LCD_SUPPORTED
   1093              pStr = NULL;
   1094              err = pData->sAutoClose.err;
   1095              if ( err == EZMODE_ERR_SUCCESS )
   1096              {
   1097                pStr = "EZMode: Success";
   1098              }
   1099              else if ( err == EZMODE_ERR_NOMATCH )
   1100              {
   1101                pStr = "EZMode: NoMatch"; // not a match made in heaven
   1102              }
   1103              if ( pStr )
   1104              {
   1105                if ( giSwScreenMode == SW_MAINMODE )
   1106                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1107              }
   1108          #endif
   1109            }
   1110          
   1111            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1112            if( state == EZMODE_STATE_FINISH )
   1113            {
   1114              // turn off identify mode
   1115              zclSceneSelector_IdentifyTime = 0;
   1116              zclSceneSelector_ProcessIdentifyTimeChange();
   1117          
   1118          #ifdef LCD_SUPPORTED
   1119              // if successful, inform user which nwkaddr/ep we bound to
   1120              pStr = NULL;
   1121              err = pData->sFinish.err;
   1122              if( err == EZMODE_ERR_SUCCESS )
   1123              {
   1124                // "EZDst:1234 EP:34"
   1125                osal_memcpy(szLine, "EZDst:", 6);
   1126                zclHA_uint16toa( pData->sFinish.nwkaddr, &szLine[6]);
   1127                osal_memcpy(&szLine[10], " EP:", 4);
   1128                _ltoa( pData->sFinish.ep, (void *)(&szLine[14]), 16 );  // _ltoa NULL terminates
   1129                pStr = szLine;
   1130              }
   1131              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   1132              {
   1133                pStr = "EZMode: BadParm";
   1134              }
   1135              else if ( err == EZMODE_ERR_CANCELLED )
   1136              {
   1137                pStr = "EZMode: Cancel";
   1138              }
   1139              else
   1140              {
   1141                pStr = "EZMode: TimeOut";
   1142              }
   1143              if ( pStr )
   1144              {
   1145                if ( giSwScreenMode == SW_MAINMODE )
   1146                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   1147              }
   1148          #endif  // LCD_SUPPORTED
   1149              // show main UI screen 3 seconds after binding
   1150              osal_start_timerEx( zclSceneSelector_TaskID, SCENESELECTOR_MAIN_SCREEN_EVT, 3000 );
   1151            }
   1152          
   1153          }
   1154          
   1155          #endif // ZCL_EZMODE
   1156          
   1157          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
   1158          /*********************************************************************
   1159           * @fn      zclSceneSelector_ProcessOTAMsgs
   1160           *
   1161           * @brief   Called to process callbacks from the ZCL OTA.
   1162           *
   1163           * @param   none
   1164           *
   1165           * @return  none
   1166           */
   1167          static void zclSceneSelector_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
   1168          {
   1169            uint8 RxOnIdle;
   1170          
   1171            switch(pMsg->ota_event)
   1172            {
   1173            case ZCL_OTA_START_CALLBACK:
   1174              if (pMsg->hdr.status == ZSuccess)
   1175              {
   1176                // Speed up the poll rate
   1177                RxOnIdle = TRUE;
   1178                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1179                NLME_SetPollRate( 2000 );
   1180              }
   1181              break;
   1182          
   1183            case ZCL_OTA_DL_COMPLETE_CALLBACK:
   1184              if (pMsg->hdr.status == ZSuccess)
   1185              {
   1186                // Reset the CRC Shadow and reboot.  The bootloader will see the
   1187                // CRC shadow has been cleared and switch to the new image
   1188                HalOTAInvRC();
   1189                SystemReset();
   1190              }
   1191              else
   1192              {
   1193                // slow the poll rate back down.
   1194                RxOnIdle = FALSE;
   1195                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1196                NLME_SetPollRate(DEVICE_POLL_RATE);
   1197              }
   1198              break;
   1199          
   1200            default:
   1201              break;
   1202            }
   1203          }
   1204          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
   1205          
   1206          /****************************************************************************
   1207          ****************************************************************************/
   1208          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   zclSceneSelector_BasicResetCB
        2      0   -> MT_SysCommandProcessing
        2      0   -> zgWriteStartupOptions
      2      0   zclSceneSelector_IdentifyCB
        2      0   -> zclSceneSelector_ProcessIdentifyTimeChange
      0      0   zclSceneSelector_IdentifyQueryRspCB
      0      9   zclSceneSelector_Init
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> addSceneSelector_init
        0      9   -> afRegister
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclHA_Init
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
      0      0   zclSceneSelector_LcdDisplayHelpMode
      0      0   zclSceneSelector_LcdDisplayMainMode
      0      0   zclSceneSelector_LcdDisplayUpdate
      2     18   zclSceneSelector_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      0     14   zclSceneSelector_event_loop
        0     14   -> addCommon_networkState_led
        0     14   -> addSceneSelector_eventLoop
        0     14   -> osal_mem_free
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> zclSceneSelector_ProcessIdentifyTimeChange


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for aProcessCmd>
       6  ?<Initializer for sceneSelector_TestEp1>
       6  ?<Initializer for sceneSelector_TestEp2>
       6  ?<Initializer for sceneSelector_TestEp3>
       6  ?<Initializer for sceneSelector_TestEp4>
      36  ?<Initializer for zclSceneSelector_CmdCallback
       1  ?<Initializer for zclSceneSelector_NwkState>
       1  ?<Initializer for zclSceneSelector_OnOffSwitch
       6  ??zclSceneSelector_BasicResetCB?relay
       6  ??zclSceneSelector_IdentifyCB?relay
       6  ??zclSceneSelector_IdentifyQueryRspCB?relay
       6  ??zclSceneSelector_Init?relay
       6  ??zclSceneSelector_LcdDisplayHelpMode?relay
       6  ??zclSceneSelector_LcdDisplayMainMode?relay
       6  ??zclSceneSelector_LcdDisplayUpdate?relay
       6  ??zclSceneSelector_ProcessIdentifyTimeChange?re
       6  ??zclSceneSelector_event_loop?relay
       7  ?Subroutine0
      16  ?Subroutine1
       4  __Constant_3e8
       4  aProcessCmd
       1  gPermitDuration
       1  giSwScreenMode
       6  sceneSelector_TestEp1
       6  sceneSelector_TestEp2
       6  sceneSelector_TestEp3
       6  sceneSelector_TestEp4
       1  zclSceneSelectorSeqNum
      20  zclSceneSelector_BasicResetCB
      36  zclSceneSelector_CmdCallbacks
      12  zclSceneSelector_DstAddr
      28  zclSceneSelector_IdentifyCB
       3  zclSceneSelector_IdentifyQueryRspCB
     207  zclSceneSelector_Init
       3  zclSceneSelector_LcdDisplayHelpMode
       3  zclSceneSelector_LcdDisplayMainMode
       3  zclSceneSelector_LcdDisplayUpdate
       1  zclSceneSelector_NwkState
       1  zclSceneSelector_OnOffSwitchActions
       1  zclSceneSelector_OnOffSwitchType
      83  zclSceneSelector_ProcessIdentifyTimeChange
       1  zclSceneSelector_TaskID
     215  zclSceneSelector_event_loop

 
 588 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
  66 bytes in segment XDATA_I
  66 bytes in segment XDATA_ID
   4 bytes in segment XDATA_ROM_C
  17 bytes in segment XDATA_Z
 
 708 bytes of CODE  memory
   0 bytes of CONST memory (+ 4 bytes shared)
  83 bytes of XDATA memory

Errors: none
Warnings: 2
