###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                22/Jan/2018  15:11:44
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=120000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=180000)
#        -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDProfile.c" -D
#        SCENE_SELECTOR_TOUCHKEY -D xSCENE_SELECTOR -D ISR_KEYINTERRUPT -D
#        OSC32K_CRYSTAL_INSTALLED=FALSE -D xxHAL_PA_LNA -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_SCENES
#        -D ZCL_ON_OFF -D ZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        -lA "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddSceneSelector\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddCommon\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\Source\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Source\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\ZDProfile.lst
#    Object file        =  
#        E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\ZDProfile.r51
#
###############################################################################

E:\GitHub\面板Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   0200         DW 2
   \   000006   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000008   0300         DW 3
   \   00000A   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   00000C   0400         DW 4
   \   00000E   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000010   0500         DW 5
   \   000012   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   000014   0600         DW 6
   \   000016   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000018   1100         DW 17
   \   00001A   ....         DW ??ZDO_ProcessUserDescReq?relay
   \   00001C   1400         DW 20
   \   00001E   ....         DW ??ZDO_ProcessUserDescSet?relay
   \   000020   1500         DW 21
   \   000022   ....         DW ??ZDO_ProcessServerDiscReq?relay
   \   000024   FFFF         DW 65535
   \   000026   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182          #if ( ZG_BUILD_RTR_TYPE )
    183            // These aren't processed by end devices.
    184            { Parent_annce,           ZDO_ProcessParentAnnce },
    185            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    186          #endif
    187            { IEEE_addr_req,          zdpProcessAddrReq },
    188            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    189            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    190            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    191            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    192            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    193          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    194            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    195          #endif
    196          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    197            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    198          #endif
    199          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    200            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    201          #endif
    202          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    203            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    204          #endif
    205          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    206            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    207          #endif
    208          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    209            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    210          #endif
    211          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    212            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    213          #endif
    214          #if defined ( ZDO_USERDESC_RESPONSE )
    215            { User_Desc_req,          ZDO_ProcessUserDescReq },
    216          #endif
    217          #if defined ( ZDO_USERDESCSET_RESPONSE )
    218            { User_Desc_set,          ZDO_ProcessUserDescSet },
    219          #endif
    220          #if defined ( ZDO_SERVERDISC_RESPONSE )
    221            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    222          #endif
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C0E0         PUSH    A
   \   000035   7408         MOV     A,#0x8
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   D0E0         POP     A
   \   00003C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00003F   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000042   12....       LCALL   ?Subroutine31 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_124:
   \   000045   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000048   E0           MOVX    A,@DPTR
   \   000049   24FF         ADD     A,#-0x1
   \   00004B   F5..         MOV     ?V2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   34FF         ADDC    A,#-0x1
   \   000051   F5..         MOV     ?V3,A
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   85..82       MOV     DPL,?V2
   \   00005D   85..83       MOV     DPH,?V3
   \   000060   F0           MOVX    @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000061                ; Setup parameters for call to function AF_DataRequest
   \   000061   75..1E       MOV     ?V5,#0x1e
   \   000064   78..         MOV     R0,#?V5
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV     R0,#?V2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   E5..         MOV     A,?V4
   \   000075   2401         ADD     A,#0x1
   \   000077   F5..         MOV     ?V0,A
   \   000079   E4           CLR     A
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   F5..         MOV     ?V1,A
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7421         MOV     A,#0x21
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000092   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000094   7409         MOV     A,#0x9
   \   000096   12....       LCALL   ?XSTACK_DISP101_8
   \   000099   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A1   740C         MOV     A,#0xc
   \   0000A3   02....       LJMP    ?Subroutine0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine78_0
   \   000001                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   12....       LCALL   ?Subroutine46 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_61:
   \   00000D   EF           MOV     A,R7
   \   00000E   FE           MOV     R6,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000017   8020         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   12....       LCALL   ?Subroutine32 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_43:
   \   000027   A3           INC     DPTR
   \   000028   A882         MOV     R0,DPL
   \   00002A   A983         MOV     R1,DPH
   \   00002C   85..82       MOV     DPL,?V2
   \   00002F   85..83       MOV     DPH,?V3
   \   000032   A3           INC     DPTR
   \   000033   8582..       MOV     ?V2,DPL
   \   000036   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   000039   74FF         MOV     A,#-0x1
   \   00003B   2E           ADD     A,R6
   \   00003C   FE           MOV     R6,A
   \   00003D   04           INC     A
   \   00003E   70D9         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000040   7410         MOV     A,#0x10
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   90....       MOV     DPTR,#ZDP_TxOptions
   \   000049   6004         JZ      ??ZDP_SendData_2
   \   00004B   7440         MOV     A,#0x40
   \   00004D   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004F   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   000050   F0           MOVX    @DPTR,A
   \   000051                ; Setup parameters for call to function fillAndSend
   \   000051   740C         MOV     A,#0xc
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000059   EF           MOV     A,R7
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   F9           MOV     R1,A
   \   000065   90....       MOV     DPTR,#ZDP_TxOptions
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   02....       LJMP    ??Subroutine94_0 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine21 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00000A   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7902         MOV     R1,#0x2
   \   000017   02....       LJMP    ?Subroutine8 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000006   EC           MOV     A,R4
   \   000007   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00000A   ED           MOV     A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine83_0
   \   000008                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005   02....       LJMP    ??Subroutine80_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_227:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine69 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_109:
   \   00002B   8012         SJMP    ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine45 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_60:
   \   00003B   E8           MOV     A,R0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV     A,R6
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   FD           MOV     R5,A
   \   000044   AA..         MOV     R2,?V0
   \   000046   AB..         MOV     R3,?V1
   \   000048   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    339          
    340            *pBuf++ = ReqType;
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E5..         MOV     A,?V2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
    341            *pBuf++ = StartIndex;
   \   000053   E5..         MOV     A,?V3
   \   000055   F0           MOVX    @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0,A
   \   000059   F5..         MOV     ?V1,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV     R1,#0xa
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?XSTACK_DISP102_8
   \   000067   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000069   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7409         MOV     A,#0x9
   \   000075   02....       LJMP    ?Subroutine0 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine108_0 & 0xFFFF
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_241:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
    369            dstAddr.addr.shortAddr = shortAddr;
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_192:
   \   00001C   EA           MOV     A,R2
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    372            *pBuf++ = HI_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_188:
   \   000024   A3           INC     DPTR
    373          
    374            *pBuf++ = ReqType;
   \   000025   EE           MOV     A,R6
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
    375            *pBuf++ = StartIndex;
   \   000028   EF           MOV     A,R7
   \   000029   F0           MOVX    @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..01       MOV     ?V0,#0x1
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7904         MOV     R1,#0x4
   \   000037   02....       LJMP    ?Subroutine2 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine79_0
   \   000011                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   7409         MOV     A,#0x9
   \   000002                REQUIRE ??Subroutine80_0
   \   000002                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine97_0
   \   000006                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine98_0
   \   000001                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine53 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_228:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V1,A
   \   000031   740F         MOV     A,#0xf
   \   000033   65..         XRL     A,?V1
   \   000035   6006         JZ      ??ZDP_MatchDescReq_2
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V1
   \   00003B   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F4           CPL     A
   \   000043   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74FF         MOV     A,#-0x1
   \   000054   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6C           XRL     A,R4
   \   000058   7003         JNZ     ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV     R4,#-0x3
   \   000061   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV     A,R4
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006A   ED           MOV     A,R5
   \   00006B   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00006E   740E         MOV     A,#0xe
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine41 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    436            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_55:
   \   000076   A3           INC     DPTR
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   000077   EE           MOV     A,R6
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   08           INC     R0
   \   00007B   08           INC     R0
   \   00007C   08           INC     R0
   \   00007D   A983         MOV     R1,DPH
    439            if ( NumInClusters )
   \   00007F   6011         JZ      ??ZDP_MatchDescReq_7
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000081   75..00       MOV     ?V1,#0x0
   \   000084   7410         MOV     A,#0x10
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine54 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_81:
   \   00008C   12....       LCALL   ?Subroutine11 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
    445            }
   \                     ??CrossCallReturnLabel_3:
   \   00008F   9E           SUBB    A,R6
   \   000090   40FA         JC      ??CrossCallReturnLabel_81
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   E5..         MOV     A,?V0
   \   000098   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    448            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_195:
   \   00009B   6012         JZ      ??ZDP_MatchDescReq_8
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   00009D   75..00       MOV     ?V1,#0x0
   \   0000A0   7413         MOV     A,#0x13
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine54 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_82:
   \   0000A8   12....       LCALL   ?Subroutine11 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
    454            }
   \                     ??CrossCallReturnLabel_4:
   \   0000AB   95..         SUBB    A,?V0
   \   0000AD   40F9         JC      ??CrossCallReturnLabel_82
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_8:
   \   0000AF                ; Setup parameters for call to function fillAndSend
   \   0000AF   75..06       MOV     ?V0,#0x6
   \   0000B2   75..00       MOV     ?V1,#0x0
   \   0000B5   78..         MOV     R0,#?V0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   EA           MOV     A,R2
   \   0000BD   FC           MOV     R4,A
   \   0000BE   EB           MOV     A,R3
   \   0000BF   FD           MOV     R5,A
   \   0000C0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000C4   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000CC   02....       LJMP    ??Subroutine95_0 & 0xFFFF
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   8C..         MOV     ?V2,R4
   \   000007   8D..         MOV     ?V3,R5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AC..         MOV     R4,?V1
   \   000002   EC           MOV     A,R4
   \   000003   2C           ADD     A,R4
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   33           RLC     A
   \   000007   FD           MOV     R5,A
   \   000008   E5..         MOV     A,?V2
   \   00000A   2C           ADD     A,R4
   \   00000B   FC           MOV     R4,A
   \   00000C   E5..         MOV     A,?V3
   \   00000E   3D           ADDC    A,R5
   \   00000F   FD           MOV     R5,A
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000017   A3           INC     DPTR
   \   000018   A882         MOV     R0,DPL
   \   00001A   A983         MOV     R1,DPH
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000024   05..         INC     ?V1
   \   000026   E5..         MOV     A,?V1
   \   000028   C3           CLR     C
   \   000029   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   A3           INC     DPTR
   \   000004   08           INC     R0
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   ED           MOV     A,R5
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine107_0
   \   000001                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine108_0
   \   000001                ; // Fall through to label ??Subroutine108_0
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine21 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000008   12....       LCALL   ?Subroutine18 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_11:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ?Subroutine8 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
    504            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_220:
   \   000008   740F         MOV     A,#0xf
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   12....       LCALL   ?Subroutine52 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_79:
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   C3           CLR     C
   \   000013   9410         SUBB    A,#0x10
   \   000015   5004         JNC     ??ZDP_UserDescSet_0
   \   000017   8A..         MOV     ?V2,R2
   \   000019   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001B   75..10       MOV     ?V2,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00001E   EC           MOV     A,R4
   \   00001F   85..82       MOV     DPL,?V0
   \   000022   85..83       MOV     DPH,?V1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
    513          
    514            *pBuf++ = len;
   \   00002A   E5..         MOV     A,?V2
   \   00002C   12....       LCALL   ?Subroutine13 & 0xFFFF
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_5:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000032   AC..         MOV     R4,?V2
   \   000034   7D00         MOV     R5,#0x0
   \   000036   AA..         MOV     R2,?V0
   \   000038   AB..         MOV     R3,?V1
   \   00003A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00003D   7403         MOV     A,#0x3
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000042                ; Setup parameters for call to function osal_memset
   \   000042   A8..         MOV     R0,?V2
   \   000044   7410         MOV     A,#0x10
   \   000046   C3           CLR     C
   \   000047   98           SUBB    A,R0
   \   000048   FC           MOV     R4,A
   \   000049   95E0         SUBB    A,0xE0 /* A   */
   \   00004B   FD           MOV     R5,A
   \   00004C   7920         MOV     R1,#0x20
   \   00004E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000051                ; Setup parameters for call to function fillAndSend
   \   000051   75..14       MOV     ?V0,#0x14
   \   000054   75..00       MOV     ?V1,#0x0
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   7913         MOV     R1,#0x13
   \   00005E   EE           MOV     A,R6
   \   00005F   FC           MOV     R4,A
   \   000060   EF           MOV     A,R7
   \   000061   FD           MOV     R5,A
   \   000062   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000064   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000066   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000069   7402         MOV     A,#0x2
   \   00006B                REQUIRE ?Subroutine3
   \   00006B                ; // Fall through to label ?Subroutine3
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine81_0
   \   000003                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   A3           INC     DPTR
   \   000004   A982         MOV     R1,DPL
   \   000006   AA83         MOV     R2,DPH
   \   000008   89..         MOV     ?V4,R1
   \   00000A   8A..         MOV     ?V5,R2
   \   00000C   75..00       MOV     ?V6,#0x0
   \   00000F   78..         MOV     R0,#?V4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0,DPL
   \   000005   8583..       MOV     ?V1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine105_0
   \   000004                ; // Fall through to label ??Subroutine105_0
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine53 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_229:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine22 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_20:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    542            *pBuf = HI_UINT16( serverMask );
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \                     ??CrossCallReturnLabel_189:
   \   00001D   EE           MOV     A,R6
   \   00001E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000021   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000023   7440         MOV     A,#0x40
   \   000025   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000027   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000028   F0           MOVX    @DPTR,A
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..15       MOV     ?V0,#0x15
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7902         MOV     R1,#0x2
   \   000036   E9           MOV     A,R1
   \   000037   12....       LCALL   ?XSTACK_DISP102_8
   \   00003A   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003C   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003E   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   E9           MOV     A,R1
   \   000047   F9           MOV     R1,A
   \   000048   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   02....       LJMP    ??Subroutine79_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine22 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000014   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine23 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_22:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   02....       LJMP    ?Subroutine2 & 0xFFFF
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0
    583          
    584          /*********************************************************************
    585           * @fn          ZDP_ParentAnnce
    586           *
    587           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    588           *              messages, it will depend on the clusterID parameter.
    589           *
    590           * @param       TransSeq - ZDP Transaction Sequence Number
    591           * @param       dstAddr - destination address
    592           * @param       numberOfChildren - 8 bit number of children
    593           * @param       childInfo - list of children information (ExtAddr and Age)
    594           * @param       clusterID - Parent_annce or Parent_annce_rsp
    595           * @param       SecurityEnable - Security Options
    596           *
    597           * @return      afStatus_t
    598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    600                                      zAddrType_t *dstAddr,
    601                                      uint8 numberOfChildren,
    602                                      uint8 *childInfo,
    603                                      cId_t clusterID,
    604                                      uint8 SecurityEnable )
    605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V8,R1
    606            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    607            ZDO_ChildInfo_t *pChildInfo;
    608            uint8 i, len;
    609          
    610            (void)SecurityEnable;  // Intentionally unreferenced parameter
    611          
    612            // NumberOfChildren + ( numberOfChildren * ChildInfo).
    613            len = 1 + ( numberOfChildren * sizeof(ZDO_ChildInfo_t) );
   \                     ??CrossCallReturnLabel_161:
   \   000012   75F00C       MOV     B,#0xc
   \   000015   E9           MOV     A,R1
   \   000016   A4           MUL     AB
   \   000017   04           INC     A
   \   000018   F5..         MOV     ?V6,A
    614          
    615            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   944F         SUBB    A,#0x4f
   \   00001C   4005         JC      ??ZDP_ParentAnnce_0
    616            {
    617              return afStatus_MEM_FAIL;
   \   00001E   7910         MOV     R1,#0x10
   \   000020   02....       LJMP    ??ZDP_ParentAnnce_1 & 0xFFFF
    618            }
    619          
    620            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    621          
    622            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??ZDP_ParentAnnce_0:
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   640F         XRL     A,#0xf
   \   000032   700B         JNZ     ??ZDP_ParentAnnce_2
    623            {
    624              // Make sure is sent to 0xFFFC
    625              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   74FC         MOV     A,#-0x4
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   74FF         MOV     A,#-0x1
   \   00003E   F0           MOVX    @DPTR,A
    626            }
    627          
    628            *pBuf++ = numberOfChildren;
   \                     ??ZDP_ParentAnnce_2:
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E9           MOV     A,R1
   \   000044   12....       LCALL   ??Subroutine104_0 & 0xFFFF
    629          
    630            for ( i = 0; i < numberOfChildren; i++ )
   \                     ??CrossCallReturnLabel_211:
   \   000047   75..00       MOV     ?V7,#0x0
   \   00004A   7414         MOV     A,#0x14
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000052   8034         SJMP    ??ZDP_ParentAnnce_3
    631            {
    632              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[i].extAddr );
   \                     ??ZDP_ParentAnnce_4:
   \   000054   E5..         MOV     A,?V7
   \   000056   75F00C       MOV     B,#0xc
   \   000059   A4           MUL     AB
   \   00005A   F8           MOV     R0,A
   \   00005B   A9F0         MOV     R1,B
   \   00005D   E5..         MOV     A,?V0
   \   00005F   28           ADD     A,R0
   \   000060   F5..         MOV     ?V4,A
   \   000062   E5..         MOV     A,?V1
   \   000064   39           ADDC    A,R1
   \   000065   F5..         MOV     ?V5,A
   \   000067                ; Setup parameters for call to function sAddrExtCpy
   \   000067   AC..         MOV     R4,?V4
   \   000069   FD           MOV     R5,A
   \   00006A   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    633          
    634              pBuf = osal_buffer_uint32( pBuf, pChildInfo[i].age );
   \   00006D                ; Setup parameters for call to function osal_buffer_uint32
   \   00006D   85..82       MOV     DPL,?V4
   \   000070   85..83       MOV     DPH,?V5
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007E   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    635            }
   \   000086   05..         INC     ?V7
   \                     ??ZDP_ParentAnnce_3:
   \   000088   E5..         MOV     A,?V7
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V8
   \   00008D   40C5         JC      ??ZDP_ParentAnnce_4
    636          
    637            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   00008F                ; Setup parameters for call to function fillAndSend
   \   00008F   7416         MOV     A,#0x16
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000097   A9..         MOV     R1,?V6
   \   000099   EE           MOV     A,R6
   \   00009A   FC           MOV     R4,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FD           MOV     R5,A
   \   00009D   AA..         MOV     R2,?V2
   \   00009F   AB..         MOV     R3,?V3
   \   0000A1   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_ParentAnnce_1:
   \   0000A9                REQUIRE ?Subroutine4
   \   0000A9                ; // Fall through to label ?Subroutine4
    638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine88_0
   \   000003                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET
    639          
    640          /*********************************************************************
    641           * Address Responses
    642           */
    643          
    644          /*********************************************************************
    645           * @fn      zdpProcessAddrReq
    646           *
    647           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    648           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    649           *
    650           * @param   inMsg - incoming message
    651           *
    652           * @return  none
    653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    655          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    656            associated_devices_t *pAssoc;
    657            uint8 reqType;
    658            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   7EFE         MOV     R6,#-0x2
   \   00000B   7FFF         MOV     R7,#-0x1
    659            uint8 *ieee = NULL;
   \   00000D   75..00       MOV     ?V2,#0x0
   \   000010   75..00       MOV     ?V3,#0x0
    660          
    661            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000013   EA           MOV     A,R2
   \   000014   240C         ADD     A,#0xc
   \   000016   F5..         MOV     ?V4,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V1
   \   00001B   F5..         MOV     ?V5,A
   \   00001D   85..82       MOV     DPL,?V4
   \   000020   F583         MOV     DPH,A
   \   000022   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000025   4B           ORL     A,R3
   \   000026   7004         JNZ     ??zdpProcessAddrReq_0
   \   000028   7C08         MOV     R4,#0x8
   \   00002A   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   00002C   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   00002E   E5..         MOV     A,?V0
   \   000030   2413         ADD     A,#0x13
   \   000032   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000035   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000038   2C           ADD     A,R4
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V6,A
    662          
    663            if ( inMsg->clusterID == NWK_addr_req )
   \   000042   EA           MOV     A,R2
   \   000043   4B           ORL     A,R3
   \   000044   7017         JNZ     ??zdpProcessAddrReq_2
    664          
    665            {
    666              ieee = inMsg->asdu;
   \   000046   88..         MOV     ?V2,R0
   \   000048   89..         MOV     ?V3,R1
    667          
    668              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00004A                ; Setup parameters for call to function sAddrExtCmp
   \   00004A   AC..         MOV     R4,?V2
   \   00004C   AD..         MOV     R5,?V3
   \   00004E   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000050   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000052   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000055   E9           MOV     A,R1
   \   000056   6039         JZ      ??zdpProcessAddrReq_3
    669              {
    670                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000058   12....       LCALL   ?Subroutine43 & 0xFFFF
    671              }
    672              // Handle response for sleeping end devices
    673              else if ( (ZSTACK_ROUTER_BUILD)
    674                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    675                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    676              {
    677                aoi = pAssoc->shortAddr;
    678                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    679                  reqType = 0xFF; // Force Invalid
    680              }
    681            }
   \                     ??CrossCallReturnLabel_209:
   \   00005B   8024         SJMP    ??zdpProcessAddrReq_4
    682            else  // if ( inMsg->clusterID == IEEE_addr_req )
    683            {
    684              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   E4           CLR     A
   \   000067   C8           XCH     A,R0
   \   000068   F9           MOV     R1,A
   \   000069   EA           MOV     A,R2
   \   00006A   28           ADD     A,R0
   \   00006B   FE           MOV     R6,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   FF           MOV     R7,A
    685          
    686              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6E           XRL     A,R6
   \   000074   7003         JNZ     ??zdpProcessAddrReq_5
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_5:
   \   000079   7016         JNZ     ??zdpProcessAddrReq_3
    687              {
    688                ieee = saveExtAddr;
   \   00007B   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   00007E   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    689              }
    690              else if ( (ZSTACK_ROUTER_BUILD)
    691                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    692                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    693              {
    694                AddrMgrEntry_t addrEntry;
    695                addrEntry.user = ADDRMGR_USER_DEFAULT;
    696                addrEntry.index = pAssoc->addrIdx;
    697                if ( AddrMgrEntryGet( &addrEntry ) )
    698                {
    699                  ieee = addrEntry.extAddr;
    700                }
    701          
    702                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    703                  reqType = 0xFF; // Force Invalid
    704              }
    705            }
    706          
    707            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000081   74FE         MOV     A,#-0x2
   \   000083   6E           XRL     A,R6
   \   000084   7003         JNZ     ??zdpProcessAddrReq_6
   \   000086   74FF         MOV     A,#-0x1
   \   000088   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_6:
   \   000089   6006         JZ      ??zdpProcessAddrReq_3
   \   00008B   E5..         MOV     A,?V2
   \   00008D   45..         ORL     A,?V3
   \   00008F   700D         JNZ     ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   000091   E5..         MOV     A,?V0
   \   000093   240B         ADD     A,#0xb
   \   000095   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6003         JZ      $+5
   \   00009B   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    708            {
    709              uint8 stat;
    710              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   00009E   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    711              // Status + IEEE-Addr + Nwk-Addr.
    712              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    713          
    714              // If aoi and iee are both setup, we found results
    715              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_162:
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   6E           XRL     A,R6
   \   0000A4   7003         JNZ     ??zdpProcessAddrReq_9
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000A9   6018         JZ      ??zdpProcessAddrReq_10
   \   0000AB   E5..         MOV     A,?V2
   \   0000AD   45..         ORL     A,?V3
   \   0000AF   6012         JZ      ??zdpProcessAddrReq_10
    716              {
    717                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    718                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000B1   E5..         MOV     A,?V6
   \   0000B3   6006         JZ      ??zdpProcessAddrReq_11
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   65..         XRL     A,?V6
   \   0000B9   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000BB   7800         MOV     R0,#0x0
   \   0000BD   801E         SJMP    ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000BF   7880         MOV     R0,#-0x80
   \   0000C1   801A         SJMP    ??zdpProcessAddrReq_13
    719              }
    720              else
    721              {
    722                // not found and the req was unicast to this device
    723                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000C3   7881         MOV     R0,#-0x7f
    724          
    725                // Fill in the missing field with this device's address
    726                if ( inMsg->clusterID == NWK_addr_req )
   \   0000C5   85..82       MOV     DPL,?V4
   \   0000C8   85..83       MOV     DPH,?V5
   \   0000CB   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000CE   EC           MOV     A,R4
   \   0000CF   4D           ORL     A,R5
   \   0000D0   7005         JNZ     ??zdpProcessAddrReq_14
    727                {
    728                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000D2   12....       LCALL   ?Subroutine43 & 0xFFFF
    729                }
   \                     ??CrossCallReturnLabel_210:
   \   0000D5   8006         SJMP    ??zdpProcessAddrReq_13
    730                else
    731                {
    732                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000D7   75....       MOV     ?V2,#saveExtAddr & 0xff
   \   0000DA   75....       MOV     ?V3,#(saveExtAddr >> 8) & 0xff
    733                }
    734              }
    735          
    736              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000DD   E8           MOV     A,R0
   \   0000DE   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    737          
    738              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_217:
   \   0000E1                ; Setup parameters for call to function sAddrExtCpy
   \   0000E1   AC..         MOV     R4,?V2
   \   0000E3   AD..         MOV     R5,?V3
   \   0000E5   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
    739          
    740              *pBuf++ = LO_UINT16( aoi );
   \   0000E8   EE           MOV     A,R6
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
    741              *pBuf++ = HI_UINT16( aoi );
   \   0000EF   EF           MOV     A,R7
   \   0000F0   F0           MOVX    @DPTR,A
    742          
    743              if ( ZSTACK_ROUTER_BUILD )
    744              {
    745                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    746                     && (stat == ZDP_SUCCESS) )
    747                {
    748                  uint8  cnt = 0;
    749                  uint16 *list = AssocMakeList( &cnt );
    750          
    751                  if ( list != NULL )
    752                  {
    753                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    754                    uint16 *pList = list + idx;
    755          
    756                    // NumAssocDev field is only present on success.
    757                    if ( cnt > idx )
    758                    {
    759                      cnt -= idx;
    760                      len += (cnt * sizeof( uint16 ));
    761                    }
    762                    else
    763                    {
    764                      cnt = 0;
    765                    }
    766                    *pBuf++ = cnt;
    767                    len++;
    768          
    769                    // StartIndex field is only present if NumAssocDev field is non-zero.
    770                    *pBuf++ = idx;
    771                    len++;
    772          
    773                    while ( cnt != 0 )
    774                    {
    775                      *pBuf++ = LO_UINT16( *pList );
    776                      *pBuf++ = HI_UINT16( *pList );
    777                      pList++;
    778                      cnt--;
    779                    }
    780          
    781                    osal_mem_free( (uint8 *)list );
    782                  }
    783                  else
    784                  {
    785                    // NumAssocDev field is only present on success.
    786                    *pBuf++ = 0;
    787                    len++;
    788                  }
    789                }
    790              }
    791          
    792              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000F1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000F4   7410         MOV     A,#0x10
   \   0000F6   F0           MOVX    @DPTR,A
    793              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0000F7                ; Setup parameters for call to function fillAndSend
   \   0000F7   85..82       MOV     DPL,?V4
   \   0000FA   85..83       MOV     DPH,?V5
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F5..         MOV     ?V2,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   4480         ORL     A,#0x80
   \   000104   F5..         MOV     ?V3,A
   \   000106   78..         MOV     R0,#?V2
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   790B         MOV     R1,#0xb
   \   00010D   E5..         MOV     A,?V0
   \   00010F   2402         ADD     A,#0x2
   \   000111   FC           MOV     R4,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V1
   \   000115   FD           MOV     R5,A
   \   000116   E5..         MOV     A,?V0
   \   000118   240F         ADD     A,#0xf
   \   00011A   FA           MOV     R2,A
   \   00011B   E4           CLR     A
   \   00011C   35..         ADDC    A,?V1
   \   00011E   FB           MOV     R3,A
   \   00011F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?DEALLOC_XSTACK8
    794              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000127   90....       MOV     DPTR,#ZDP_TxOptions
   \   00012A   E4           CLR     A
   \   00012B   F0           MOVX    @DPTR,A
    795            }
    796          }
   \                     ??zdpProcessAddrReq_8:
   \   00012C   02....       LJMP    ??Subroutine81_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine104_0
   \   000004                ; // Fall through to label ??Subroutine104_0
    797          
    798          /*********************************************************************
    799           * @fn          ZDP_NodeDescMsg
    800           *
    801           * @brief       Builds and sends a Node Descriptor message, unicast to the
    802           *              specified device.
    803           *
    804           * @param       inMsg - incoming message
    805           * @param       nwkAddr - 16 bit network address for device
    806           * @param       pNodeDesc - pointer to the node descriptor
    807           *
    808           * @return      afStatus_t
    809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    810          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    811                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    813            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   12....       LCALL   ?Subroutine52 & 0xFFFF
    814            byte len;
    815          
    816            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    817          
    818            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_80:
   \   00000B   12....       LCALL   ?Subroutine33 & 0xFFFF
    819          
    820            *pBuf++ = LO_UINT16( nwkAddr );
    821            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_44:
   \   00000E   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000011   740A         MOV     A,#0xa
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine57 & 0xFFFF
    822          
    823            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    824                               (pNodeDesc->UserDescAvail << 4) |
    825                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_87:
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   541F         ANL     A,#0x1f
   \   000020   12....       LCALL   ??Subroutine86_0 & 0xFFFF
    826          
    827            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_154:
   \   000023   12....       LCALL   ?Subroutine17 & 0xFFFF
    828            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_152:
   \   000026   A3           INC     DPTR
   \   000027   12....       LCALL   ?Subroutine16 & 0xFFFF
    829            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_130:
   \   00002A   12....       LCALL   ?Subroutine16 & 0xFFFF
    830            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_131:
   \   00002D   12....       LCALL   ?Subroutine9 & 0xFFFF
    831            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_0:
   \   000030   12....       LCALL   ??Subroutine82_0 & 0xFFFF
    832            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_132:
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine15 & 0xFFFF
    833            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_9:
   \   000038   12....       LCALL   ??Subroutine85_0 & 0xFFFF
    834          
    835            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_141:
   \   00003B   2408         ADD     A,#0x8
   \   00003D   FE           MOV     R6,A
   \   00003E   E4           CLR     A
   \   00003F   3D           ADDC    A,R5
   \   000040   FF           MOV     R7,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine84_0 & 0xFFFF
    836            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_133:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   12....       LCALL   ?Subroutine15 & 0xFFFF
    837            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_10:
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   12....       LCALL   ?Subroutine19 & 0xFFFF
    838            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_138:
   \   000054   240B         ADD     A,#0xb
   \   000056   F582         MOV     DPL,A
   \   000058   E4           CLR     A
   \   000059   3D           ADDC    A,R5
   \   00005A   F583         MOV     DPH,A
   \   00005C   12....       LCALL   ??Subroutine85_0 & 0xFFFF
    839            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_142:
   \   00005F   240C         ADD     A,#0xc
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   3D           ADDC    A,R5
   \   000065   F583         MOV     DPH,A
   \   000067   12....       LCALL   ?Subroutine58 & 0xFFFF
    840          
    841            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_90:
   \   00006A                ; Setup parameters for call to function fillAndSend
   \   00006A   75..02       MOV     ?V0,#0x2
   \   00006D   75..80       MOV     ?V1,#-0x80
   \   000070   78..         MOV     R0,#?V0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7910         MOV     R1,#0x10
   \   000077   EA           MOV     A,R2
   \   000078   2402         ADD     A,#0x2
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   3B           ADDC    A,R3
   \   00007D   FD           MOV     R5,A
   \   00007E   EA           MOV     A,R2
   \   00007F   240F         ADD     A,#0xf
   \   000081   FA           MOV     R2,A
   \   000082   5001         JNC     ??ZDP_NodeDescMsg_0
   \   000084   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   000085   80..         SJMP    ??Subroutine83_0
    842          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine82_0
   \   000001                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EC           MOV     A,R4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   ED           MOV     A,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine85_0
   \   000001                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine86_0
   \   000001                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
    843          
    844          /*********************************************************************
    845           * @fn          ZDP_PowerDescMsg
    846           *
    847           * @brief       Builds and sends a Power Descriptor message, unicast to the
    848           *              specified device.
    849           *
    850           * @param       inMsg - incoming message (request)
    851           * @param       nwkAddr - 16 bit network address for device
    852           * @param       pPowerDesc - pointer to the node descriptor
    853           *
    854           * @return      afStatus_t
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    857                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    859            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    860            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    861          
    862            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_163:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ?Subroutine33 & 0xFFFF
    863          
    864            *pBuf++ = LO_UINT16( nwkAddr );
    865            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_45:
   \   000013   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001E   12....       LCALL   ?Subroutine34 & 0xFFFF
    866          
    867            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    868                              | (pPowerDesc->PowerMode & 0x0F));
    869            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    870                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_47:
   \   000021   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   F0           MOVX    @DPTR,A
    871          
    872            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0,#0x3
   \   00003A   75..80       MOV     ?V1,#-0x80
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   FC           MOV     R4,A
   \   000048   E4           CLR     A
   \   000049   3F           ADDC    A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   EE           MOV     A,R6
   \   00004C   240F         ADD     A,#0xf
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   FB           MOV     R3,A
   \   000052   80..         SJMP    ??Subroutine83_0
    873          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   0A           INC     R2
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   22           RET
    874          
    875          /*********************************************************************
    876           * @fn          ZDP_SimpleDescMsg
    877           *
    878           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    879           *              specified device.
    880           *
    881           * @param       inMsg - incoming message (request)
    882           * @param       Status - message status (ZDP_SUCCESS or other)
    883           * @param       pSimpleDesc - pointer to the node descriptor
    884           *
    885           * @return      afStatus_t
    886           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    887          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    888                                        SimpleDescriptionFormat_t *pSimpleDesc )
    889          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   12....       LCALL   ?Subroutine53 & 0xFFFF
    890            uint8 *pBuf = ZDP_TmpBuf;
    891            uint8 i, len;
    892          
    893            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_230:
   \   00000C   EC           MOV     A,R4
   \   00000D   2409         ADD     A,#0x9
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   FB           MOV     R3,A
   \   000013   8A..         MOV     ?V4,R2
   \   000015   8B..         MOV     ?V5,R3
   \   000017   EC           MOV     A,R4
   \   000018   2406         ADD     A,#0x6
   \   00001A   FA           MOV     R2,A
   \   00001B   E4           CLR     A
   \   00001C   3D           ADDC    A,R5
   \   00001D   FB           MOV     R3,A
   \   00001E   8A..         MOV     ?V6,R2
   \   000020   8B..         MOV     ?V7,R3
   \   000022   EE           MOV     A,R6
   \   000023   7022         JNZ     ??ZDP_SimpleDescMsg_0
   \   000025   EC           MOV     A,R4
   \   000026   4D           ORL     A,R5
   \   000027   601E         JZ      ??ZDP_SimpleDescMsg_0
    894            {
    895              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    896              len = 1 + 2 + 1 + 8;
    897              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000029   85..82       MOV     DPL,?V4
   \   00002C   85..83       MOV     DPH,?V5
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   85..82       MOV     DPL,?V6
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   2A           ADD     A,R2
   \   000038   C3           CLR     C
   \   000039   33           RLC     A
   \   00003A   240C         ADD     A,#0xc
   \   00003C   FA           MOV     R2,A
    898            }
    899            else
    900            {
    901              len = 1 + 2 + 1; // Status + desc length
    902            }
    903            if ( len >= ZDP_BUF_SZ-1 )
   \   00003D   C3           CLR     C
   \   00003E   944F         SUBB    A,#0x4f
   \   000040   4007         JC      ??ZDP_SimpleDescMsg_1
    904            {
    905              return afStatus_MEM_FAIL;
   \   000042   7910         MOV     R1,#0x10
   \   000044   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    906            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000047   7A04         MOV     R2,#0x4
    907          
    908            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000049   EE           MOV     A,R6
   \   00004A   12....       LCALL   ??Subroutine100_0 & 0xFFFF
    909          
    910            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_199:
   \   00004D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000050   12....       LCALL   ??Subroutine84_0 & 0xFFFF
    911            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_134:
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000056   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000059   A3           INC     DPTR
    912          
    913            if ( len > 4 )
   \   00005A   EA           MOV     A,R2
   \   00005B   C3           CLR     C
   \   00005C   9405         SUBB    A,#0x5
   \   00005E   5003         JNC     $+5
   \   000060   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    914            {
    915              *pBuf++ = len - 4;   // Simple descriptor length
   \   000063   74FC         MOV     A,#-0x4
   \   000065   2A           ADD     A,R2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   08           INC     R0
   \   000069   08           INC     R0
   \   00006A   A983         MOV     R1,DPH
    916          
    917              *pBuf++ = pSimpleDesc->EndPoint;
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   12....       LCALL   ?Subroutine17 & 0xFFFF
    918              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_153:
   \   000073   8582..       MOV     ?V0,DPL
   \   000076   8583..       MOV     ?V1,DPH
   \   000079   12....       LCALL   ?Subroutine24 & 0xFFFF
    919              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_24:
   \   00007C   12....       LCALL   ?Subroutine19 & 0xFFFF
    920              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_139:
   \   00007F   2403         ADD     A,#0x3
   \   000081   F5..         MOV     ?V0,A
   \   000083   E4           CLR     A
   \   000084   3D           ADDC    A,R5
   \   000085   F5..         MOV     ?V1,A
   \   000087   85..82       MOV     DPL,?V0
   \   00008A   F583         MOV     DPH,A
   \   00008C   12....       LCALL   ?Subroutine24 & 0xFFFF
    921              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_25:
   \   00008F   12....       LCALL   ?Subroutine9 & 0xFFFF
    922          
    923              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_1:
   \   000092   540F         ANL     A,#0xf
   \   000094   12....       LCALL   ?Subroutine25 & 0xFFFF
    924          
    925              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_26:
   \   000097   12....       LCALL   ?Subroutine25 & 0xFFFF
    926              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_27:
   \   00009A   6036         JZ      ??ZDP_SimpleDescMsg_4
    927              {
    928                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   EC           MOV     A,R4
   \   00009F   2407         ADD     A,#0x7
   \   0000A1   F5..         MOV     ?V0,A
   \   0000A3   E4           CLR     A
   \   0000A4   3D           ADDC    A,R5
   \   0000A5   85....       MOV     ?V8,?V0
   \   0000A8   F5..         MOV     ?V9,A
   \   0000AA   8019         SJMP    ??ZDP_SimpleDescMsg_5
    929                {
    930                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000AC   8B..         MOV     ?V0,R3
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   25E0         ADD     A,0xE0 /* A   */
   \   0000B2   F5..         MOV     ?V0,A
   \   0000B4   E4           CLR     A
   \   0000B5   33           RLC     A
   \   0000B6   F5..         MOV     ?V1,A
   \   0000B8   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000BB   12....       LCALL   ?Subroutine12 & 0xFFFF
    931                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_203:
   \   0000BE   12....       LCALL   ?Subroutine60 & 0xFFFF
    932                }
   \                     ??CrossCallReturnLabel_94:
   \   0000C1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000C4   0B           INC     R3
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000C5   85..82       MOV     DPL,?V6
   \   0000C8   85..83       MOV     DPH,?V7
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FF           MOV     R7,A
   \   0000CD   EB           MOV     A,R3
   \   0000CE   C3           CLR     C
   \   0000CF   9F           SUBB    A,R7
   \   0000D0   40DA         JC      ??ZDP_SimpleDescMsg_6
    933              }
    934          
    935              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000D2   85..82       MOV     DPL,?V4
   \   0000D5   85..83       MOV     DPH,?V5
   \   0000D8   12....       LCALL   ??Subroutine99_0 & 0xFFFF
    936              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_201:
   \   0000DB   85..82       MOV     DPL,?V4
   \   0000DE   85..83       MOV     DPH,?V5
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6044         JZ      ??ZDP_SimpleDescMsg_7
    937              {
    938                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000E4   7B00         MOV     R3,#0x0
   \   0000E6   EC           MOV     A,R4
   \   0000E7   240A         ADD     A,#0xa
   \   0000E9   FC           MOV     R4,A
   \   0000EA   5001         JNC     ??ZDP_SimpleDescMsg_8
   \   0000EC   0D           INC     R5
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000ED   8C..         MOV     ?V0,R4
   \   0000EF   8D..         MOV     ?V1,R5
   \                     ??ZDP_SimpleDescMsg_9:
   \   0000F1   85..82       MOV     DPL,?V4
   \   0000F4   85..83       MOV     DPH,?V5
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   FC           MOV     R4,A
   \   0000F9   EB           MOV     A,R3
   \   0000FA   C3           CLR     C
   \   0000FB   9C           SUBB    A,R4
   \   0000FC   502A         JNC     ??ZDP_SimpleDescMsg_7
    939                {
    940                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0000FE   EB           MOV     A,R3
   \   0000FF   25E0         ADD     A,0xE0 /* A   */
   \   000101   FC           MOV     R4,A
   \   000102   E4           CLR     A
   \   000103   33           RLC     A
   \   000104   FD           MOV     R5,A
   \   000105   85..82       MOV     DPL,?V0
   \   000108   85..83       MOV     DPH,?V1
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   2C           ADD     A,R4
   \   00010D   FF           MOV     R7,A
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   3D           ADDC    A,R5
   \   000111   12....       LCALL   ?Subroutine12 & 0xFFFF
    941                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_204:
   \   000114   85..82       MOV     DPL,?V0
   \   000117   85..83       MOV     DPH,?V1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   2C           ADD     A,R4
   \   00011C   FF           MOV     R7,A
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   3D           ADDC    A,R5
   \   000120   12....       LCALL   ?Subroutine26 & 0xFFFF
    942                }
   \                     ??CrossCallReturnLabel_137:
   \   000123   0B           INC     R3
   \   000124   80CB         SJMP    ??ZDP_SimpleDescMsg_9
    943              }
    944            }
    945          
    946            else
    947            {
    948              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
    949            }
    950          
    951            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000128                ; Setup parameters for call to function fillAndSend
   \   000128   75..04       MOV     ?V0,#0x4
   \   00012B   75..80       MOV     ?V1,#-0x80
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   EA           MOV     A,R2
   \   000134   F9           MOV     R1,A
   \   000135   E5..         MOV     A,?V2
   \   000137   2402         ADD     A,#0x2
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V3
   \   00013D   FD           MOV     R5,A
   \   00013E   E5..         MOV     A,?V2
   \   000140   240F         ADD     A,#0xf
   \   000142   FA           MOV     R2,A
   \   000143   E4           CLR     A
   \   000144   35..         ADDC    A,?V3
   \   000146   FB           MOV     R3,A
   \   000147   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00014F   02....       LJMP    ?Subroutine4 & 0xFFFF
    952          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0
   \   000009   FF           MOV     R7,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine84_0
   \   000005                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   85..82       MOV     DPL,?V6
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine99_0
   \   000004                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0
    953          
    954          /*********************************************************************
    955           * @fn          ZDP_EPRsp
    956           *
    957           * @brief       This builds and send an endpoint list. Used in
    958           *              Active_EP_rsp and Match_Desc_Rsp
    959           *              message.  This function sends unicast message to the
    960           *              requesting device.
    961           *
    962           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    963           * @param       dstAddr - destination address
    964           * @param       Status - message status (ZDP_SUCCESS or other)
    965           * @param       nwkAddr - Device's short address that this response describes
    966           * @param       Count - number of endpoint/interfaces in list
    967           * @param       pEPIntfList - Array of Endpoint/Interfaces
    968           * @param       SecurityEnable - Security Options
    969           *
    970           * @return      afStatus_t
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    973                                  byte Status, uint16 nwkAddr, byte Count,
    974                                  uint8 *pEPList,
    975                                  byte SecurityEnable )
    976          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
    977            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    978            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_164:
   \   00001D   75..04       MOV     ?V0,#0x4
    979            byte txOptions;
    980          
    981            (void)SecurityEnable;  // Intentionally unreferenced parameter
    982          
    983            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV     A,#0x6
   \   000022   65..         XRL     A,?V2
   \   000024   7004         JNZ     ??ZDP_EPRsp_0
   \   000026   7480         MOV     A,#-0x80
   \   000028   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   00002A   7005         JNZ     ??ZDP_EPRsp_1
    984              txOptions = AF_MSG_ACK_REQUEST;
   \   00002C   75..10       MOV     ?V1,#0x10
   \   00002F   8003         SJMP    ??ZDP_EPRsp_2
    985            else
    986              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000031   75..00       MOV     ?V1,#0x0
    987          
    988              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000034   7410         MOV     A,#0x10
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00003C   7411         MOV     A,#0x11
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine30 & 0xFFFF
    989            *pBuf++ = LO_UINT16( nwkAddr );
    990            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_38:
   \   000044   7413         MOV     A,#0x13
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
    991          
    992            *pBuf++ = Count;   // Endpoint/Interface count
   \   00004B   12....       LCALL   ??Subroutine91_0 & 0xFFFF
    993          
    994            if ( Count )
   \                     ??CrossCallReturnLabel_178:
   \   00004E   601A         JZ      ??ZDP_EPRsp_3
    995            {
    996              len += Count;
   \   000050   7404         MOV     A,#0x4
   \   000052   2C           ADD     A,R4
   \   000053   F5..         MOV     ?V0,A
    997              osal_memcpy( pBuf, pEPList, Count );
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   7414         MOV     A,#0x14
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine44 & 0xFFFF
    998            }
   \                     ??CrossCallReturnLabel_57:
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000060   7D00         MOV     R5,#0x0
   \   000062   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000065   7403         MOV     A,#0x3
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    999          
   1000            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   00006A   E5..         MOV     A,?V1
   \   00006C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006F   F0           MOVX    @DPTR,A
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   A9..         MOV     R1,?V0
   \   000077   EE           MOV     A,R6
   \   000078   FC           MOV     R4,A
   \   000079   EF           MOV     A,R7
   \   00007A   FD           MOV     R5,A
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP101_8
   \   000080   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   E9           MOV     A,R1
   \   000089   F9           MOV     R1,A
   \   00008A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   04           INC     A
   \   000090   02....       LJMP    ?Subroutine3 & 0xFFFF
   1001          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E9           MOV     A,R1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   0A           INC     R2
   \   000009   0A           INC     R2
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine103_0
   \   000001                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_UserDescRsp
   1005           *
   1006           * @brief       Build and send the User Decriptor Response.
   1007           *
   1008           *
   1009           * @param       dstAddr - destination address
   1010           * @param       nwkAddrOfInterest -
   1011           * @param       userDesc -
   1012           * @param       SecurityEnable - Security Options
   1013           *
   1014           * @return      ZStatus_t
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1017                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1018                          byte SecurityEnable )
   1019          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   12....       LCALL   ?Subroutine40 & 0xFFFF
   1020            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_221:
   \   000015   7413         MOV     A,#0x13
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00001D   88..         MOV     ?V8,R0
   \   00001F   89..         MOV     ?V9,R1
   1021            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1022          
   1023            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1024          
   1025            len += userDesc->len;
   \   000021   8882         MOV     DPL,R0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V2,A
   1026          
   1027            *pBuf++ = ZSUCCESS;
   \   00002A   85..82       MOV     DPL,?V0
   \   00002D   85..83       MOV     DPH,?V1
   \   000030   12....       LCALL   ?Subroutine33 & 0xFFFF
   1028          
   1029            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   1030            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_46:
   \   000033   12....       LCALL   ?Subroutine70 & 0xFFFF
   1031          
   1032            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_111:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   85..82       MOV     DPL,?V0
   \   00003A   85..83       MOV     DPH,?V1
   \   00003D   12....       LCALL   ?Subroutine13 & 0xFFFF
   1033            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_6:
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   85..82       MOV     DPL,?V8
   \   000046   85..83       MOV     DPH,?V9
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FC           MOV     R4,A
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1034          
   1035            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000059                ; Setup parameters for call to function fillAndSend
   \   000059   75..11       MOV     ?V0,#0x11
   \   00005C   75..80       MOV     ?V1,#-0x80
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   A9..         MOV     R1,?V2
   \   000066   EE           MOV     A,R6
   \   000067   FC           MOV     R4,A
   \   000068   EF           MOV     A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   02....       LJMP    ?Subroutine5 & 0xFFFF
   1036          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine90_0
   \   000005                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1037          
   1038          /*********************************************************************
   1039           * @fn          ZDP_ServerDiscRsp
   1040           *
   1041           * @brief       Build and send the Server_Discovery_rsp response.
   1042           *
   1043           * @param       transID - Transaction sequence number of request.
   1044           * @param       dstAddr - Network Destination Address.
   1045           * @param       status - Status of response to request.
   1046           * @param       aoi - Network Address of Interest of request.
   1047           * @param       serverMask - Bit map of service(s) being sought.
   1048           * @param       SecurityEnable - Security Options
   1049           *
   1050           * @return      ZStatus_t
   1051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1052          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1053                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1055            const byte len = 1  + 2;  // status + aoi + mask.
   1056            uint8 *pBuf = ZDP_TmpBuf;
   1057            ZStatus_t stat;
   1058          
   1059            // Intentionally unreferenced parameters
   1060            (void)aoi;
   1061            (void)SecurityEnable;
   1062          
   1063            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_231:
   \   000016   EE           MOV     A,R6
   \   000017   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00001A   740D         MOV     A,#0xd
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine41 & 0xFFFF
   1064          
   1065            *pBuf++ = LO_UINT16( serverMask );
   1066            *pBuf++ = HI_UINT16( serverMask );
   1067          
   1068            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_56:
   \   000022   90....       MOV     DPTR,#ZDP_TxOptions
   \   000025   7410         MOV     A,#0x10
   \   000027   F0           MOVX    @DPTR,A
   1069            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..15       MOV     ?V0,#0x15
   \   00002B   75..80       MOV     ?V1,#-0x80
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7903         MOV     R1,#0x3
   \   000035   EA           MOV     A,R2
   \   000036   FC           MOV     R4,A
   \   000037   EB           MOV     A,R3
   \   000038   FD           MOV     R5,A
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP101_8
   \   00003E   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   E9           MOV     A,R1
   \   000047   F9           MOV     R1,A
   1070            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000048   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   1071          
   1072            return ( stat );
   \   00004D   04           INC     A
   \   00004E   02....       LJMP    ??Subroutine80_0 & 0xFFFF
   1073          }
   1074          
   1075          /*********************************************************************
   1076           * @fn          ZDP_GenericRsp
   1077           *
   1078           * @brief       Sends a response message with only the parameter status
   1079           *              byte and the addr of interest for data.
   1080           *              This function sends unicast message to the
   1081           *              requesting device.
   1082           *
   1083           * @param       dstAddr - destination address
   1084           * @param       status  - generic status for response
   1085           * @param       aoi     - address of interest
   1086           * @param       dstAddr - destination address
   1087           * @param       rspId   - response cluster ID
   1088           * @param       SecurityEnable - Security Options
   1089           *
   1090           * @return      afStatus_t
   1091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1092          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1093                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1094          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1095            uint8 len;
   1096          
   1097            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1098          
   1099            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1100            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_234:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine18 & 0xFFFF
   1101            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1102          
   1103            // Length byte
   1104            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_12:
   \   00002F   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1105            len = 4;
   1106          
   1107            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine6
   \   000057                ; // Fall through to label ?Subroutine6
   1108          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1109          
   1110          /*********************************************************************
   1111           * Binding
   1112           */
   1113          /*********************************************************************
   1114           * @fn          ZDP_EndDeviceBindReq
   1115           *
   1116           * @brief       This builds and sends a End_Device_Bind_req message.
   1117           *              This function sends a unicast message.
   1118           *
   1119           * @param       dstAddr - destination address
   1120           * @param       LocalCoordinator - short address of local coordinator
   1121           * @param       epIntf - Endpoint/Interface of Simple Desc
   1122           * @param       ProfileID - Profile ID
   1123           *
   1124           *   The Input cluster list is the opposite of what you would think.
   1125           *   This is the output cluster list of this device
   1126           * @param       NumInClusters - number of input clusters
   1127           * @param       InClusterList - input cluster ID list
   1128           *
   1129           *   The Output cluster list is the opposite of what you would think.
   1130           *   This is the input cluster list of this device
   1131           * @param       NumOutClusters - number of output clusters
   1132           * @param       OutClusterList - output cluster ID list
   1133           *
   1134           * @param       SecurityEnable - Security Options
   1135           *
   1136           * @return      afStatus_t
   1137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1138          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1139                                           uint16 LocalCoordinator,
   1140                                           byte endPoint,
   1141                                           uint16 ProfileID,
   1142                                           byte NumInClusters, cId_t *InClusterList,
   1143                                           byte NumOutClusters, cId_t *OutClusterList,
   1144                                           byte SecurityEnable )
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1146            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
   \   00001D   7417         MOV     A,#0x17
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V1,A
   1147            uint8 i, len;
   1148            uint8 *ieeeAddr;
   1149          
   1150            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1151          
   1152            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1153            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1154            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000025   E5..         MOV     A,?V2
   \   000027   25..         ADD     A,?V1
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   240F         ADD     A,#0xf
   \   00002D   F5..         MOV     ?V0,A
   1155          
   1156            if ( len >= ZDP_BUF_SZ-1 )
   \   00002F   C3           CLR     C
   \   000030   944F         SUBB    A,#0x4f
   \   000032   4005         JC      ??ZDP_EndDeviceBindReq_0
   1157            {
   1158              return afStatus_MEM_FAIL;
   \   000034   7910         MOV     R1,#0x10
   \   000036   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1159            }
   1160          
   1161            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000039                ; Setup parameters for call to function NLME_GetShortAddr
   \   000039   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00003C   EA           MOV     A,R2
   \   00003D   65..         XRL     A,?V4
   \   00003F   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000041   EB           MOV     A,R3
   \   000042   65..         XRL     A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000044   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1162            {
   1163              return afStatus_INVALID_PARAMETER;
   \   000046   7902         MOV     R1,#0x2
   \   000048   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1164            }
   1165          
   1166            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   E5..         MOV     A,?V4
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   1167            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000053   E5..         MOV     A,?V5
   \   000055   12....       LCALL   ?Subroutine20 & 0xFFFF
   1168          
   1169            ieeeAddr = NLME_GetExtAddr();
   \                     ??CrossCallReturnLabel_13:
   \   000058                ; Setup parameters for call to function NLME_GetExtAddr
   \   000058   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00005B   8A..         MOV     ?V4,R2
   \   00005D   8B..         MOV     ?V5,R3
   \   00005F   AC..         MOV     R4,?V4
   \   000061   AD..         MOV     R5,?V5
   1170            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00006A   8A..         MOV     ?V4,R2
   \   00006C   8B..         MOV     ?V5,R3
   \   00006E   AE..         MOV     R6,?V4
   \   000070   AF..         MOV     R7,?V5
   1171          
   1172            *pBuf++ = endPoint;
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   E5..         MOV     A,?V3
   \   000078   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00007B   7412         MOV     A,#0x12
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine51 & 0xFFFF
   1173          
   1174            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_74:
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   1175            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_122:
   \   00008A   A3           INC     DPTR
   1176          
   1177            *pBuf++ = NumInClusters; // Input cluster list
   \   00008B   E5..         MOV     A,?V2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   0E           INC     R6
   \   000090   0E           INC     R6
   \   000091   0E           INC     R6
   \   000092   AF83         MOV     R7,DPH
   1178            for ( i = 0; i < NumInClusters; ++i )
   \   000094   75..00       MOV     ?V4,#0x0
   \   000097   7415         MOV     A,#0x15
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00009F   FC           MOV     R4,A
   \   0000A0   E9           MOV     A,R1
   \   0000A1   FD           MOV     R5,A
   \   0000A2   8027         SJMP    ??ZDP_EndDeviceBindReq_4
   1179            {
   1180              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000A4   AA..         MOV     R2,?V4
   \   0000A6   EA           MOV     A,R2
   \   0000A7   2A           ADD     A,R2
   \   0000A8   FA           MOV     R2,A
   \   0000A9   E4           CLR     A
   \   0000AA   33           RLC     A
   \   0000AB   FB           MOV     R3,A
   \   0000AC   EC           MOV     A,R4
   \   0000AD   2A           ADD     A,R2
   \   0000AE   FA           MOV     R2,A
   \   0000AF   ED           MOV     A,R5
   \   0000B0   3B           ADDC    A,R3
   \   0000B1   FB           MOV     R3,A
   \   0000B2   8A82         MOV     DPL,R2
   \   0000B4   8B83         MOV     DPH,R3
   \   0000B6   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   FE           MOV     R6,A
   \   0000BC   E9           MOV     A,R1
   \   0000BD   FF           MOV     R7,A
   1181              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000BE   8A82         MOV     DPL,R2
   \   0000C0   8B83         MOV     DPH,R3
   \   0000C2   A3           INC     DPTR
   \   0000C3   12....       LCALL   ?Subroutine47 & 0xFFFF
   1182            }
   \                     ??CrossCallReturnLabel_64:
   \   0000C6   0E           INC     R6
   \   0000C7   AF83         MOV     R7,DPH
   \   0000C9   05..         INC     ?V4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   A882         MOV     R0,DPL
   \   0000D2   A983         MOV     R1,DPH
   \   0000D4   E5..         MOV     A,?V4
   \   0000D6   C3           CLR     C
   \   0000D7   95..         SUBB    A,?V2
   \   0000D9   40C9         JC      ??ZDP_EndDeviceBindReq_5
   1183          
   1184            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   E5..         MOV     A,?V1
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   E8           MOV     A,R0
   \   0000E3   FE           MOV     R6,A
   \   0000E4   E9           MOV     A,R1
   \   0000E5   FF           MOV     R7,A
   1185            for ( i = 0; i < NumOutClusters; ++i )
   \   0000E6   75..00       MOV     ?V4,#0x0
   \   0000E9   7418         MOV     A,#0x18
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000F1   FA           MOV     R2,A
   \   0000F2   E9           MOV     A,R1
   \   0000F3   FB           MOV     R3,A
   \   0000F4   8012         SJMP    ??ZDP_EndDeviceBindReq_6
   1186            {
   1187              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000F6   A8..         MOV     R0,?V4
   \   0000F8   E8           MOV     A,R0
   \   0000F9   28           ADD     A,R0
   \   0000FA   F8           MOV     R0,A
   \   0000FB   E4           CLR     A
   \   0000FC   33           RLC     A
   \   0000FD   F9           MOV     R1,A
   \   0000FE   EA           MOV     A,R2
   \   0000FF   28           ADD     A,R0
   \   000100   F8           MOV     R0,A
   \   000101   EB           MOV     A,R3
   \   000102   39           ADDC    A,R1
   \   000103   12....       LCALL   ?Subroutine14 & 0xFFFF
   1188              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1189            }
   \                     ??CrossCallReturnLabel_7:
   \   000106   05..         INC     ?V4
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000108   E5..         MOV     A,?V4
   \   00010A   C3           CLR     C
   \   00010B   95..         SUBB    A,?V1
   \   00010D   40E7         JC      ??ZDP_EndDeviceBindReq_7
   1190          
   1191            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00010F                ; Setup parameters for call to function fillAndSend
   \   00010F   75..20       MOV     ?V4,#0x20
   \   000112   75..00       MOV     ?V5,#0x0
   \   000115   78..         MOV     R0,#?V4
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   A9..         MOV     R1,?V0
   \   00011C   AC..         MOV     R4,?V6
   \   00011E   AD..         MOV     R5,?V7
   \   000120   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000122   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000124   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00012C   80..         SJMP    ??Subroutine90_0
   1192          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000008   AE82         MOV     R6,DPL
   \   00000A   AF83         MOV     R7,DPH
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   A3           INC     DPTR
   \   000011   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
   1193          
   1194          /*********************************************************************
   1195           * @fn          ZDP_BindUnbindReq
   1196           *
   1197           * @brief       This builds and send a Bind_req or Unbind_req message
   1198           *              Depending on the ClusterID. This function
   1199           *              sends a unicast message to the local coordinator.
   1200           *
   1201           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1202           * @param       dstAddr - destination address of the message
   1203           * @param       SourceAddr - source 64 bit address of the binding
   1204           * @param       SrcEPIntf - Source endpoint/interface
   1205           * @param       ClusterID - Binding cluster ID
   1206           * @param       DestinationAddr - destination 64 bit addr of binding
   1207           * @param       DstEPIntf - destination endpoint/interface
   1208           * @param       SecurityEnable - Security Options
   1209           *
   1210           * @return      afStatus_t
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1213                                        uint8 *SourceAddr, byte SrcEndPoint,
   1214                                        cId_t ClusterID,
   1215                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1216                                        byte SecurityEnable )
   1217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1218            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   1219            byte len;
   1220          
   1221            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1222          
   1223            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1224            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_165:
   \   000012   75..0C       MOV     ?V2,#0xc
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1225            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_206:
   \   00001D   EE           MOV     A,R6
   \   00001E   2408         ADD     A,#0x8
   \   000020   F5..         MOV     ?V0,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   F5..         MOV     ?V1,A
   \   000026   85..82       MOV     DPL,?V0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7403         MOV     A,#0x3
   \   00002F   68           XRL     A,R0
   \   000030   7005         JNZ     ??ZDP_BindUnbindReq_0
   1226              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000032   75..15       MOV     ?V2,#0x15
   \   000035   8008         SJMP    ??ZDP_BindUnbindReq_1
   1227            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000037   7401         MOV     A,#0x1
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??ZDP_BindUnbindReq_1
   1228              len += sizeof ( uint16 );
   \   00003C   75..0E       MOV     ?V2,#0xe
   1229          
   1230            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   7412         MOV     A,#0x12
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000047   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1231            *pBuf++ = SrcEndPoint;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E5..         MOV     A,?V3
   \   000050   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000053   7414         MOV     A,#0x14
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine30 & 0xFFFF
   1232          
   1233            *pBuf++ = LO_UINT16( ClusterID );
   1234          
   1235            *pBuf++ = HI_UINT16( ClusterID );
   1236            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_39:
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   12....       LCALL   ?Subroutine35 & 0xFFFF
   1237            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_179:
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   68           XRL     A,R0
   \   00006F   7017         JNZ     ??ZDP_BindUnbindReq_2
   1238            {
   1239              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1240              *pBuf = DstEndPoint;
   \   000071   7418         MOV     A,#0x18
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   C0E0         PUSH    A
   \   000079                ; Setup parameters for call to function sAddrExtCpy
   \   000079   EE           MOV     A,R6
   \   00007A   FC           MOV     R4,A
   \   00007B   EF           MOV     A,R7
   \   00007C   FD           MOV     R5,A
   \   00007D   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000080   8A82         MOV     DPL,R2
   \   000082   8B83         MOV     DPH,R3
   \   000084   D0E0         POP     A
   \   000086   8016         SJMP    ??ZDP_BindUnbindReq_3
   1241            }
   1242            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000088   7401         MOV     A,#0x1
   \   00008A   68           XRL     A,R0
   \   00008B   7012         JNZ     ??ZDP_BindUnbindReq_4
   1243            {
   1244              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   12....       LCALL   ?Subroutine35 & 0xFFFF
   1245              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_180:
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   00009E   F0           MOVX    @DPTR,A
   1246            }
   1247          
   1248            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   00009F   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A2   7410         MOV     A,#0x10
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5                ; Setup parameters for call to function fillAndSend
   \   0000A5   78..         MOV     R0,#?V6
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   A9..         MOV     R1,?V2
   \   0000AC   AC..         MOV     R4,?V4
   \   0000AE   AD..         MOV     R5,?V5
   \   0000B0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000B2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B4   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV     A,R1
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C1   E4           CLR     A
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   02....       LJMP    ??Subroutine90_0 & 0xFFFF
   1249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine91_0
   \   000001                ; // Fall through to label ??Subroutine91_0
   1250          
   1251          /*********************************************************************
   1252           * Network Management
   1253           */
   1254          
   1255          /*********************************************************************
   1256           * @fn          ZDP_MgmtNwkDiscReq
   1257           *
   1258           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1259           *              function sends a unicast message.
   1260           *
   1261           * @param       dstAddr - destination address of the message
   1262           * @param       ScanChannels - 32 bit address bit map
   1263           * @param       StartIndex - Starting index within the reporting network
   1264           *                           list
   1265           * @param       SecurityEnable - Security Options
   1266           *
   1267           * @return      afStatus_t
   1268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1269          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1270                                         uint32 ScanChannels,
   1271                                         byte ScanDuration,
   1272                                         byte StartIndex,
   1273                                         byte SecurityEnable )
   1274          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   1275            uint8 *pBuf = ZDP_TmpBuf;
   1276            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1277          
   1278            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1279          
   1280            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000018   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1281          
   1282            *pBuf++ = ScanDuration;
   \   000024   E5..         MOV     A,?V0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   1283            *pBuf = StartIndex;
   \   000028   E5..         MOV     A,?V1
   \   00002A   F0           MOVX    @DPTR,A
   1284          
   1285            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002B                ; Setup parameters for call to function fillAndSend
   \   00002B   75..30       MOV     ?V2,#0x30
   \   00002E   75..00       MOV     ?V3,#0x0
   \   000031   78..         MOV     R0,#?V2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7906         MOV     R1,#0x6
   \   000038   80..         SJMP    ??Subroutine92_0
   1286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D                REQUIRE ??Subroutine93_0
   \   00000D                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine94_0
   \   000003                ; // Fall through to label ??Subroutine94_0
   1287          
   1288          /*********************************************************************
   1289           * @fn          ZDP_MgmtDirectJoinReq
   1290           *
   1291           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1292           *              function sends a unicast message.
   1293           *
   1294           * @param       dstAddr - destination address of the message
   1295           * @param       deviceAddr - 64 bit IEEE Address
   1296           * @param       SecurityEnable - Security Options
   1297           *
   1298           * @return      afStatus_t
   1299           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine87_0
   \   000006                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A                REQUIRE ??Subroutine92_0
   \   00000A                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1300          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1301                                         uint8 *deviceAddr,
   1302                                         byte capInfo,
   1303                                         byte SecurityEnable )
   1304          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine56 & 0xFFFF
   1305            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1306          
   1307            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_157:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1308            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00000E   C8           XCH     A,R0
   \   00000F   2408         ADD     A,#0x8
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   38           ADDC    A,R0
   \   000015   F583         MOV     DPH,A
   \   000017   E5..         MOV     A,?V0
   \   000019   F0           MOVX    @DPTR,A
   1309          
   1310            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV     ?V2,#0x35
   \   00001D   80..         SJMP    ?Subroutine1
   1311          }
   1312          
   1313          /*********************************************************************
   1314           * @fn          ZDP_MgmtPermitJoinReq
   1315           *
   1316           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1317           *
   1318           * @param       dstAddr - destination address of the message
   1319           * @param       duration - Permit duration
   1320           * @param       TcSignificance - Trust Center Significance
   1321           *
   1322           * @return      afStatus_t
   1323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1324          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1325                                            byte TcSignificance, byte SecurityEnable )
   1326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            // Build buffer
   1330            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000011   E9           MOV     A,R1
   \   000012   12....       LCALL   ?Subroutine23 & 0xFFFF
   1331            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_23:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   1332          
   1333            // Check of this is a broadcast message
   1334            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1335                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1336                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1337                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EE           MOV     A,R6
   \   000018   4F           ORL     A,R7
   \   000019   6068         JZ      ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   7402         MOV     A,#0x2
   \   00002B   68           XRL     A,R0
   \   00002C   6005         JZ      ??ZDP_MgmtPermitJoinReq_1
   \   00002E   740F         MOV     A,#0xf
   \   000030   68           XRL     A,R0
   \   000031   7050         JNZ     ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   68           XRL     A,R0
   \   00003D   7003         JNZ     ??ZDP_MgmtPermitJoinReq_2
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000042   6014         JZ      ??ZDP_MgmtPermitJoinReq_3
   \   000044   74FC         MOV     A,#-0x4
   \   000046   68           XRL     A,R0
   \   000047   7003         JNZ     ??ZDP_MgmtPermitJoinReq_4
   \   000049   74FF         MOV     A,#-0x1
   \   00004B   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00004C   600A         JZ      ??ZDP_MgmtPermitJoinReq_3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   68           XRL     A,R0
   \   000051   7003         JNZ     ??ZDP_MgmtPermitJoinReq_5
   \   000053   74FF         MOV     A,#-0x1
   \   000055   69           XRL     A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000056   702B         JNZ     ??ZDP_MgmtPermitJoinReq_0
   1338            {
   1339              // Send this to our self as well as broadcast to network
   1340              zAddrType_t tmpAddr;
   1341          
   1342              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000058   7408         MOV     A,#0x8
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7402         MOV     A,#0x2
   \   00005F   F0           MOVX    @DPTR,A
   1343              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000063   12....       LCALL   ?Subroutine39 & 0xFFFF
   1344          
   1345              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1346                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??CrossCallReturnLabel_193:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   75..36       MOV     ?V2,#0x36
   \   000069   75..00       MOV     ?V3,#0x0
   \   00006C   78..         MOV     R0,#?V2
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7902         MOV     R1,#0x2
   \   000073   E9           MOV     A,R1
   \   000074   12....       LCALL   ?XSTACK_DISP102_8
   \   000077   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000079   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00007B   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1347            }
   1348          
   1349            // Send the message
   1350            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1351                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..36       MOV     ?V2,#0x36
   \   000086   75..00       MOV     ?V3,#0x0
   \   000089   78..         MOV     R0,#?V2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7902         MOV     R1,#0x2
   \   000090   EE           MOV     A,R6
   \   000091   FC           MOV     R4,A
   \   000092   EF           MOV     A,R7
   \   000093   FD           MOV     R5,A
   \   000094   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000096   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000098   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7409         MOV     A,#0x9
   \   0000A2   02....       LJMP    ??Subroutine93_0 & 0xFFFF
   1352          }
   1353          
   1354          /*********************************************************************
   1355           * @fn          ZDP_MgmtLeaveReq
   1356           *
   1357           * @brief       This builds and send a Mgmt_Leave_req message.
   1358           *
   1359           * @param       dstAddr - destination address of the message
   1360           *              IEEEAddr - IEEE adddress of device that is removed
   1361           *              RemoveChildren - set to 1 to remove the children of the
   1362           *                                device as well. 0 otherwise.
   1363           *              Rejoin - set to 1 if the removed device should rejoin
   1364                                   afterwards. 0 otherwise.
   1365           *
   1366           * @return      afStatus_t
   1367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1368          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1369                           uint8 Rejoin, uint8 SecurityEnable )
   1370          
   1371          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine56 & 0xFFFF
   1372            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1373          
   1374            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_158:
   \   000008   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1375            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   2408         ADD     A,#0x8
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   3400         ADDC    A,#0x0
   \   000016   F9           MOV     R1,A
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   1376          
   1377            if ( RemoveChildren == TRUE )
   \   00001D   04           INC     A
   \   00001E   65..         XRL     A,?V0
   \   000020   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1378            {
   1379              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV     A,#0x40
   \   000024   F0           MOVX    @DPTR,A
   1380            }
   1381            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV     A,#0xc
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   7008         JNZ     ??ZDP_MgmtLeaveReq_1
   1382            {
   1383              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   D2E7         SETB    0xE0 /* A   */.7
   \   000036   F0           MOVX    @DPTR,A
   1384            }
   1385          
   1386            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV     ?V2,#0x34
   \   00003A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1387          }
   1388          
   1389          /*********************************************************************
   1390           * @fn          ZDP_MgmtNwkUpdateReq
   1391           *
   1392           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1393           *              function sends a unicast or broadcast message.
   1394           *
   1395           * @param       dstAddr - destination address of the message
   1396           * @param       ChannelMask - 32 bit address bit map
   1397           * @param       ScanDuration - length of time to spend scanning each channel
   1398           * @param       ScanCount - number of energy scans to be conducted
   1399           * @param       NwkUpdateId - NWk Update Id value
   1400           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1401           *                               bit set in its Node Descriptor
   1402           *
   1403           * @return      afStatus_t
   1404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1405          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1406                                           uint32 ChannelMask,
   1407                                           uint8 ScanDuration,
   1408                                           uint8 ScanCount,
   1409                                           uint8 NwkUpdateId,
   1410                                           uint16 NwkManagerAddr )
   1411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   \   00000B   8C..         MOV     ?V1,R4
   \   00000D   8D..         MOV     ?V2,R5
   1412            uint8 *pBuf = ZDP_TmpBuf;
   1413            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV     ?V3,#0x5
   1414          
   1415            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV     A,#0xe
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00001D   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   8A..         MOV     ?V4,R2
   \   000027   8B..         MOV     ?V5,R3
   \   000029   A8..         MOV     R0,?V4
   \   00002B   A9..         MOV     R1,?V5
   1416          
   1417            *pBuf++ = ScanDuration;
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   E5..         MOV     A,?V0
   \   000033   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1418          
   1419            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_197:
   \   000036   A3           INC     DPTR
   \   000037   AB83         MOV     R3,DPH
   \   000039   C3           CLR     C
   \   00003A   9406         SUBB    A,#0x6
   \   00003C   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1420            {
   1421              // Request is to scan over channelMask
   1422              len += sizeof( uint8 );
   \   00003E   75..06       MOV     ?V3,#0x6
   1423          
   1424              *pBuf++ = ScanCount;
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   E5..         MOV     A,?V1
   \   000047   8031         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1425            }
   1426            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000049   74FE         MOV     A,#-0x2
   \   00004B   65..         XRL     A,?V0
   \   00004D   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   65..         XRL     A,?V0
   \   000053   7026         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1427            {
   1428              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1429              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000055   75..06       MOV     ?V3,#0x6
   1430          
   1431              *pBuf++ = NwkUpdateId;
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   E5..         MOV     A,?V2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   08           INC     R0
   \   000060   EB           MOV     A,R3
   \   000061   F9           MOV     R1,A
   1432          
   1433              if ( ScanDuration == 0xFF )
   \   000062   74FF         MOV     A,#-0x1
   \   000064   65..         XRL     A,?V0
   \   000066   7013         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1434              {
   1435                len += sizeof( uint16 );
   \   000068   75..08       MOV     ?V3,#0x8
   \   00006B   7412         MOV     A,#0x12
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ?Subroutine55 & 0xFFFF
   1436          
   1437                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \                     ??CrossCallReturnLabel_83:
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   1438                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000079   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00007A   F0           MOVX    @DPTR,A
   1439              }
   1440            }
   1441          
   1442            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   00007B                ; Setup parameters for call to function fillAndSend
   \   00007B   75..38       MOV     ?V4,#0x38
   \   00007E   75..00       MOV     ?V5,#0x0
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   A9..         MOV     R1,?V3
   \   000088   EE           MOV     A,R6
   \   000089   FC           MOV     R4,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FD           MOV     R5,A
   \   00008C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00008E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000090   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000093   7402         MOV     A,#0x2
   \   000095                REQUIRE ?Subroutine0
   \   000095                ; // Fall through to label ?Subroutine0
   1443          }
   1444          
   1445          
   1446          /*********************************************************************
   1447           * Network Management Responses
   1448           */
   1449          
   1450          /*********************************************************************
   1451           * @fn          ZDP_MgmtNwkDiscRsp
   1452           *
   1453           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1454           *              function sends a unicast message.
   1455           *
   1456           * @param       dstAddr - destination address of the message
   1457           * @param       Status - message status (ZDP_SUCCESS or other)
   1458           * @param       NetworkCount - Total number of networks found
   1459           * @param       StartIndex - Starting index within the reporting network
   1460           *                           list
   1461           * @param       NetworkListCount - number of network lists included
   1462           *                                 in this message
   1463           * @param       NetworkList - List of network descriptors
   1464           * @param       SecurityEnable - Security Options
   1465           *
   1466           * @return      afStatus_t
   1467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1468          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1469                                      byte Status,
   1470                                      byte NetworkCount,
   1471                                      byte StartIndex,
   1472                                      byte NetworkListCount,
   1473                                      networkDesc_t *NetworkList,
   1474                                      byte SecurityEnable )
   1475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V7,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1476            uint8 *buf;
   1477            uint8 *pBuf;
   1478            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1479            byte idx;
   1480          
   1481            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1482          
   1483            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000022   75F00C       MOV     B,#0xc
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V5,A
   1484          
   1485            buf = osal_mem_alloc( len+1 );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V0,R2
   \   000032   8B..         MOV     ?V1,R3
   1486            if ( buf == NULL )
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V1
   \   000037   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1487            {
   1488              return afStatus_MEM_FAIL;
   \   000039   7910         MOV     R1,#0x10
   \   00003B   02....       LJMP    ??CrossCallReturnLabel_31 & 0xFFFF
   1489            }
   1490          
   1491            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   A3           INC     DPTR
   \   000043   8582..       MOV     ?V8,DPL
   \   000046   8583..       MOV     ?V9,DPH
   1492          
   1493            *pBuf++ = Status;
   \   000049   E5..         MOV     A,?V10
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   1494            *pBuf++ = NetworkCount;
   \   00004D   E5..         MOV     A,?V7
   \   00004F   12....       LCALL   ?Subroutine20 & 0xFFFF
   1495            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_15:
   \   000052   7417         MOV     A,#0x17
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ?Subroutine47 & 0xFFFF
   1496            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_65:
   \   00005A   E5..         MOV     A,?V4
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   0E           INC     R6
   \   00005F   0E           INC     R6
   \   000060   AF83         MOV     R7,DPH
   1497          
   1498            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   000062   75..00       MOV     ?V6,#0x0
   \   000065   7419         MOV     A,#0x19
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00006D   8015         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1499            {
   1500              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1501              pBuf += Z_EXTADDR_LEN;
   1502          
   1503              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1504              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1505              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1506              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1507              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1508          
   1509              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1510              {
   1511                *pBuf++ = TRUE;                         // Permit Joining
   1512              }
   1513              else
   1514              {
   1515                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00006F   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000070   F0           MOVX    @DPTR,A
   \   000071   0E           INC     R6
   \   000072   E9           MOV     A,R1
   \   000073   FF           MOV     R7,A
   1516              }
   1517          
   1518              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000074   E5..         MOV     A,?V2
   \   000076   2414         ADD     A,#0x14
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   35..         ADDC    A,?V3
   \   00007D   F583         MOV     DPH,A
   \   00007F   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000082   05..         INC     ?V6
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000084   E5..         MOV     A,?V6
   \   000086   C3           CLR     C
   \   000087   95..         SUBB    A,?V4
   \   000089   507F         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   00008B                ; Setup parameters for call to function sAddrExtCpy
   \   00008B   E5..         MOV     A,?V2
   \   00008D   240B         ADD     A,#0xb
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   35..         ADDC    A,?V3
   \   000093   FD           MOV     R5,A
   \   000094   EE           MOV     A,R6
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00009B   EE           MOV     A,R6
   \   00009C   2408         ADD     A,#0x8
   \   00009E   FE           MOV     R6,A
   \   00009F   5001         JNC     ??ZDP_MgmtNwkDiscRsp_5
   \   0000A1   0F           INC     R7
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0000A2   85..82       MOV     DPL,?V2
   \   0000A5   85..83       MOV     DPH,?V3
   \   0000A8   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000AB   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000AE   85..82       MOV     DPL,?V2
   \   0000B1   85..83       MOV     DPH,?V3
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000BB   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000BE   85..82       MOV     DPL,?V2
   \   0000C1   85..83       MOV     DPH,?V3
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000CC   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000CF   740F         MOV     A,#0xf
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   08           INC     R0
   \   0000D3   EF           MOV     A,R7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   0E           INC     R6
   \   0000D7   AF83         MOV     R7,DPH
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   740F         MOV     A,#0xf
   \   0000DF   44F0         ORL     A,#0xf0
   \   0000E1   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000E4   A3           INC     DPTR
   \   0000E5   A983         MOV     R1,DPH
   \   0000E7   85..82       MOV     DPL,?V2
   \   0000EA   85..83       MOV     DPH,?V3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   64FE         XRL     A,#0xfe
   \   0000F7   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   7003         JNZ     $+5
   \   000102   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   000105   7401         MOV     A,#0x1
   \   000107   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1519            }
   1520          
   1521            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00010A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00010D   E5..         MOV     A,?V8
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   E5..         MOV     A,?V9
   \   000113   F0           MOVX    @DPTR,A
   \   000114                ; Setup parameters for call to function fillAndSend
   \   000114   75..30       MOV     ?V2,#0x30
   \   000117   75..80       MOV     ?V3,#-0x80
   \   00011A   78..         MOV     R0,#?V2
   \   00011C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011F   A9..         MOV     R1,?V5
   \   000121   AC..         MOV     R4,?V12
   \   000123   AD..         MOV     R5,?V13
   \   000125   7402         MOV     A,#0x2
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00012D   7402         MOV     A,#0x2
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   E9           MOV     A,R1
   \   000133   FE           MOV     R6,A
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   AA..         MOV     R2,?V0
   \   000136   AB..         MOV     R3,?V1
   \   000138   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00013B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00013E                REQUIRE ?Subroutine7
   \   00013E                ; // Fall through to label ?Subroutine7
   1522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F0E         MOV     R7,#0xe
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine96_0
   \   000002                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1523          
   1524          /*********************************************************************
   1525           * @fn          ZDP_MgmtLqiRsp
   1526           *
   1527           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1528           *              function sends a unicast message.
   1529           *
   1530           * @param       dstAddr - destination address of the message
   1531           * @param       Status - message status (ZDP_SUCCESS or other)
   1532           * @param       NeighborLqiEntries - Total number of entries found
   1533           * @param       StartIndex - Starting index within the reporting list
   1534           * @param       NeighborLqiCount - number of lists included
   1535           *                                 in this message
   1536           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1537           *                is the list to be sent, not the entire list
   1538           * @param       SecurityEnable - true if secure
   1539           *
   1540           * @return      ZStatus_t
   1541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1542          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1543                                    byte Status,
   1544                                    byte NeighborLqiEntries,
   1545                                    byte StartIndex,
   1546                                    byte NeighborLqiCount,
   1547                                    ZDP_MgmtLqiItem_t* NeighborList,
   1548                                    byte SecurityEnable )
   1549          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8D..         MOV     ?V14,R5
   1550            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000018   741A         MOV     A,#0x1a
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   1551            uint8 *buf, *pBuf;
   1552            byte len, x;
   1553          
   1554            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1555          
   1556            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_224:
   \   000020   EC           MOV     A,R4
   \   000021   6020         JZ      ??ZDP_MgmtLqiRsp_0
   1557            {
   1558              ZDP_TmpBuf[0] = Status;
   \   000023   12....       LCALL   ?Subroutine42 & 0xFFFF
   1559              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1560            }
   \                     ??CrossCallReturnLabel_173:
   \   000026   EC           MOV     A,R4
   \   000027   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   AC..         MOV     R4,?V12
   \   000031   AD..         MOV     R5,?V13
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP101_8
   \   000038   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   02....       LJMP    ??CrossCallReturnLabel_32 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000043   7419         MOV     A,#0x19
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V5,A
   1561          
   1562            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1563            //  neighbor LQI data.
   1564            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004B   75F016       MOV     B,#0x16
   \   00004E   A4           MUL     AB
   \   00004F   2404         ADD     A,#0x4
   \   000051   F5..         MOV     ?V6,A
   1565          
   1566            buf = osal_mem_alloc( len+1 );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000056   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV     ?V2,R2
   \   00005B   8B..         MOV     ?V3,R3
   1567            if ( buf == NULL )
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V3
   \   000060   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1568            {
   1569              return afStatus_MEM_FAIL;
   \   000062   7910         MOV     R1,#0x10
   \   000064   02....       LJMP    ??CrossCallReturnLabel_32 & 0xFFFF
   1570            }
   1571          
   1572            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   8582..       MOV     ?V8,DPL
   \   00006F   8583..       MOV     ?V9,DPH
   1573          
   1574            *pBuf++ = Status;
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   1575            *pBuf++ = NeighborLqiEntries;
   \   000075   E5..         MOV     A,?V14
   \   000077   12....       LCALL   ?Subroutine20 & 0xFFFF
   1576            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_17:
   \   00007A   7418         MOV     A,#0x18
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?Subroutine47 & 0xFFFF
   1577            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_66:
   \   000082   E5..         MOV     A,?V5
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   0E           INC     R6
   \   000087   0E           INC     R6
   \   000088   AF83         MOV     R7,DPH
   1578          
   1579            for ( x = 0; x < NeighborLqiCount; x++ )
   \   00008A   75..00       MOV     ?V4,#0x0
   \   00008D   807D         SJMP    ??ZDP_MgmtLqiRsp_2
   1580            {
   1581              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   E5..         MOV     A,?V0
   \   000091   2402         ADD     A,#0x2
   \   000093   FC           MOV     R4,A
   \   000094   E4           CLR     A
   \   000095   35..         ADDC    A,?V1
   \   000097   FD           MOV     R5,A
   \   000098   EE           MOV     A,R6
   \   000099   FA           MOV     R2,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1582              pBuf += Z_EXTADDR_LEN;
   1583          
   1584              // EXTADDR
   1585              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   00009F                ; Setup parameters for call to function sAddrExtCpy
   \   00009F   E5..         MOV     A,?V0
   \   0000A1   240A         ADD     A,#0xa
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   35..         ADDC    A,?V1
   \   0000A7   FD           MOV     R5,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   2408         ADD     A,#0x8
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   3F           ADDC    A,R7
   \   0000AE   FB           MOV     R3,A
   \   0000AF   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000B2   8A..         MOV     ?V10,R2
   \   0000B4   8B..         MOV     ?V11,R3
   \   0000B6   AE..         MOV     R6,?V10
   \   0000B8   AF..         MOV     R7,?V11
   1586          
   1587              // NWKADDR
   1588              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000BA   E5..         MOV     A,?V0
   \   0000BC   2412         ADD     A,#0x12
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E4           CLR     A
   \   0000C0   35..         ADDC    A,?V1
   \   0000C2   12....       LCALL   ?Subroutine14 & 0xFFFF
   1589              *pBuf++ = HI_UINT16( list->nwkAddr );
   1590          
   1591              // DEVICETYPE
   1592              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_8:
   \   0000C5   E5..         MOV     A,?V0
   \   0000C7   2414         ADD     A,#0x14
   \   0000C9   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000CC   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000CF   F0           MOVX    @DPTR,A
   1593          
   1594              // RXONIDLE
   1595              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0000D0   E5..         MOV     A,?V0
   \   0000D2   2415         ADD     A,#0x15
   \   0000D4   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   33           RLC     A
   \   0000D9   33           RLC     A
   \   0000DA   54FC         ANL     A,#0xfc
   \   0000DC   F8           MOV     R0,A
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   48           ORL     A,R0
   \   0000E3   12....       LCALL   ?Subroutine36 & 0xFFFF
   1596          
   1597              // RELATIONSHIP
   1598              *pBuf++ |= (uint8)(list->relation << 4);
   \                     ??CrossCallReturnLabel_50:
   \   0000E6   E5..         MOV     A,?V0
   \   0000E8   2416         ADD     A,#0x16
   \   0000EA   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000ED   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000F0   F0           MOVX    @DPTR,A
   1599          
   1600              // PERMITJOINING
   1601              *pBuf++ = (uint8)(list->permit);
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   2417         ADD     A,#0x17
   \   0000F5   12....       LCALL   ?Subroutine27 & 0xFFFF
   1602          
   1603              // DEPTH
   1604              *pBuf++ = list->depth;
   1605          
   1606              // LQI
   1607              *pBuf++ = list->lqi;
   1608          
   1609              list++; // next list entry
   1610            }
   \                     ??CrossCallReturnLabel_28:
   \   0000F8   2418         ADD     A,#0x18
   \   0000FA   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000FD   2419         ADD     A,#0x19
   \   0000FF   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000102   241A         ADD     A,#0x1a
   \   000104   F5..         MOV     ?V0,A
   \   000106   5002         JNC     ??ZDP_MgmtLqiRsp_4
   \   000108   05..         INC     ?V1
   \                     ??ZDP_MgmtLqiRsp_4:
   \   00010A   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00010C   E5..         MOV     A,?V4
   \   00010E   C3           CLR     C
   \   00010F   95..         SUBB    A,?V5
   \   000111   5003         JNC     $+5
   \   000113   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1611          
   1612            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000116   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000119   E5..         MOV     A,?V8
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E5..         MOV     A,?V9
   \   00011F   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   A9..         MOV     R1,?V6
   \   000127   AC..         MOV     R4,?V12
   \   000129   AD..         MOV     R5,?V13
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?XSTACK_DISP101_8
   \   000130   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000133   7402         MOV     A,#0x2
   \   000135   12....       LCALL   ?DEALLOC_XSTACK8
   \   000138   E9           MOV     A,R1
   \   000139   FE           MOV     R6,A
   \   00013A                ; Setup parameters for call to function osal_mem_free
   \   00013A   AA..         MOV     R2,?V2
   \   00013C   AB..         MOV     R3,?V3
   \   00013E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000141   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000144   7401         MOV     A,#0x1
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   \   000149   7F0F         MOV     R7,#0xf
   \   00014B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1613          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0,#0x31
   \   000004   75..80       MOV     ?V1,#-0x80
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000006   E5..         MOV     A,?V0
   \   000008   22           RET
   1614          
   1615          /*********************************************************************
   1616           * @fn          ZDP_MgmtRtgRsp
   1617           *
   1618           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1619           *              function sends a unicast message.
   1620           *
   1621           * @param       dstAddr - destination address of the message
   1622           * @param       Status - message status (ZDP_SUCCESS or other)
   1623           * @param       RoutingTableEntries - Total number of entries
   1624           * @param       StartIndex - Starting index within the reporting list
   1625           * @param       RoutingTableListCount - number of entries included
   1626           *                                      in this message
   1627           * @param       RoutingTableList - List of Routing Table entries
   1628           * @param       SecurityEnable - true to enable security for this message
   1629           *
   1630           * @return      ZStatus_t
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1633                                      byte Status,
   1634                                      byte RoutingTableEntries,
   1635                                      byte StartIndex,
   1636                                      byte RoutingListCount,
   1637                                      rtgItem_t *RoutingTableList,
   1638                                      byte SecurityEnable )
   1639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   8C..         MOV     ?V1,R4
   \   000018   8D..         MOV     ?V0,R5
   \   00001A   7416         MOV     A,#0x16
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V5,A
   1640            uint8 *buf;
   1641            uint8 *pBuf;
   1642            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1643            byte len = 1 + 1 + 1 + 1;
   1644            byte x;
   1645          
   1646            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1647          
   1648            // Add an array for Routing List data
   1649            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000022   75F005       MOV     B,#0x5
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   F5..         MOV     ?V4,A
   1650          
   1651            buf = osal_mem_alloc( (short)(len+1) );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00002D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV     ?V6,R2
   \   000032   8B..         MOV     ?V7,R3
   \   000034   AE..         MOV     R6,?V6
   \   000036   AF..         MOV     R7,?V7
   1652            if ( buf == NULL )
   \   000038   EE           MOV     A,R6
   \   000039   4F           ORL     A,R7
   \   00003A   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1653            {
   1654              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV     R1,#0x10
   \   00003E   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1655            }
   1656          
   1657            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   1658          
   1659            *pBuf++ = Status;
   \   00004A   E5..         MOV     A,?V1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   1660            *pBuf++ = RoutingTableEntries;
   \   00004E   E5..         MOV     A,?V0
   \   000050   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1661            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_198:
   \   000053   7415         MOV     A,#0x15
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00005B   A3           INC     DPTR
   1662            *pBuf++ = RoutingListCount;
   \   00005C   E5..         MOV     A,?V5
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   08           INC     R0
   \   000061   08           INC     R0
   \   000062   A983         MOV     R1,DPH
   1663          
   1664            for ( x = 0; x < RoutingListCount; x++ )
   \   000064   75..00       MOV     ?V6,#0x0
   \   000067   7417         MOV     A,#0x17
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00006F   8074         SJMP    ??ZDP_MgmtRtgRsp_2
   1665            {
   1666              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   12....       LCALL   ??Subroutine99_0 & 0xFFFF
   1667              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_202:
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   12....       LCALL   ?Subroutine9 & 0xFFFF
   1668          
   1669              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_2:
   \   00007F   5407         ANL     A,#0x7
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   F0           MOVX    @DPTR,A
   1670              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000086   EC           MOV     A,R4
   \   000087   2406         ADD     A,#0x6
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3D           ADDC    A,R5
   \   00008D   F583         MOV     DPH,A
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   5418         ANL     A,#0x18
   \   000092   6027         JZ      ??ZDP_MgmtRtgRsp_4
   1671              {
   1672                uint8 options = 0;
   1673                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000094   75..02       MOV     ?V7,#0x2
   1674          
   1675                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000097   E0           MOVX    A,@DPTR
   \   000098   A2E2         MOV     C,0xE0 /* A   */.2
   \   00009A   5003         JNC     ??ZDP_MgmtRtgRsp_5
   1676                {
   1677                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   00009C   75..06       MOV     ?V7,#0x6
   1678                }
   1679          
   1680                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   00009F   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A1   5007         JNC     ??ZDP_MgmtRtgRsp_6
   1681                {
   1682                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A3   D3           SETB    C
   \   0000A4   E5..         MOV     A,?V7
   \   0000A6   D2E0         SETB    0xE0 /* A   */.0
   \   0000A8   F5..         MOV     ?V7,A
   1683                }
   1684          
   1685                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000AA   E5..         MOV     A,?V7
   \   0000AC   33           RLC     A
   \   0000AD   33           RLC     A
   \   0000AE   33           RLC     A
   \   0000AF   54F8         ANL     A,#0xf8
   \   0000B1   F5..         MOV     ?V7,A
   \   0000B3   8882         MOV     DPL,R0
   \   0000B5   8983         MOV     DPH,R1
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   45..         ORL     A,?V7
   \   0000BA   F0           MOVX    @DPTR,A
   1686              }
   1687              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   0000BB   8882         MOV     DPL,R0
   \   0000BD   8983         MOV     DPH,R1
   \   0000BF   A3           INC     DPTR
   \   0000C0   08           INC     R0
   \   0000C1   A983         MOV     R1,DPH
   1688          
   1689              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000C3   EC           MOV     A,R4
   \   0000C4   2402         ADD     A,#0x2
   \   0000C6   F5..         MOV     ?V8,A
   \   0000C8   E4           CLR     A
   \   0000C9   3D           ADDC    A,R5
   \   0000CA   F5..         MOV     ?V9,A
   \   0000CC   85..82       MOV     DPL,?V8
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   1690              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_135:
   \   0000D4   85..82       MOV     DPL,?V8
   \   0000D7   85..83       MOV     DPH,?V9
   \   0000DA   12....       LCALL   ?Subroutine19 & 0xFFFF
   1691              RoutingTableList++;    // Move to next list entry
   1692            }
   \                     ??CrossCallReturnLabel_140:
   \   0000DD   2407         ADD     A,#0x7
   \   0000DF   FC           MOV     R4,A
   \   0000E0   5001         JNC     ??ZDP_MgmtRtgRsp_7
   \   0000E2   0D           INC     R5
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000E3   05..         INC     ?V6
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000E5   E5..         MOV     A,?V6
   \   0000E7   C3           CLR     C
   \   0000E8   95..         SUBB    A,?V5
   \   0000EA   4085         JC      ??ZDP_MgmtRtgRsp_3
   1693          
   1694            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000EC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EF   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000F2                ; Setup parameters for call to function fillAndSend
   \   0000F2   75..32       MOV     ?V6,#0x32
   \   0000F5   75..80       MOV     ?V7,#-0x80
   \   0000F8   78..         MOV     R0,#?V6
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   A9..         MOV     R1,?V4
   \   0000FF   AC..         MOV     R4,?V2
   \   000101   AD..         MOV     R5,?V3
   \   000103   7402         MOV     A,#0x2
   \   000105   12....       LCALL   ?XSTACK_DISP101_8
   \   000108   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   00010B   7402         MOV     A,#0x2
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   E9           MOV     A,R1
   \   000111   F5..         MOV     ?V2,A
   \   000113                ; Setup parameters for call to function osal_mem_free
   \   000113   EE           MOV     A,R6
   \   000114   FA           MOV     R2,A
   \   000115   EF           MOV     A,R7
   \   000116   FB           MOV     R3,A
   \   000117   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00011A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00011D   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000126   7401         MOV     A,#0x1
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012B   02....       LJMP    ?Subroutine4 & 0xFFFF
   1695          }
   1696          
   1697          /*********************************************************************
   1698           * @fn          ZDP_MgmtBindRsp
   1699           *
   1700           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1701           *              function sends a unicast message.
   1702           *
   1703           * @param       dstAddr - destination address of the message
   1704           * @param       Status - message status (ZDP_SUCCESS or other)
   1705           * @param       BindingTableEntries - Total number of entries
   1706           * @param       StartIndex - Starting index within the reporting list
   1707           * @param       BindingTableListCount - number of entries included
   1708           *                                 in this message
   1709           * @param       BindingTableList - List of Binding Table entries
   1710           * @param       SecurityEnable - Security Options
   1711           *
   1712           * @return      ZStatus_t
   1713           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1714          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1715                                      byte Status,
   1716                                      byte BindingTableEntries,
   1717                                      byte StartIndex,
   1718                                      byte BindingTableListCount,
   1719                                      apsBindingItem_t *BindingTableList,
   1720                                      byte SecurityEnable )
   1721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V12,R2
   \   000014   8B..         MOV     ?V13,R3
   \   000016   8C..         MOV     ?V10,R4
   \   000018   8D..         MOV     ?V5,R5
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   1722            uint8 *buf;
   1723            uint8 *pBuf;
   1724            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1725            uint8 len;    // Actual length varies due to different addrMode
   1726            uint8 x;
   1727            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1728            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1729          
   1730            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1731          
   1732            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1733            maxLen = 1 + 1 + 1 + 1;
   1734            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1735            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   75F015       MOV     B,#0x15
   \   000025   A4           MUL     AB
   \   000026   2404         ADD     A,#0x4
   \   000028   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00002B   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   1736          
   1737            if ( buf == NULL )
   \   000032   EA           MOV     A,R2
   \   000033   45..         ORL     A,?V3
   \   000035   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1738            {
   1739              return afStatus_MEM_FAIL;
   \   000037   7910         MOV     R1,#0x10
   \   000039   02....       LJMP    ??CrossCallReturnLabel_33 & 0xFFFF
   1740            }
   1741          
   1742            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   8582..       MOV     ?V6,DPL
   \   000044   8583..       MOV     ?V7,DPH
   1743          
   1744            *pBuf++ = Status;
   \   000047   E5..         MOV     A,?V10
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   1745            *pBuf++ = BindingTableEntries;
   \   00004B   E5..         MOV     A,?V5
   \   00004D   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1746            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_214:
   \   000050   7417         MOV     A,#0x17
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ?Subroutine48 & 0xFFFF
   1747            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_67:
   \   000058   E5..         MOV     A,?V4
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   0A           INC     R2
   \   00005D   0A           INC     R2
   \   00005E   AB83         MOV     R3,DPH
   1748          
   1749            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1750            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1751            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1752            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1753          
   1754            len = 1 + 1 + 1 + 1;
   \   000060   75..04       MOV     ?V0,#0x4
   1755            for ( x = 0; x < BindingTableListCount; x++ )
   \   000063   75..00       MOV     ?V1,#0x0
   \   000066   7419         MOV     A,#0x19
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00006E   8021         SJMP    ??ZDP_MgmtBindRsp_1
   1756            {
   1757              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1758              *pBuf++ = BindingTableList->srcEP;
   1759          
   1760              // Cluster ID
   1761              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1762              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1763          
   1764              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1765              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1766              {
   1767                len += extZdpBindEntrySize;
   1768                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1769                *pBuf++ = BindingTableList->dstEP;
   1770              }
   1771              else
   1772              {
   1773                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000070   740E         MOV     A,#0xe
   \   000072   25..         ADD     A,?V0
   \   000074   F5..         MOV     ?V0,A
   1774                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1775                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_181:
   \   00007D   8C82         MOV     DPL,R4
   \   00007F   8D83         MOV     DPH,R5
   \   000081   A3           INC     DPTR
   \   000082   12....       LCALL   ?Subroutine48 & 0xFFFF
   1776              }
   \                     ??CrossCallReturnLabel_68:
   \   000085   0A           INC     R2
   \                     ??ZDP_MgmtBindRsp_3:
   \   000086   AB83         MOV     R3,DPH
   1777              BindingTableList++;    // Move to next list entry
   \   000088   EE           MOV     A,R6
   \   000089   2415         ADD     A,#0x15
   \   00008B   FE           MOV     R6,A
   \   00008C   5001         JNC     ??ZDP_MgmtBindRsp_4
   \   00008E   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_4:
   \   00008F   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000091   E5..         MOV     A,?V1
   \   000093   C3           CLR     C
   \   000094   95..         SUBB    A,?V4
   \   000096   505A         JNC     ??ZDP_MgmtBindRsp_5
   \   000098                ; Setup parameters for call to function sAddrExtCpy
   \   000098   EE           MOV     A,R6
   \   000099   FC           MOV     R4,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FD           MOV     R5,A
   \   00009C   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2409         ADD     A,#0x9
   \   0000B1   F8           MOV     R0,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000BB   EE           MOV     A,R6
   \   0000BC   2413         ADD     A,#0x13
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F9           MOV     R1,A
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000C9   EE           MOV     A,R6
   \   0000CA   240B         ADD     A,#0xb
   \   0000CC   FC           MOV     R4,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   FD           MOV     R5,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6403         XRL     A,#0x3
   \   0000D7   7097         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000D9   7415         MOV     A,#0x15
   \   0000DB   25..         ADD     A,?V0
   \   0000DD   F5..         MOV     ?V0,A
   \   0000DF                ; Setup parameters for call to function sAddrExtCpy
   \   0000DF   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2414         ADD     A,#0x14
   \   0000E5   F582         MOV     DPL,A
   \   0000E7   E4           CLR     A
   \   0000E8   3F           ADDC    A,R7
   \   0000E9   F583         MOV     DPH,A
   \   0000EB   12....       LCALL   ?Subroutine48 & 0xFFFF
   1778            }
   \                     ??CrossCallReturnLabel_69:
   \   0000EE   AA82         MOV     R2,DPL
   \   0000F0   8094         SJMP    ??ZDP_MgmtBindRsp_3
   1779          
   1780            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_5:
   \   0000F2   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000F5   E5..         MOV     A,?V6
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E5..         MOV     A,?V7
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC                ; Setup parameters for call to function fillAndSend
   \   0000FC   75..33       MOV     ?V6,#0x33
   \   0000FF   75..80       MOV     ?V7,#-0x80
   \   000102   78..         MOV     R0,#?V6
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   A9..         MOV     R1,?V0
   \   000109   AC..         MOV     R4,?V12
   \   00010B   AD..         MOV     R5,?V13
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?XSTACK_DISP101_8
   \   000112   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   000115   7402         MOV     A,#0x2
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   E9           MOV     A,R1
   \   00011B   FE           MOV     R6,A
   \   00011C                ; Setup parameters for call to function osal_mem_free
   \   00011C   AA..         MOV     R2,?V2
   \   00011E   AB..         MOV     R3,?V3
   \   000120   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000123   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000126   02....       LJMP    ?Subroutine7 & 0xFFFF
   1781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   1782          
   1783          /*********************************************************************
   1784           * @fn          ZDP_MgmtNwkUpdateNotify
   1785           *
   1786           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1787           *              function sends a unicast message.
   1788           *
   1789           * @param       dstAddr - destination address of the message
   1790           * @param       status - message status (ZDP_SUCCESS or other)
   1791           * @param       scannedChannels - List of channels scanned by the request
   1792           * @param       totalTransmissions - Total transmissions
   1793           * @param       transmissionFailures - Sum of transmission failures
   1794           * @param       listCount - Number of records contained in the energyValues list
   1795           * @param       energyValues - List of descriptors, one for each of ListCount,
   1796           *                             of the enegry detect descriptors
   1797           * @param       txOptions - Transmit options
   1798           * @param       securityEnable - Security options
   1799           *
   1800           * @return      afStatus_t
   1801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1802          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1803                                              uint8 status, uint32 scannedChannels,
   1804                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1805                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1806                                              uint8 securityEnable )
   1807          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V8,R2
   \   000014   8B..         MOV     ?V9,R3
   \   000016   8C..         MOV     ?V7,R4
   \   000018   8D..         MOV     ?V0,R5
   1808            uint8 *buf;
   1809            uint8 *pBuf;
   1810            uint8 len;
   1811          
   1812            (void)securityEnable;  // Intentionally unreferenced parameter
   1813          
   1814            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1815            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V1,A
   1816          
   1817            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000022   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V2,R2
   \   000027   8B..         MOV     ?V3,R3
   \   000029   AE..         MOV     R6,?V2
   \   00002B   AF..         MOV     R7,?V3
   1818            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1819            {
   1820              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1821            }
   1822          
   1823            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   8582..       MOV     ?V2,DPL
   \   00003E   8583..       MOV     ?V3,DPH
   1824          
   1825            *pBuf++ = status;
   \   000041   E5..         MOV     A,?V7
   \   000043   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1826          
   1827            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_215:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7417         MOV     A,#0x17
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine50 & 0xFFFF
   1828          
   1829            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_72:
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   1830            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000060   E9           MOV     A,R1
   \   000061   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000064   7419         MOV     A,#0x19
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine50 & 0xFFFF
   1831          
   1832            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_73:
   \   00006C   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   1833            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_123:
   \   00006F   A3           INC     DPTR
   1834          
   1835            *pBuf++ = listCount;
   \   000070   E5..         MOV     A,?V0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   0A           INC     R2
   \   000075   0A           INC     R2
   \   000076   0A           INC     R2
   \   000077   AB83         MOV     R3,DPH
   1836          
   1837            if ( listCount > 0 )
   \   000079   6017         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1838              osal_memcpy( pBuf, energyValues, listCount );
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   741B         MOV     A,#0x1b
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000086   AC..         MOV     R4,?V0
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   1839          
   1840            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000092   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000095   E5..         MOV     A,?V2
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   E5..         MOV     A,?V3
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   741D         MOV     A,#0x1d
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6                ; Setup parameters for call to function fillAndSend
   \   0000A6   75..38       MOV     ?V2,#0x38
   \   0000A9   75..80       MOV     ?V3,#-0x80
   \   0000AC   78..         MOV     R0,#?V2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   A9..         MOV     R1,?V1
   \   0000B3   AC..         MOV     R4,?V8
   \   0000B5   AD..         MOV     R5,?V9
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000BC   12....       LCALL   ??fillAndSend?relay  ; Banked call to: fillAndSend
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
   \   0000C5   F5..         MOV     ?V1,A
   \   0000C7                ; Setup parameters for call to function osal_mem_free
   \   0000C7   EE           MOV     A,R6
   \   0000C8   FA           MOV     R2,A
   \   0000C9   EF           MOV     A,R7
   \   0000CA   FB           MOV     R3,A
   \   0000CB   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000CE   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D1   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000DB   E4           CLR     A
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000DF   02....       LJMP    ?Subroutine5 & 0xFFFF
   1841          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET
   1842          
   1843          /*********************************************************************
   1844           * Functions to register for ZDO Over-the-air messages
   1845           */
   1846          
   1847          /*********************************************************************
   1848           * @fn          ZDO_RegisterForZDOMsg
   1849           *
   1850           * @brief       Call this function to register of an incoming over
   1851           *              the air ZDO message - probably a response message
   1852           *              but requests can also be received.
   1853           *              Messages are delivered to the task with ZDO_CB_MSG
   1854           *              as the message ID.
   1855           *
   1856           * @param       taskID - Where you would like the message delivered
   1857           * @param       clusterID - What message?
   1858           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1859           *                          and device announce
   1860           *
   1861           * @return      ZSuccess - successful, ZMemError if not
   1862           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1863          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1864          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1865            ZDO_MsgCB_t *pList;
   1866            ZDO_MsgCB_t *pLast;
   1867            ZDO_MsgCB_t *pNew;
   1868          
   1869            // Look for duplicate
   1870            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_247
   1871            while ( pList )
   1872            {
   1873              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6053         JZ      ??CrossCallReturnLabel_125
   1874                return ( ZSuccess );
   1875              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1876              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1877            }
   \                     ??CrossCallReturnLabel_247:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1878          
   1879            // Add to the list
   1880            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1881            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6034         JZ      ??ZDO_RegisterForZDOMsg_3
   1882            {
   1883              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ?Subroutine32 & 0xFFFF
   1884              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_40:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E5..         MOV     A,?V0
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V1
   \   00006A   12....       LCALL   ?Subroutine32 & 0xFFFF
   1885              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_41:
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   1886              if ( zdoMsgCBs )
   \   000071   90....       MOV     DPTR,#zdoMsgCBs
   \   000074   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000077   4B           ORL     A,R3
   \   000078   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1887              {
   1888                pLast->next = pNew;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1889              }
   1890              else
   1891                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000080   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000083   12....       LCALL   ?Subroutine31 & 0xFFFF
   1892              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_125:
   \   000086   7900         MOV     R1,#0x0
   \   000088   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1893            }
   1894            else
   1895              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00008A   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008C   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1896          }
   1897          
   1898          /*********************************************************************
   1899           * @fn          ZDO_RemoveRegisteredCB
   1900           *
   1901           * @brief       Call this function if you don't want to receive the
   1902           *              incoming message.
   1903           *
   1904           * @param       taskID - Where the messages are being delivered.
   1905           * @param       clusterID - What message?
   1906           *
   1907           * @return      ZSuccess - successful, ZFailure if not found
   1908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1909          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1910          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1911            ZDO_MsgCB_t *pList;
   1912            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1913          
   1914            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1915            while ( pList )
   1916            {
   1917              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1918              {
   1919                if ( pLast )
   1920                {
   1921                  // remove this one from the linked list
   1922                  pLast->next = pList->next;
   1923                }
   1924                else if ( pList->next )
   1925                {
   1926                  // remove the first one from the linked list
   1927                  zdoMsgCBs = pList->next;
   1928                }
   1929                else
   1930                {
   1931                  // remove the only item from the list
   1932                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1933                }
   1934                osal_mem_free( pList );
   1935                return ( ZSuccess );
   1936              }
   1937              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1938              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00001B   49           ORL     A,R1
   \   00001C   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV     A,R2
   \   00004A   4B           ORL     A,R3
   \   00004B   90....       MOV     DPTR,#zdoMsgCBs
   \   00004E   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV     A,R2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EB           MOV     A,R3
   \   000054   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000061   7900         MOV     R1,#0x0
   \   000063   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1939            }
   1940          
   1941            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP    ?Subroutine6 & 0xFFFF
   1942          }
   1943          
   1944          /*********************************************************************
   1945           * @fn          ZDO_SendMsgCBs
   1946           *
   1947           * @brief       This function sends messages to registered tasks.
   1948           *              Local to ZDO and shouldn't be called outside of ZDO.
   1949           *
   1950           * @param       inMsg - incoming message
   1951           *
   1952           * @return      TRUE if sent to at least 1 task, FALSE if not
   1953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1954          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   1956            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V4,#0x0
   1957            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   35..         ADDC    A,?V3
   \   00001A   F5..         MOV     ?V9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_226 & 0xFFFF
   1958            while ( pList )
   1959            {
   1960              if ( (pList->clusterID == inMsg->clusterID)
   1961                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1962                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   E5..         MOV     A,?V2
   \   000021   240C         ADD     A,#0xc
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   35..         ADDC    A,?V3
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000039   E8           MOV     A,R0
   \   00003A   6A           XRL     A,R2
   \   00003B   7002         JNZ     ??ZDO_SendMsgCBs_1
   \   00003D   E9           MOV     A,R1
   \   00003E   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003F   601B         JZ      ??ZDO_SendMsgCBs_2
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6A           XRL     A,R2
   \   000044   7003         JNZ     ??ZDO_SendMsgCBs_3
   \   000046   74FF         MOV     A,#-0x1
   \   000048   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004E   E9           MOV     A,R1
   \   00004F   5480         ANL     A,#0x80
   \   000051   7009         JNZ     ??ZDO_SendMsgCBs_2
   \   000053   7413         MOV     A,#0x13
   \   000055   68           XRL     A,R0
   \   000056   49           ORL     A,R1
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   1963              {
   1964                zdoIncomingMsg_t *msgPtr;
   1965          
   1966                // Send the address to the task
   1967                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005C                ; Setup parameters for call to function osal_msg_allocate
   \   00005C   85..82       MOV     DPL,?V8
   \   00005F   85..83       MOV     DPH,?V9
   \   000062   E0           MOVX    A,@DPTR
   \   000063   2417         ADD     A,#0x17
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   3400         ADDC    A,#0x0
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   00006D   8A..         MOV     ?V6,R2
   \   00006F   8B..         MOV     ?V7,R3
   \   000071   AE..         MOV     R6,?V6
   \   000073   AF..         MOV     R7,?V7
   1968                if ( msgPtr )
   \   000075   EE           MOV     A,R6
   \   000076   4F           ORL     A,R7
   \   000077   607A         JZ      ??ZDO_SendMsgCBs_4
   1969                {
   1970                  // copy struct
   1971                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   85....       MOV     ?V4,?V2
   \   00007C   85....       MOV     ?V5,?V3
   \   00007F   75..00       MOV     ?V6,#0x0
   \   000082   78..         MOV     R0,#?V4
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C17         MOV     R4,#0x17
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   1972          
   1973                  if ( inMsg->asduLen )
   \   000093   85..82       MOV     DPL,?V8
   \   000096   85..83       MOV     DPH,?V9
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   603C         JZ      ??ZDO_SendMsgCBs_5
   1974                  {
   1975                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009C   EE           MOV     A,R6
   \   00009D   2417         ADD     A,#0x17
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2413         ADD     A,#0x13
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   1976                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_191:
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   2413         ADD     A,#0x13
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E4           CLR     A
   \   0000B6   35..         ADDC    A,?V3
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V4,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F5..         MOV     ?V5,A
   \   0000C1   78..         MOV     R0,#?V4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C6   85..82       MOV     DPL,?V8
   \   0000C9   85..83       MOV     DPH,?V9
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FC           MOV     R4,A
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   1977                  }
   1978          
   1979                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   74D3         MOV     A,#-0x2d
   \   0000DE   F0           MOVX    @DPTR,A
   1980                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000DF                ; Setup parameters for call to function osal_msg_send
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FB           MOV     R3,A
   \   0000E3   85..82       MOV     DPL,?V0
   \   0000E6   85..83       MOV     DPH,?V1
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F9           MOV     R1,A
   \   0000ED   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   1981                  ret = TRUE;
   \   0000F0   75..01       MOV     ?V4,#0x1
   1982                }
   1983              }
   1984              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000F3   85..82       MOV     DPL,?V0
   \   0000F6   85..83       MOV     DPH,?V1
   \   0000F9   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   1985            }
   \                     ??CrossCallReturnLabel_226:
   \   0000FC   E5..         MOV     A,?V0
   \   0000FE   45..         ORL     A,?V1
   \   000100   6003         JZ      $+5
   \   000102   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1986            return ( ret );
   \   000105   A9..         MOV     R1,?V4
   \   000107   02....       LJMP    ??Subroutine90_0 & 0xFFFF
   1987          }
   1988          
   1989          /*********************************************************************
   1990           * Incoming message processor
   1991           */
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDP_IncomingData
   1995           *
   1996           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1997           *              from the APS sub-layer to the ZDO.
   1998           *
   1999           * @param       pData - Incoming Message
   2000           *
   2001           * @return      none
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2005            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   2006            uint8 handled;
   2007            zdoIncomingMsg_t inMsg;
   2008          
   2009            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine38 & 0xFFFF
   2010            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_53:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine31 & 0xFFFF
   2011            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_126:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine38 & 0xFFFF
   2012            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_54:
   \   000039   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine31 & 0xFFFF
   2013            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_127:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   E4           CLR     A
   \   00004A   3B           ADDC    A,R3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C0E0         PUSH    A
   \   000050   740E         MOV     A,#0xe
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   F0           MOVX    @DPTR,A
   2014          
   2015            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV     A,R2
   \   000059   2420         ADD     A,#0x20
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   C0E0         PUSH    A
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   2016            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV     A,R2
   \   00006E   2422         ADD     A,#0x22
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F9           MOV     R1,A
   \   000074   8882         MOV     DPL,R0
   \   000076   8983         MOV     DPH,R1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   2401         ADD     A,#0x1
   \   00007B   FC           MOV     R4,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7413         MOV     A,#0x13
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EC           MOV     A,R4
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   ED           MOV     A,R5
   \   00008A   12....       LCALL   ?Subroutine32 & 0xFFFF
   2017            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_42:
   \   00008D   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   740F         MOV     A,#0xf
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   2018            inMsg.macDestAddr = pData->macDestAddr;
   \   00009B   EA           MOV     A,R2
   \   00009C   2412         ADD     A,#0x12
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3B           ADDC    A,R3
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000A7   7411         MOV     A,#0x11
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine31 & 0xFFFF
   2019            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_128:
   \   0000AF   EA           MOV     A,R2
   \   0000B0   2424         ADD     A,#0x24
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   3B           ADDC    A,R3
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000BB   7415         MOV     A,#0x15
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine31 & 0xFFFF
   2020          
   2021            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_129:
   \   0000C3                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C3   AA..         MOV     R2,?XSP + 0
   \   0000C5   AB..         MOV     R3,?XSP + 1
   \   0000C7   12....       LCALL   ??ZDO_SendMsgCBs?relay; Banked call to: ZDO_SendMsgCBs
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FC           MOV     R4,A
   \   0000CC   8001         SJMP    ??ZDP_IncomingData_0
   2022          
   2023          #if (defined MT_ZDO_CB_FUNC)
   2024          #if !defined MT_TASK
   2025            if (zgZdoDirectCB)
   2026          #endif
   2027            {
   2028              MT_ZdoDirectCB( pData, &inMsg );
   2029            }
   2030          #endif
   2031          
   2032            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2033            {
   2034              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2035              {
   2036                zdpMsgProcs[x].pFn( &inMsg );
   2037                return;
   2038              }
   2039              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CE   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000CF   8E..         MOV     ?V0,R6
   \   0000D1   75..00       MOV     ?V1,#0x0
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?S_SHL
   \   0000DB   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000DD   25..         ADD     A,?V0
   \   0000DF   F8           MOV     R0,A
   \   0000E0   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   E4           CLR     A
   \   0000EA   93           MOVC    A,@A+DPTR
   \   0000EB   C0E0         PUSH    A
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   93           MOVC    A,@A+DPTR
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   D082         POP     DPL
   \   0000F4   AA82         MOV     R2,DPL
   \   0000F6   AB83         MOV     R3,DPH
   \   0000F8   74FF         MOV     A,#-0x1
   \   0000FA   6A           XRL     A,R2
   \   0000FB   7003         JNZ     ??ZDP_IncomingData_2
   \   0000FD   74FF         MOV     A,#-0x1
   \   0000FF   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000100   6028         JZ      ??ZDP_IncomingData_3
   \   000102   740C         MOV     A,#0xc
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   6A           XRL     A,R2
   \   000109   7003         JNZ     ??ZDP_IncomingData_4
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   00010E   70BE         JNZ     ??ZDP_IncomingData_1
   \   000110                ; Setup parameters for indirect call
   \   000110   AA..         MOV     R2,?XSP + 0
   \   000112   AB..         MOV     R3,?XSP + 1
   \   000114   8882         MOV     DPL,R0
   \   000116   8983         MOV     DPH,R1
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   E4           CLR     A
   \   00011B   93           MOVC    A,@A+DPTR
   \   00011C   C0E0         PUSH    A
   \   00011E   7401         MOV     A,#0x1
   \   000120   93           MOVC    A,@A+DPTR
   \   000121   F583         MOV     DPH,A
   \   000123   D082         POP     DPL
   \   000125   12....       LCALL   ?CALL_IND
   \   000128   800A         SJMP    ??ZDP_IncomingData_5
   2040            }
   2041          
   2042            // Handle unhandled messages
   2043            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012A   EC           MOV     A,R4
   \   00012B   7007         JNZ     ??ZDP_IncomingData_5
   2044              ZDApp_InMsgCB( &inMsg );
   \   00012D                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012D   AA..         MOV     R2,?XSP + 0
   \   00012F   AB..         MOV     R3,?XSP + 1
   \   000131   12....       LCALL   ??ZDApp_InMsgCB?relay; Banked call to: ZDApp_InMsgCB
   2045          }
   \                     ??ZDP_IncomingData_5:
   \   000134   7417         MOV     A,#0x17
   \   000136   02....       LJMP    ??Subroutine80_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ParentAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2046          
   2047          /*********************************************************************
   2048          *********************************************************************/
   2049          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     21   -> osal_memcpy
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     31   ZDP_MgmtLqiRsp
        0     26   -> fillAndSend
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     30   ZDP_MgmtNwkDiscRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     28   ZDP_MgmtRtgRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     25   ZDP_NwkAddrReq
        0     25   -> fillAndSend
        0     23   -> sAddrExtCmp
        0     23   -> sAddrExtCpy
      1     29   ZDP_ParentAnnce
        0     22   -> fillAndSend
        0     24   -> osal_buffer_uint32
        0     20   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     22   ZDP_SimpleDescMsg
        0     22   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     61   fillAndSend
        0     35   -> AF_DataRequest
        0     26   -> osal_memset
      1     17   zdpProcessAddrReq
        0     17   -> fillAndSend
        0     15   -> sAddrExtCmp
        0     15   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       4  ??Subroutine100_0
       7  ??Subroutine101_0
       6  ??Subroutine102_0
       4  ??Subroutine103_0
       7  ??Subroutine104_0
       3  ??Subroutine105_0
       8  ??Subroutine106_0
       1  ??Subroutine107_0
       3  ??Subroutine108_0
       4  ??Subroutine109_0
       5  ??Subroutine110_0
       5  ??Subroutine78_0
       2  ??Subroutine79_0
       8  ??Subroutine80_0
       5  ??Subroutine81_0
       6  ??Subroutine82_0
       8  ??Subroutine83_0
       4  ??Subroutine84_0
       5  ??Subroutine85_0
       4  ??Subroutine86_0
       3  ??Subroutine87_0
       6  ??Subroutine88_0
       4  ??Subroutine89_0
       5  ??Subroutine90_0
      10  ??Subroutine91_0
      13  ??Subroutine92_0
       3  ??Subroutine93_0
       5  ??Subroutine94_0
       5  ??Subroutine95_0
       6  ??Subroutine96_0
       1  ??Subroutine97_0
       5  ??Subroutine98_0
       1  ??Subroutine99_0
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_ParentAnnce?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
       3  ?Subroutine0
      10  ?Subroutine1
       1  ?Subroutine10
      42  ?Subroutine11
       4  ?Subroutine12
      18  ?Subroutine13
      21  ?Subroutine14
       6  ?Subroutine15
       1  ?Subroutine16
       1  ?Subroutine17
       7  ?Subroutine18
       1  ?Subroutine19
      17  ?Subroutine2
       7  ?Subroutine20
      12  ?Subroutine21
       5  ?Subroutine22
       4  ?Subroutine23
      10  ?Subroutine24
      16  ?Subroutine25
       5  ?Subroutine26
       9  ?Subroutine27
      13  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
      13  ?Subroutine30
       1  ?Subroutine31
       6  ?Subroutine32
       8  ?Subroutine33
      20  ?Subroutine34
       1  ?Subroutine35
      10  ?Subroutine36
      10  ?Subroutine37
      10  ?Subroutine38
       6  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
      15  ?Subroutine41
       3  ?Subroutine42
       3  ?Subroutine43
      13  ?Subroutine44
      10  ?Subroutine45
       8  ?Subroutine46
       4  ?Subroutine47
       8  ?Subroutine48
      12  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
       5  ?Subroutine51
       8  ?Subroutine52
       1  ?Subroutine53
      10  ?Subroutine54
       7  ?Subroutine55
       6  ?Subroutine56
       6  ?Subroutine57
       4  ?Subroutine58
       2  ?Subroutine59
       5  ?Subroutine6
      15  ?Subroutine60
       8  ?Subroutine61
      14  ?Subroutine62
       4  ?Subroutine63
       9  ?Subroutine64
      10  ?Subroutine65
       7  ?Subroutine66
       5  ?Subroutine67
       4  ?Subroutine68
      16  ?Subroutine69
      10  ?Subroutine7
      13  ?Subroutine70
      15  ?Subroutine71
       8  ?Subroutine72
       8  ?Subroutine73
       8  ?Subroutine74
       9  ?Subroutine75
       3  ?Subroutine76
       7  ?Subroutine77
       8  ?Subroutine8
       5  ?Subroutine9
     143  ZDO_RegisterForZDOMsg
     106  ZDO_RemoveRegisteredCB
     266  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     198  ZDP_BindUnbindReq
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
     147  ZDP_EPRsp
     302  ZDP_EndDeviceBindReq
      87  ZDP_GenericRsp
      58  ZDP_IEEEAddrReq
     313  ZDP_IncomingData
     207  ZDP_MatchDescReq
     297  ZDP_MgmtBindRsp
      31  ZDP_MgmtDirectJoinReq
      61  ZDP_MgmtLeaveReq
     334  ZDP_MgmtLqiRsp
      58  ZDP_MgmtNwkDiscReq
     318  ZDP_MgmtNwkDiscRsp
     226  ZDP_MgmtNwkUpdateNotify
     149  ZDP_MgmtNwkUpdateReq
     165  ZDP_MgmtPermitJoinReq
     302  ZDP_MgmtRtgRsp
      26  ZDP_NWKAddrOfInterestReq
     135  ZDP_NodeDescMsg
     120  ZDP_NwkAddrReq
     169  ZDP_ParentAnnce
      84  ZDP_PowerDescMsg
     109  ZDP_SendData
      80  ZDP_ServerDiscReq
      81  ZDP_ServerDiscRsp
     338  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     122  ZDP_UserDescRsp
     107  ZDP_UserDescSet
     166  fillAndSend
       2  zdoMsgCBs
      40  zdpMsgProcs
     303  zdpProcessAddrReq

 
 6 516 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    41 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 769 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
