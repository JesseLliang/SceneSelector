###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                22/Jan/2018  15:11:26
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
#    Command line       =  
#        -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=120000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=180000)
#        -f "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "E:\GitHub\√Ê∞ÂZ-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c" -D
#        SCENE_SELECTOR_TOUCHKEY -D xSCENE_SELECTOR -D ISR_KEYINTERRUPT -D
#        OSC32K_CRYSTAL_INSTALLED=FALSE -D xxHAL_PA_LNA -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_SCENES
#        -D ZCL_ON_OFF -D ZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        -lA "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddSceneSelector\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddCommon\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\Source\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Source\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        E:\GitHub\√Ê∞ÂZ-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

E:\GitHub\√Ê∞ÂZ-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          #if defined ( MT_GP_FUNC )
     58          #include "MT_GP.h"
     59          #endif
     60          
     61          /* ------------------------------------------------------------------------------------------------
     62           *                                          Constants
     63           * ------------------------------------------------------------------------------------------------
     64           */
     65          
     66          #if !defined MT_AF_EXEC_CNT
     67          #define MT_AF_EXEC_CNT  15
     68          #endif
     69          
     70          #if !defined MT_AF_EXEC_DLY
     71          #define MT_AF_EXEC_DLY  1000
     72          #endif
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                           Typedefs
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          typedef struct
     80          {
     81            uint8 *data;
     82            afAddrType_t dstAddr;
     83            endPointDesc_t *epDesc;
     84            uint16 cId;
     85            uint16 dataLen;
     86            uint8 transId;
     87            uint8 txOpts;
     88            uint8 radius;
     89            uint8 tick;
     90          } mtAfDataReq_t;
     91          
     92          typedef struct _mtAfInMsgList_t
     93          {
     94            struct _mtAfInMsgList_t *next;
     95            uint8 *data;
     96            uint32 timestamp;         // Receipt timestamp from MAC.
     97            uint8 tick;
     98          } mtAfInMsgList_t;
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                        Local Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          
    108          /* ------------------------------------------------------------------------------------------------
    109           *                                        Global Variables
    110           * ------------------------------------------------------------------------------------------------
    111           */
    112          
    113          #if defined ( MT_AF_CB_FUNC )
    114          uint16 _afCallbackSub;
    115          #endif
    116          
    117          /* ------------------------------------------------------------------------------------------------
    118           *                                        Local Functions
    119           * ------------------------------------------------------------------------------------------------
    120           */
    121          
    122          static void MT_AfRegister(uint8 *pBuf);
    123          static void MT_AfDelete(uint8 *pBuf);
    124          static void MT_AfDataRequest(uint8 *pBuf);
    125          
    126          #if defined ( ZIGBEEPRO )
    127          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    128          #endif
    129          
    130          #if defined INTER_PAN
    131          static void MT_AfInterPanCtl(uint8 *pBuf);
    132          #endif
    133          
    134          static void MT_AfDataRetrieve(uint8 *pBuf);
    135          static void MT_AfDataStore(uint8 *pBuf);
    136          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    137          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    138          
    139          
    140          /**************************************************************************************************
    141           * @fn          MT_AfExec
    142           *
    143           * @brief       This function is invoked by an MT timer event.
    144           *
    145           * input parameters
    146           *
    147           * None.
    148           *
    149           * output parameters
    150           *
    151           * None.
    152           *
    153           * @return      None.
    154           **************************************************************************************************
    155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void MT_AfExec(void)
   \                     MT_AfExec:
    157          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    158            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP    ??MT_AfExec_1
    159          
    160            while (pItem != NULL)
    161            {
    162              if (--(pItem->tick) == 0)
    163              {
    164                if (pMtAfInMsgList == pItem)
    165                {
    166                  pMtAfInMsgList = pItem->next;
    167                  (void)osal_mem_free(pItem);
    168                  pItem = pMtAfInMsgList;
    169                }
    170                else
    171                {
    172                  pPrev->next = pItem->next;
    173                  (void)osal_mem_free(pItem);
    174                  pItem = pPrev->next;
    175                }
    176              }
    177              else
    178              {
    179                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    180                pItem = pItem->next;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
    181              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   603F         JZ      ??MT_AfExec_3
   \   000019   EA           MOV     A,R2
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3B           ADDC    A,R3
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   14           DEC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   70E3         JNZ     ??MT_AfExec_2
   \   000027   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00002A   EA           MOV     A,R2
   \   00002B   68           XRL     A,R0
   \   00002C   7002         JNZ     ??MT_AfExec_4
   \   00002E   EB           MOV     A,R3
   \   00002F   69           XRL     A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   700D         JNZ     ??MT_AfExec_5
   \   000036   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000041   80C2         SJMP    ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000043   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E8           MOV     A,R0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E9           MOV     A,R1
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   80BA         SJMP    ??MT_AfExec_1
    182            }
    183          
    184            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000058   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00005B   601A         JZ      ??MT_AfExec_6
    185            {
    186              if (--(pMtAfDataReq->tick) == 0)
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C8           XCH     A,R0
   \   00005F   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000062   E0           MOVX    A,@DPTR
   \   000063   14           DEC     A
   \   000064   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   700D         JNZ     ??MT_AfExec_6
    187              {
    188                (void)osal_mem_free(pMtAfDataReq);
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00006D   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    189                pMtAfDataReq = NULL;
   \   000070   90....       MOV     DPTR,#pMtAfDataReq
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
    190              }
    191            }
    192          
    193            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000077   90....       MOV     DPTR,#pMtAfInMsgList
   \   00007A   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00007D   7005         JNZ     ??MT_AfExec_7
   \   00007F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000082   6026         JZ      ??MT_AfExec_8
    194            {
    195              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000084                ; Setup parameters for call to function osal_start_timerEx
   \   000084   90....       MOV     DPTR,#__Constant_3e8
   \   000087   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008A   7A08         MOV     R2,#0x8
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   90....       MOV     DPTR,#MT_TaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   E9           MOV     A,R1
   \   00009C   600C         JZ      ??MT_AfExec_8
    196              {
    197                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A08         MOV     R2,#0x8
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   90....       MOV     DPTR,#MT_TaskID
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    198              }
    199            }
    200          }
   \                     ??MT_AfExec_8:
   \   0000AA   7F01         MOV     R7,#0x1
   \   0000AC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000004   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   2417         ADD     A,#0x17
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   90....       MOV     DPTR,#pMtAfInMsgList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C8           XCH     A,R0
   \   000008   22           RET
    201          
    202          /***************************************************************************************************
    203           * @fn      MT_AfCommandProcessing
    204           *
    205           * @brief   Process all the AF commands that are issued by test tool
    206           *
    207           * @param   pBuf - pointer to the received buffer
    208           *
    209           * @return  status
    210           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    213            uint8 status = MT_RPC_SUCCESS;
   \   00000A   75..00       MOV     ?V0,#0x0
    214          
    215            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000D   EA           MOV     A,R2
   \   00000E   2403         ADD     A,#0x3
   \   000010   F5..         MOV     ?V2,A
   \   000012   E4           CLR     A
   \   000013   3B           ADDC    A,R3
   \   000014   F5..         MOV     ?V3,A
   \   000016   EA           MOV     A,R2
   \   000017   2402         ADD     A,#0x2
   \   000019   F8           MOV     R0,A
   \   00001A   E4           CLR     A
   \   00001B   3B           ADDC    A,R3
   \   00001C   F9           MOV     R1,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6034         JZ      ??MT_AfCommandProcessing_0
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??MT_AfCommandProcessing_1 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??MT_AfCommandProcessing_1 & 0xFFFF
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??MT_AfCommandProcessing_2 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??MT_AfCommandProcessing_3 & 0xFFFF
   \   00003C   24F3         ADD     A,#-0xd
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_AfCommandProcessing_4 & 0xFFFF
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??MT_AfCommandProcessing_5 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_AfCommandProcessing_6 & 0xFFFF
   \   00004F   14           DEC     A
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??MT_AfCommandProcessing_7 & 0xFFFF
   \   000055   02....       LJMP    ??MT_AfCommandProcessing_8 & 0xFFFF
    216            {
    217              case MT_AF_REGISTER:
    218                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7410         MOV     A,#0x10
   \   000060   F0           MOVX    @DPTR,A
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F5..         MOV     ?V1,A
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   7A06         MOV     R2,#0x6
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00006F   8A..         MOV     ?V4,R2
   \   000071   8B..         MOV     ?V5,R3
   \   000073   AE..         MOV     R6,?V4
   \   000075   AF..         MOV     R7,?V5
   \   000077   EE           MOV     A,R6
   \   000078   4F           ORL     A,R7
   \   000079   603A         JZ      ??MT_AfCommandProcessing_9
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   A3           INC     DPTR
   \   000080   74..         MOV     A,#MT_TaskID & 0xff
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000086   F0           MOVX    @DPTR,A
   \   000087                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000087   EE           MOV     A,R6
   \   000088   FC           MOV     R4,A
   \   000089   EF           MOV     A,R7
   \   00008A   FD           MOV     R5,A
   \   00008B   AA..         MOV     R2,?V2
   \   00008D   AB..         MOV     R3,?V3
   \   00008F   12....       LCALL   ??MT_BuildEndpointDesc?relay; Banked call to: MT_BuildEndpointDesc
   \   000092   E9           MOV     A,R1
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   700F         JNZ     ??MT_AfCommandProcessing_10
   \   00009C                ; Setup parameters for call to function afRegister
   \   00009C   EE           MOV     A,R6
   \   00009D   FA           MOV     R2,A
   \   00009E   EF           MOV     A,R7
   \   00009F   FB           MOV     R3,A
   \   0000A0   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
   \   0000A3   E9           MOV     A,R1
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   F0           MOVX    @DPTR,A
   \                     ??MT_AfCommandProcessing_10:
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6007         JZ      ??MT_AfCommandProcessing_9
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   EE           MOV     A,R6
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \                     ??MT_AfCommandProcessing_9:
   \   0000B5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B5   AC..         MOV     R4,?XSP + 0
   \   0000B7   AD..         MOV     R5,?XSP + 1
   \   0000B9   7B01         MOV     R3,#0x1
   \   0000BB   AA..         MOV     R2,?V1
   \   0000BD   02....       LJMP    ??MT_AfCommandProcessing_11 & 0xFFFF
    219                break;
    220          
    221              case MT_AF_DELETE:
    222                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   7410         MOV     A,#0x10
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   8882         MOV     DPL,R0
   \   0000CB   8983         MOV     DPH,R1
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FE           MOV     R6,A
   \   0000CF                ; Setup parameters for call to function afDelete
   \   0000CF   85..82       MOV     DPL,?V2
   \   0000D2   85..83       MOV     DPH,?V3
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F9           MOV     R1,A
   \   0000D7   12....       LCALL   ??afDelete?relay     ; Banked call to: afDelete
   \   0000DA   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   02....       LJMP    ??MT_AfCommandProcessing_11 & 0xFFFF
    223                break;
    224          
    225              case MT_AF_DATA_REQUEST:
    226              case MT_AF_DATA_REQUEST_EXT:
    227                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   0000E2                ; Setup parameters for call to function MT_AfDataRequest
   \   0000E2   12....       LCALL   ??MT_AfDataRequest?relay; Banked call to: MT_AfDataRequest
    228                break;
   \   0000E5   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    229          
    230          #if defined( ZIGBEEPRO )
    231              case MT_AF_DATA_REQUEST_SRCRTG:
    232                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   0000E8                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   0000E8   12....       LCALL   ??MT_AfDataRequestSrcRtg?relay; Banked call to: MT_AfDataRequestSrcRtg
    233                break;
   \   0000EB   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    234          #endif
    235          
    236          #if defined INTER_PAN
    237              case MT_AF_INTER_PAN_CTL:
    238                MT_AfInterPanCtl(pBuf);
    239                break;
    240          #endif
    241          
    242              case MT_AF_DATA_RETRIEVE:
    243                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   0000EE                ; Setup parameters for call to function MT_AfDataRetrieve
   \   0000EE   12....       LCALL   ??MT_AfDataRetrieve?relay; Banked call to: MT_AfDataRetrieve
    244                break;
   \   0000F1   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    245          
    246              case MT_AF_DATA_STORE:
    247                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   0000F4                ; Setup parameters for call to function MT_AfDataStore
   \   0000F4   12....       LCALL   ??MT_AfDataStore?relay; Banked call to: MT_AfDataStore
    248                break;
   \   0000F7   02....       LJMP    ??MT_AfCommandProcessing_12 & 0xFFFF
    249          
    250              case MT_AF_APSF_CONFIG_SET:
    251                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   0000FA   8A82         MOV     DPL,R2
   \   0000FC   8B83         MOV     DPH,R3
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   7401         MOV     A,#0x1
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   D0E0         POP     A
   \   00010C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   C0E0         PUSH    A
   \   000113   7402         MOV     A,#0x2
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   D0E0         POP     A
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B                ; Setup parameters for call to function afAPSF_ConfigSet
   \   00011B   7401         MOV     A,#0x1
   \   00011D   12....       LCALL   ?XSTACK_DISP101_8
   \   000120   85..82       MOV     DPL,?V2
   \   000123   85..83       MOV     DPH,?V3
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   ??afAPSF_ConfigSet?relay; Banked call to: afAPSF_ConfigSet
   \   00012B   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00012E   7A13         MOV     R2,#0x13
   \   000130   8045         SJMP    ??MT_AfCommandProcessing_11
    252                break;
    253          
    254              case MT_AF_APSF_CONFIG_GET:
    255                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   000132   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000135   7401         MOV     A,#0x1
   \   000137   12....       LCALL   ?XSTACK_DISP102_8
   \   00013A   7402         MOV     A,#0x2
   \   00013C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00013F                ; Setup parameters for call to function afAPSF_ConfigGet
   \   00013F   04           INC     A
   \   000140   12....       LCALL   ?XSTACK_DISP101_8
   \   000143   85..82       MOV     DPL,?V2
   \   000146   85..83       MOV     DPH,?V3
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F9           MOV     R1,A
   \   00014B   12....       LCALL   ??afAPSF_ConfigGet?relay; Banked call to: afAPSF_ConfigGet
   \   00014E   7401         MOV     A,#0x1
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   7403         MOV     A,#0x3
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   D0E0         POP     A
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   7402         MOV     A,#0x2
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   E0           MOVX    A,@DPTR
   \   000164   C0E0         PUSH    A
   \   000166   7404         MOV     A,#0x4
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   D0E0         POP     A
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016E   7403         MOV     A,#0x3
   \   000170   12....       LCALL   ?XSTACK_DISP102_8
   \   000173   7B03         MOV     R3,#0x3
   \   000175   7A14         MOV     R2,#0x14
   \                     ??MT_AfCommandProcessing_11:
   \   000177   7964         MOV     R1,#0x64
   \   000179   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    256                break;
   \   00017C   8003         SJMP    ??MT_AfCommandProcessing_12
    257          
    258              default:
    259                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   00017E   75..02       MOV     ?V0,#0x2
    260                break;
    261            }
    262          
    263            return status;
   \                     ??MT_AfCommandProcessing_12:
   \   000181   A9..         MOV     R1,?V0
   \   000183   7405         MOV     A,#0x5
   \   000185                REQUIRE ?Subroutine0
   \   000185                ; // Fall through to label ?Subroutine0
    264          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_AfRegister
    268           *
    269           * @brief   Process AF Register command
    270           *
    271           * @param   pBuf - pointer to the received buffer
    272           *
    273           * @return  none
    274           ***************************************************************************************************/
    275          static void MT_AfRegister(uint8 *pBuf)
    276          {
    277            uint8 cmdId;
    278            uint8 retValue = ZMemError;
    279            endPointDesc_t *epDesc;
    280          
    281            /* parse header */
    282            cmdId = pBuf[MT_RPC_POS_CMD1];
    283            pBuf += MT_RPC_FRAME_HDR_SZ;
    284          
    285            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
    286            if ( epDesc )
    287            {
    288              epDesc->task_id = &MT_TaskID;
    289              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
    290              if ( retValue == ZSuccess )
    291              {
    292                retValue = afRegister( epDesc );
    293              }
    294          
    295              if ( retValue != ZSuccess )
    296              {
    297                osal_mem_free( epDesc );
    298              }
    299            }
    300          
    301            /* Build and send back the response */
    302            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    303          }
    304          
    305          /***************************************************************************************************
    306           * @fn      MT_AfDelete
    307           *
    308           * @brief   Process AF Delete Endpoint command
    309           *
    310           * @param   pBuf - pointer to the received buffer
    311           *
    312           * @return  none
    313           ***************************************************************************************************/
    314          static void MT_AfDelete(uint8 *pBuf)
    315          {
    316            uint8 cmdId;
    317            uint8 retValue = ZMemError;
    318          
    319            /* parse header */
    320            cmdId = pBuf[MT_RPC_POS_CMD1];
    321            pBuf += MT_RPC_FRAME_HDR_SZ;
    322          
    323            retValue = afDelete( *pBuf );
    324          
    325            /* Build and send back the response */
    326            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    327          }
    328          
    329          /***************************************************************************************************
    330           * @fn      MT_AfDataRequest
    331           *
    332           * @brief   Process AF Register command
    333           *
    334           * @param   pBuf - pointer to the received buffer
    335           *
    336           * @return  none
    337           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    340            #define MT_AF_REQ_MSG_LEN  10
    341            #define MT_AF_REQ_MSG_EXT  10
    342          
    343            endPointDesc_t *epDesc;
    344            afAddrType_t dstAddr;
    345            cId_t cId;
    346            uint8 transId, txOpts, radius;
    347            uint8 cmd0, cmd1;
    348            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?Subroutine20 & 0xFFFF
    349            uint16 dataLen, tempLen;
    350          
    351            /* Parse header */
    352            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_30:
   \   000019   F5..         MOV     ?V12,A
    353            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V9,A
    354            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000024   EE           MOV     A,R6
   \   000025   2403         ADD     A,#0x3
   \   000027   FE           MOV     R6,A
   \   000028   5001         JNC     ??MT_AfDataRequest_0
   \   00002A   0F           INC     R7
    355          
    356            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002B   7402         MOV     A,#0x2
   \   00002D   65..         XRL     A,?V9
   \   00002F   7073         JNZ     ??MT_AfDataRequest_1
    357            {
    358              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   740A         MOV     A,#0xa
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E8           MOV     A,R0
   \   00003D   12....       LCALL   ?Subroutine22 & 0xFFFF
    359          
    360              if (dstAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_34:
   \   000040   7403         MOV     A,#0x3
   \   000042   68           XRL     A,R0
   \   000043   701F         JNZ     ??MT_AfDataRequest_2
    361              {
    362                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   8E..         MOV     ?V0,R6
   \   000047   8F..         MOV     ?V1,R7
   \   000049   75..00       MOV     ?V2,#0x0
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000051   7C08         MOV     R4,#0x8
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?XSTACK_DISP101_8
   \   00005A   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   8011         SJMP    ??MT_AfDataRequest_3
    363              }
    364              else
    365              {
    366                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   000064                ; Setup parameters for call to function osal_build_uint16
   \   000064   EE           MOV     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   EA           MOV     A,R2
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   EB           MOV     A,R3
   \   000074   F0           MOVX    @DPTR,A
    367              }
    368              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_3:
   \   000075   EE           MOV     A,R6
   \   000076   2408         ADD     A,#0x8
   \   000078   FE           MOV     R6,A
   \   000079   5001         JNC     ??MT_AfDataRequest_4
   \   00007B   0F           INC     R7
    369          
    370              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_4:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C0E0         PUSH    A
   \   000083   740B         MOV     A,#0xb
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00008D   0E           INC     R6
   \   00008E   AF83         MOV     R7,DPH
    371              dstAddr.panId = osal_build_uint16( pBuf );
   \   000090                ; Setup parameters for call to function osal_build_uint16
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   000097   740C         MOV     A,#0xc
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   12....       LCALL   ?Subroutine19 & 0xFFFF
    372              pBuf += 2;
    373            }
   \                     ??CrossCallReturnLabel_26:
   \   00009F   5038         JNC     ??MT_AfDataRequest_5
   \   0000A1   0F           INC     R7
   \   0000A2   8035         SJMP    ??MT_AfDataRequest_5
    374            else
    375            {
    376              /* Destination address */
    377              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000A4   740A         MOV     A,#0xa
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   F0           MOVX    @DPTR,A
    378              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000AC                ; Setup parameters for call to function osal_build_uint16
   \   0000AC   0A           INC     R2
   \   0000AD   0A           INC     R2
   \   0000AE   0A           INC     R2
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   0000B4   7402         MOV     A,#0x2
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL   ?Subroutine19 & 0xFFFF
    379              pBuf += 2;
   \                     ??CrossCallReturnLabel_27:
   \   0000BC   5001         JNC     ??MT_AfDataRequest_6
   \   0000BE   0F           INC     R7
    380          
    381              /* Destination endpoint */
    382              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_6:
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C0E0         PUSH    A
   \   0000C6   740B         MOV     A,#0xb
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP     A
   \   0000CD   12....       LCALL   ?Subroutine22 & 0xFFFF
    383              dstAddr.panId = 0;
   \                     ??CrossCallReturnLabel_35:
   \   0000D0   740C         MOV     A,#0xc
   \   0000D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D5   E4           CLR     A
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   F0           MOVX    @DPTR,A
    384            }
    385          
    386            /* Source endpoint */
    387            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   0000D9                ; Setup parameters for call to function afFindEndPointDesc
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F9           MOV     R1,A
   \   0000DF   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   0000E2   8A..         MOV     ?V10,R2
   \   0000E4   8B..         MOV     ?V11,R3
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   A3           INC     DPTR
   \   0000EB   AE82         MOV     R6,DPL
   \   0000ED   AF83         MOV     R7,DPH
    388          
    389            /* ClusterId */
    390            cId = osal_build_uint16( pBuf );
   \   0000EF                ; Setup parameters for call to function osal_build_uint16
   \   0000EF   EE           MOV     A,R6
   \   0000F0   FA           MOV     R2,A
   \   0000F1   EF           MOV     A,R7
   \   0000F2   FB           MOV     R3,A
   \   0000F3   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   0000F6   8A..         MOV     ?V2,R2
   \   0000F8   8B..         MOV     ?V3,R3
    391            pBuf +=2;
   \   0000FA   EE           MOV     A,R6
   \   0000FB   2402         ADD     A,#0x2
   \   0000FD   FE           MOV     R6,A
   \   0000FE   5001         JNC     ??MT_AfDataRequest_7
   \   000100   0F           INC     R7
    392          
    393            /* TransId */
    394            transId = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C0E0         PUSH    A
   \   000108   7401         MOV     A,#0x1
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   D0E0         POP     A
   \   00010F   12....       LCALL   ?Subroutine20 & 0xFFFF
    395          
    396            /* TxOption */
    397            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_31:
   \   000112   F5..         MOV     ?V8,A
   \   000114   A3           INC     DPTR
    398          
    399            /* Radius */
    400            radius = *pBuf++;
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F5..         MOV     ?V7,A
   \   000118   A3           INC     DPTR
   \   000119   0E           INC     R6
   \   00011A   0E           INC     R6
   \   00011B   0E           INC     R6
   \   00011C   AF83         MOV     R7,DPH
    401          
    402            /* Length */
    403            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   00011E   7402         MOV     A,#0x2
   \   000120   65..         XRL     A,?V9
   \   000122   701C         JNZ     ??MT_AfDataRequest_8
    404            {
    405              dataLen = osal_build_uint16( pBuf );
   \   000124                ; Setup parameters for call to function osal_build_uint16
   \   000124   EE           MOV     A,R6
   \   000125   FA           MOV     R2,A
   \   000126   EF           MOV     A,R7
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   00012B   8A..         MOV     ?V0,R2
   \   00012D   8B..         MOV     ?V1,R3
    406              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   00012F   EA           MOV     A,R2
   \   000130   2414         ADD     A,#0x14
   \   000132   F8           MOV     R0,A
   \   000133   E4           CLR     A
   \   000134   35..         ADDC    A,?V1
   \   000136   F9           MOV     R1,A
    407              pBuf += 2;
   \   000137   EE           MOV     A,R6
   \   000138   2402         ADD     A,#0x2
   \   00013A   FE           MOV     R6,A
   \   00013B   5014         JNC     ??MT_AfDataRequest_9
   \   00013D   0F           INC     R7
   \   00013E   8011         SJMP    ??MT_AfDataRequest_9
    408            }
    409            else
    410            {
    411              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F5..         MOV     ?V0,A
   \   000143   75..00       MOV     ?V1,#0x0
   \   000146   A3           INC     DPTR
   \   000147   0E           INC     R6
   \   000148   AF83         MOV     R7,DPH
    412              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   00014A   240A         ADD     A,#0xa
   \   00014C   F8           MOV     R0,A
   \   00014D   E4           CLR     A
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F9           MOV     R1,A
    413            }
    414          
    415            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   000151   E5..         MOV     A,?V10
   \   000153   45..         ORL     A,?V11
   \   000155   6011         JZ      ??MT_AfDataRequest_10
    416            {
    417              retValue = afStatus_INVALID_PARAMETER;
    418            }
    419            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000157   C3           CLR     C
   \   000158   E8           MOV     A,R0
   \   000159   94FB         SUBB    A,#-0x5
   \   00015B   E9           MOV     A,R1
   \   00015C   9400         SUBB    A,#0x0
   \   00015E   5003         JNC     $+5
   \   000160   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    420            {
    421              if (pMtAfDataReq != NULL)
   \   000163   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000166   600B         JZ      ??MT_AfDataRequest_12
    422              {
    423                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_10:
   \   000168   85..82       MOV     DPL,?XSP + 0
   \   00016B   85..83       MOV     DPH,?XSP + 1
   \   00016E   7402         MOV     A,#0x2
   \   000170   02....       LJMP    ??MT_AfDataRequest_13 & 0xFFFF
    424              }
    425              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_12:
   \   000173                ; Setup parameters for call to function osal_mem_alloc
   \   000173   E5..         MOV     A,?V0
   \   000175   2418         ADD     A,#0x18
   \   000177   FA           MOV     R2,A
   \   000178   E4           CLR     A
   \   000179   35..         ADDC    A,?V1
   \   00017B   FB           MOV     R3,A
   \   00017C   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   00017F   90....       MOV     DPTR,#pMtAfDataReq
   \   000182   EA           MOV     A,R2
   \   000183   F0           MOVX    @DPTR,A
   \   000184   A3           INC     DPTR
   \   000185   EB           MOV     A,R3
   \   000186   F0           MOVX    @DPTR,A
   \   000187   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   7005         JNZ     ??MT_AfDataRequest_14
    426              {
    427                retValue = afStatus_MEM_FAIL;
   \   000192   7410         MOV     A,#0x10
   \   000194   02....       LJMP    ??MT_AfDataRequest_13 & 0xFFFF
    428              }
    429              else
    430              {
    431                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   000197   E4           CLR     A
   \   000198   F0           MOVX    @DPTR,A
    432          
    433                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   000199   90....       MOV     DPTR,#pMtAfDataReq
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   2418         ADD     A,#0x18
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   3400         ADDC    A,#0x0
   \   0001A4   FB           MOV     R3,A
   \   0001A5   90....       MOV     DPTR,#pMtAfDataReq
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F8           MOV     R0,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   8882         MOV     DPL,R0
   \   0001B0   EA           MOV     A,R2
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   EB           MOV     A,R3
   \   0001B4   F0           MOVX    @DPTR,A
    434                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001B5                ; Setup parameters for call to function osal_memcpy
   \   0001B5   7402         MOV     A,#0x2
   \   0001B7   12....       LCALL   ?XSTACK_DISP100_8
   \   0001BA   88..         MOV     ?V4,R0
   \   0001BC   89..         MOV     ?V5,R1
   \   0001BE   75..00       MOV     ?V6,#0x0
   \   0001C1   78..         MOV     R0,#?V4
   \   0001C3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001C6   7C0C         MOV     R4,#0xc
   \   0001C8   7D00         MOV     R5,#0x0
   \   0001CA   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001CD   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0001D0   7403         MOV     A,#0x3
   \   0001D2   12....       LCALL   ?DEALLOC_XSTACK8
    435                pMtAfDataReq->epDesc = epDesc;
   \   0001D5   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001D8   E5..         MOV     A,?V10
   \   0001DA   F0           MOVX    @DPTR,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E5..         MOV     A,?V11
   \   0001DE   F0           MOVX    @DPTR,A
    436                pMtAfDataReq->cId = cId;
   \   0001DF   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001E2   E5..         MOV     A,?V2
   \   0001E4   F0           MOVX    @DPTR,A
   \   0001E5   A3           INC     DPTR
   \   0001E6   E5..         MOV     A,?V3
   \   0001E8   F0           MOVX    @DPTR,A
    437                pMtAfDataReq->dataLen = dataLen;
   \   0001E9   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001EC   E5..         MOV     A,?V0
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF   A3           INC     DPTR
   \   0001F0   E5..         MOV     A,?V1
   \   0001F2   F0           MOVX    @DPTR,A
    438                pMtAfDataReq->transId = transId;
   \   0001F3   7401         MOV     A,#0x1
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   C0E0         PUSH    A
   \   0001FB   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001FE   2414         ADD     A,#0x14
   \   000200   F582         MOV     DPL,A
   \   000202   E4           CLR     A
   \   000203   38           ADDC    A,R0
   \   000204   F583         MOV     DPH,A
   \   000206   D0E0         POP     A
   \   000208   F0           MOVX    @DPTR,A
    439                pMtAfDataReq->txOpts = txOpts;
   \   000209   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00020C   E5..         MOV     A,?V8
   \   00020E   F0           MOVX    @DPTR,A
    440                pMtAfDataReq->radius = radius;
   \   00020F   90....       MOV     DPTR,#pMtAfDataReq
   \   000212   E0           MOVX    A,@DPTR
   \   000213   F8           MOV     R0,A
   \   000214   A3           INC     DPTR
   \   000215   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000218   E5..         MOV     A,?V7
   \   00021A   12....       LCALL   ?Subroutine7 & 0xFFFF
    441          
    442                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    443                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_5:
   \   00021D   740F         MOV     A,#0xf
   \   00021F   F0           MOVX    @DPTR,A
    444                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000220                ; Setup parameters for call to function osal_start_timerEx
   \   000220   90....       MOV     DPTR,#__Constant_3e8
   \   000223   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000226   7A08         MOV     R2,#0x8
   \   000228   7B00         MOV     R3,#0x0
   \   00022A   90....       MOV     DPTR,#MT_TaskID
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F9           MOV     R1,A
   \   00022F   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000232   7404         MOV     A,#0x4
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
   \   000237   E9           MOV     A,R1
   \   000238   6053         JZ      ??MT_AfDataRequest_15
    445                {
    446                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00023A                ; Setup parameters for call to function osal_set_event
   \   00023A   7A08         MOV     R2,#0x8
   \   00023C   7B00         MOV     R3,#0x0
   \   00023E   90....       MOV     DPTR,#MT_TaskID
   \   000241   E0           MOVX    A,@DPTR
   \   000242   F9           MOV     R1,A
   \   000243   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   000246   8045         SJMP    ??MT_AfDataRequest_15
    447                }
    448              }
    449            }
    450          #if defined ( MT_GP_FUNC )
    451            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    452                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    453                     && ( dstAddr.panId == 0 )
    454                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    455            {
    456              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    457            }
    458          #endif
    459            else
    460            {
    461              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_11:
   \   000248                ; Setup parameters for call to function AF_DataRequest
   \   000248   E5..         MOV     A,?V7
   \   00024A   F5..         MOV     ?V4,A
   \   00024C   78..         MOV     R0,#?V4
   \   00024E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000251   7402         MOV     A,#0x2
   \   000253   12....       LCALL   ?XSTACK_DISP100_8
   \   000256   88..         MOV     ?V4,R0
   \   000258   89..         MOV     ?V5,R1
   \   00025A   78..         MOV     R0,#?V4
   \   00025C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025F   8E..         MOV     ?V4,R6
   \   000261   8F..         MOV     ?V5,R7
   \   000263   78..         MOV     R0,#?V4
   \   000265   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000268   78..         MOV     R0,#?V0
   \   00026A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026D   78..         MOV     R0,#?V2
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000272   A9..         MOV     R1,?V8
   \   000274   AC..         MOV     R4,?V10
   \   000276   AD..         MOV     R5,?V11
   \   000278   740B         MOV     A,#0xb
   \   00027A   12....       LCALL   ?XSTACK_DISP101_8
   \   00027D   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000280   7409         MOV     A,#0x9
   \   000282   12....       LCALL   ?DEALLOC_XSTACK8
   \   000285   E9           MOV     A,R1
   \   000286   85..82       MOV     DPL,?XSP + 0
   \   000289   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_13:
   \   00028C   F0           MOVX    @DPTR,A
    462            }
    463          
    464            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_15:
   \   00028D   74E0         MOV     A,#-0x20
   \   00028F   55..         ANL     A,?V12
   \   000291   6420         XRL     A,#0x20
   \   000293   700D         JNZ     ??MT_AfDataRequest_16
    465            {
    466              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   000295                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000295   AC..         MOV     R4,?XSP + 0
   \   000297   AD..         MOV     R5,?XSP + 1
   \   000299   7B01         MOV     R3,#0x1
   \   00029B   AA..         MOV     R2,?V9
   \   00029D   7964         MOV     R1,#0x64
   \   00029F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    467            }
    468          }
   \                     ??MT_AfDataRequest_16:
   \   0002A2   740E         MOV     A,#0xe
   \   0002A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A7   7F0D         MOV     R7,#0xd
   \   0002A9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   FE           MOV     R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C8           XCH     A,R0
   \   000002   2416         ADD     A,#0x16
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   38           ADDC    A,R0
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   2415         ADD     A,#0x15
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   2410         ADD     A,#0x10
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   240E         ADD     A,#0xe
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    469          
    470          #if defined( ZIGBEEPRO )
    471          /***************************************************************************************************
    472           * @fn      MT_AfDataRequestSrcRtg
    473           *
    474           * @brief   Process AF Register command
    475           *
    476           * @param   pBuf - pointer to the received buffer
    477           *
    478           * @return  none
    479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    482            uint8 cmdId, dataLen = 0;
    483            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?Subroutine31 & 0xFFFF
    484            endPointDesc_t *epDesc;
    485            byte transId;
    486            afAddrType_t dstAddr;
    487            cId_t cId;
    488            byte txOpts, radius, srcEP, relayCnt;
    489            uint16 *pRelayList;
    490            uint8 i;
    491          
    492            /* parse header */
    493            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_55:
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V6,A
    494            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001D   EE           MOV     A,R6
   \   00001E   2403         ADD     A,#0x3
   \   000020   FE           MOV     R6,A
   \   000021   5001         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000023   0F           INC     R7
    495          
    496            /* Destination address */
    497            /* Initialize the panID field to zero to avoid inter-pan */
    498            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000024                ; Setup parameters for call to function osal_memset
   \   000024   7C0C         MOV     R4,#0xc
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP101_8
   \   00002F   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    499            dstAddr.addrMode = afAddr16Bit;
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7402         MOV     A,#0x2
   \   000039   F0           MOVX    @DPTR,A
    500            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   00003A                ; Setup parameters for call to function osal_build_uint16
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?Subroutine19 & 0xFFFF
    501            pBuf += 2;
   \                     ??CrossCallReturnLabel_28:
   \   000049   5001         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00004B   0F           INC     R7
    502          
    503            /* Destination endpoint */
    504            dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   740B         MOV     A,#0xb
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine20 & 0xFFFF
    505          
    506            /* Source endpoint */
    507            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_32:
   \   00005D   F9           MOV     R1,A
   \   00005E   A3           INC     DPTR
   \   00005F   AE82         MOV     R6,DPL
   \   000061   AF83         MOV     R7,DPH
    508            epDesc = afFindEndPointDesc( srcEP );
   \   000063                ; Setup parameters for call to function afFindEndPointDesc
   \   000063   12....       LCALL   ??afFindEndPointDesc?relay; Banked call to: afFindEndPointDesc
   \   000066   8A..         MOV     ?V2,R2
   \   000068   8B..         MOV     ?V3,R3
    509          
    510            /* ClusterId */
    511            cId = osal_build_uint16( pBuf );
   \   00006A                ; Setup parameters for call to function osal_build_uint16
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   000071   8A..         MOV     ?V4,R2
   \   000073   8B..         MOV     ?V5,R3
    512            pBuf +=2;
   \   000075   EE           MOV     A,R6
   \   000076   2402         ADD     A,#0x2
   \   000078   FE           MOV     R6,A
   \   000079   5001         JNC     ??MT_AfDataRequestSrcRtg_2
   \   00007B   0F           INC     R7
    513          
    514            /* TransId */
    515            transId = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C0E0         PUSH    A
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   12....       LCALL   ?Subroutine20 & 0xFFFF
    516          
    517            /* TxOption */
    518            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_33:
   \   00008D   F5..         MOV     ?V7,A
   \   00008F   A3           INC     DPTR
    519          
    520            /* Radius */
    521            radius = *pBuf++;
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V8,A
   \   000093   A3           INC     DPTR
    522          
    523            /* Source route relay count */
    524            relayCnt = *pBuf++;
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F5..         MOV     ?V9,A
   \   000097   A3           INC     DPTR
   \   000098   AE82         MOV     R6,DPL
   \   00009A   AF83         MOV     R7,DPH
    525          
    526            /* Convert the source route relay list */
    527            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   25E0         ADD     A,0xE0 /* A   */
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   33           RLC     A
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000A5   8A..         MOV     ?V0,R2
   \   0000A7   8B..         MOV     ?V1,R3
   \   0000A9   EA           MOV     A,R2
   \   0000AA   45..         ORL     A,?V1
   \   0000AC   7003         JNZ     $+5
   \   0000AE   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    528            {
    529              for( i = 0; i < relayCnt; i++ )
   \   0000B1   75..00       MOV     ?V10,#0x0
   \   0000B4   8021         SJMP    ??MT_AfDataRequestSrcRtg_4
    530              {
    531                pRelayList[i] = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000B6                ; Setup parameters for call to function osal_build_uint16
   \   0000B6   EE           MOV     A,R6
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   0000BD   A8..         MOV     R0,?V10
   \   0000BF   E8           MOV     A,R0
   \   0000C0   28           ADD     A,R0
   \   0000C1   F8           MOV     R0,A
   \   0000C2   E4           CLR     A
   \   0000C3   33           RLC     A
   \   0000C4   F9           MOV     R1,A
   \   0000C5   E5..         MOV     A,?V0
   \   0000C7   28           ADD     A,R0
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   E5..         MOV     A,?V1
   \   0000CC   39           ADDC    A,R1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   12....       LCALL   ?Subroutine19 & 0xFFFF
    532                pBuf += 2;
    533              }
   \                     ??CrossCallReturnLabel_29:
   \   0000D2   5001         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0000D4   0F           INC     R7
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000D5   05..         INC     ?V10
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000D7   E5..         MOV     A,?V10
   \   0000D9   C3           CLR     C
   \   0000DA   95..         SUBB    A,?V9
   \   0000DC   40D8         JC      ??MT_AfDataRequestSrcRtg_5
    534          
    535              /* Data payload Length */
    536              dataLen = *pBuf++;
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F5..         MOV     ?V10,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   AE82         MOV     R6,DPL
   \   0000E8   AF83         MOV     R7,DPH
    537          
    538              if ( epDesc == NULL )
   \   0000EA   E5..         MOV     A,?V2
   \   0000EC   45..         ORL     A,?V3
   \   0000EE   700A         JNZ     ??MT_AfDataRequestSrcRtg_7
    539              {
    540                retValue = afStatus_INVALID_PARAMETER;
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   7402         MOV     A,#0x2
   \   0000F8   804D         SJMP    ??MT_AfDataRequestSrcRtg_8
    541              }
    542              else
    543              {
    544                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    545                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000FA                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000FA   78..         MOV     R0,#?V0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   78..         MOV     R0,#?V9
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000104   78..         MOV     R0,#?V8
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000109   7405         MOV     A,#0x5
   \   00010B   12....       LCALL   ?XSTACK_DISP100_8
   \   00010E   88..         MOV     ?V8,R0
   \   000110   89..         MOV     ?V9,R1
   \   000112   78..         MOV     R0,#?V8
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   8E..         MOV     ?V8,R6
   \   000119   8F..         MOV     ?V9,R7
   \   00011B   78..         MOV     R0,#?V8
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   75..00       MOV     ?V11,#0x0
   \   000123   78..         MOV     R0,#?V10
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   78..         MOV     R0,#?V4
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   A9..         MOV     R1,?V7
   \   00012F   AC..         MOV     R4,?V2
   \   000131   AD..         MOV     R5,?V3
   \   000133   740E         MOV     A,#0xe
   \   000135   12....       LCALL   ?XSTACK_DISP101_8
   \   000138   12....       LCALL   ??AF_DataRequestSrcRtg?relay; Banked call to: AF_DataRequestSrcRtg
   \   00013B   740C         MOV     A,#0xc
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   E9           MOV     A,R1
   \   000141   85..82       MOV     DPL,?XSP + 0
   \   000144   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000147   F0           MOVX    @DPTR,A
    546              }
    547          
    548              /* Free the memory allocated */
    549              osal_mem_free( pRelayList );
   \   000148                ; Setup parameters for call to function osal_mem_free
   \   000148   AA..         MOV     R2,?V0
   \   00014A   AB..         MOV     R3,?V1
   \   00014C   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00014F   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    550            }
    551            else
    552            {
    553              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000151   85..82       MOV     DPL,?XSP + 0
   \   000154   85..83       MOV     DPH,?XSP + 1
   \   000157   7410         MOV     A,#0x10
   \   000159   F0           MOVX    @DPTR,A
    554            }
    555          
    556          
    557            /* Build and send back the response */
    558            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00015A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00015A   AC..         MOV     R4,?XSP + 0
   \   00015C   AD..         MOV     R5,?XSP + 1
   \   00015E   7B01         MOV     R3,#0x1
   \   000160   AA..         MOV     R2,?V6
   \   000162   7964         MOV     R1,#0x64
   \   000164   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    559          }
   \   000167   740E         MOV     A,#0xe
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   7F0C         MOV     R7,#0xc
   \   00016E   02....       LJMP    ?BANKED_LEAVE_XDATA
    560          #endif
    561          
    562          #if defined INTER_PAN
    563          /***************************************************************************************************
    564           * @fn      MT_AfInterPanCtl
    565           *
    566           * @brief   Process the AF Inter Pan control command.
    567           *
    568           * @param   pBuf - pointer to the received buffer
    569           *
    570           * @return  none
    571           ***************************************************************************************************/
    572          static void MT_AfInterPanCtl(uint8 *pBuf)
    573          {
    574            uint8 cmd, rtrn;
    575            uint16 panId;
    576            endPointDesc_t *pEP;
    577          
    578            cmd = pBuf[MT_RPC_POS_CMD1];
    579            pBuf += MT_RPC_FRAME_HDR_SZ;
    580          
    581            switch (*pBuf++)  // Inter-pan request parameter.
    582            {
    583            case InterPanClr:
    584              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    585              break;
    586          
    587            case InterPanSet:
    588              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    589              break;
    590          
    591            case InterPanReg:
    592              if ((pEP = afFindEndPointDesc(*pBuf)))
    593              {
    594                StubAPS_RegisterApp(pEP);
    595                rtrn = SUCCESS;
    596              }
    597              else
    598              {
    599                rtrn = FAILURE;
    600              }
    601              break;
    602          
    603            case InterPanChk:
    604              panId = osal_build_uint16( pBuf );
    605              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    606              break;
    607          
    608            default:
    609              rtrn = afStatus_INVALID_PARAMETER;
    610              break;
    611            }
    612          
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    614          }
    615          #endif
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_AfDataConfirm
    619           *
    620           * @brief   Process
    621           *
    622           * @param   pBuf - pointer to the received buffer
    623           *
    624           * @return  none
    625           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    627          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    628            uint8 retArray[3];
    629          
    630            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine5 & 0xFFFF
    631            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_0:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    632            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_38:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   F0           MOVX    @DPTR,A
    633          
    634            /* Build and send back the response */
    635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B03         MOV     R3,#0x3
   \   000028   7A80         MOV     R2,#-0x80
   \   00002A   7944         MOV     R1,#0x44
   \   00002C   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    636          }
   \   00002F   7403         MOV     A,#0x3
   \   000031                REQUIRE ?Subroutine1
   \   000031                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
    637          
    638          /***************************************************************************************************
    639           * @fn      MT_AfReflectError
    640           *
    641           * @brief   Process
    642           *
    643           * @param   pBuf - pointer to the received buffer
    644           *
    645           * @return  none
    646           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    648          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV     A,#-0x6
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    649            uint8 retArray[6];
    650          
    651            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine5 & 0xFFFF
    652            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_1:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    653            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_39:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine23 & 0xFFFF
    654            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_37:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    655            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   00002F   EA           MOV     A,R2
   \   000030   2405         ADD     A,#0x5
   \   000032   F8           MOV     R0,A
   \   000033   E4           CLR     A
   \   000034   3B           ADDC    A,R3
   \   000035   F9           MOV     R1,A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
    656            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
    657          
    658            /* Build and send back the response */
    659            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   000055                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000055   AC..         MOV     R4,?XSP + 0
   \   000057   AD..         MOV     R5,?XSP + 1
   \   000059   7B06         MOV     R3,#0x6
   \   00005B   7A83         MOV     R2,#-0x7d
   \   00005D   7944         MOV     R1,#0x44
   \   00005F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    660          }
   \   000062   7406         MOV     A,#0x6
   \   000064   80..         SJMP    ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
    661          
    662          /***************************************************************************************************
    663           * @fn          MT_AfIncomingMsg
    664           *
    665           * @brief       Process the callback subscription for AF Incoming data.
    666           *
    667           * @param       pkt - Incoming AF data.
    668           *
    669           * @return      none
    670           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V8,R2
   \   000007   8B..         MOV     ?V9,R3
    673            #define MT_AF_INC_MSG_LEN  20
    674            #define MT_AF_INC_MSG_EXT  10
    675          
    676            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV     A,R2
   \   00000A   2420         ADD     A,#0x20
   \   00000C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000F   12....       LCALL   ?Subroutine14 & 0xFFFF
    677            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \                     ??CrossCallReturnLabel_17:
   \   000012   E5..         MOV     A,?V2
   \   000014   2414         ADD     A,#0x14
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V3
   \   00001B   F5..         MOV     ?V1,A
    678            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001D   75..81       MOV     ?V7,#-0x7f
    679            uint8 *pRsp, *pTmp;
    680            mtAfInMsgList_t *pItem = NULL;
   \   000020   75..00       MOV     ?V10,#0x0
   \   000023   75..00       MOV     ?V11,#0x0
    681          
    682          #if defined INTER_PAN
    683            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    684            {
    685              cmd = MT_AF_INCOMING_MSG_EXT;
    686            }
    687            else
    688          #endif
    689            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    690                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000026   EA           MOV     A,R2
   \   000027   240E         ADD     A,#0xe
   \   000029   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6403         XRL     A,#0x3
   \   00002F   600B         JZ      ??MT_AfIncomingMsg_0
   \   000031   C3           CLR     C
   \   000032   E5..         MOV     A,?V0
   \   000034   94F1         SUBB    A,#-0xf
   \   000036   E5..         MOV     A,?V1
   \   000038   9400         SUBB    A,#0x0
   \   00003A   400E         JC      ??MT_AfIncomingMsg_1
    691            {
    692              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00003C   75..82       MOV     ?V7,#-0x7e
    693            }
    694          
    695            if (cmd == MT_AF_INCOMING_MSG_EXT)
    696            {
    697              respLen += MT_AF_INC_MSG_EXT;
   \   00003F   E5..         MOV     A,?V0
   \   000041   240A         ADD     A,#0xa
   \   000043   F5..         MOV     ?V0,A
   \   000045   E4           CLR     A
   \   000046   35..         ADDC    A,?V1
   \   000048   F5..         MOV     ?V1,A
    698            }
    699          
    700            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   00004A   C3           CLR     C
   \   00004B   E5..         MOV     A,?V0
   \   00004D   94FB         SUBB    A,#-0x5
   \   00004F   E5..         MOV     A,?V1
   \   000051   9400         SUBB    A,#0x0
   \   000053   4038         JC      ??MT_AfIncomingMsg_2
    701            {
    702              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000055                ; Setup parameters for call to function osal_mem_alloc
   \   000055   E5..         MOV     A,?V2
   \   000057   2409         ADD     A,#0x9
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V3
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV     ?V10,R2
   \   000063   8B..         MOV     ?V11,R3
   \   000065   EA           MOV     A,R2
   \   000066   45..         ORL     A,?V11
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    703              {
    704                return;  // If cannot hold a huge message, cannot give indication at all.
    705              }
    706          
    707              pItem->data = (uint8 *)(pItem+1);
   \   00006D   EA           MOV     A,R2
   \   00006E   2409         ADD     A,#0x9
   \   000070   F8           MOV     R0,A
   \   000071   E4           CLR     A
   \   000072   35..         ADDC    A,?V11
   \   000074   F9           MOV     R1,A
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E8           MOV     A,R0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E9           MOV     A,R1
   \   00007F   F0           MOVX    @DPTR,A
    708              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   000080   C3           CLR     C
   \   000081   E5..         MOV     A,?V0
   \   000083   95..         SUBB    A,?V2
   \   000085   F5..         MOV     ?V0,A
   \   000087   E5..         MOV     A,?V1
   \   000089   95..         SUBB    A,?V3
   \   00008B   F5..         MOV     ?V1,A
    709            }
    710          
    711            // Attempt to allocate memory for the response packet.
    712            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   00008D                ; Setup parameters for call to function osal_mem_alloc
   \   00008D   AA..         MOV     R2,?V0
   \   00008F   AB..         MOV     R3,?V1
   \   000091   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000094   8A..         MOV     ?V14,R2
   \   000096   8B..         MOV     ?V15,R3
   \   000098   EA           MOV     A,R2
   \   000099   45..         ORL     A,?V15
   \   00009B   7010         JNZ     ??MT_AfIncomingMsg_4
    713            {
    714              if (pItem != NULL)
   \   00009D   E5..         MOV     A,?V10
   \   00009F   45..         ORL     A,?V11
   \   0000A1   6007         JZ      ??MT_AfIncomingMsg_5
    715              {
    716                (void)osal_mem_free(pItem);
   \   0000A3                ; Setup parameters for call to function osal_mem_free
   \   0000A3   AA..         MOV     R2,?V10
   \   0000A5   AB..         MOV     R3,?V11
   \   0000A7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    717              }
    718              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000AA   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    719            }
    720            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_4:
   \   0000AD   AE..         MOV     R6,?V14
   \   0000AF   AF..         MOV     R7,?V15
    721          
    722            /* Group ID */
    723            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   0000B1   E5..         MOV     A,?V8
   \   0000B3   2402         ADD     A,#0x2
   \   0000B5   12....       LCALL   ?Subroutine2 & 0xFFFF
    724            *pTmp++ = HI_UINT16(pMsg->groupId);
    725          
    726            /* Cluster ID */
    727            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_83:
   \   0000B8   2404         ADD     A,#0x4
   \   0000BA   F8           MOV     R0,A
   \   0000BB   E4           CLR     A
   \   0000BC   35..         ADDC    A,?V9
   \   0000BE   F9           MOV     R1,A
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    728            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_80:
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   12....       LCALL   ?Subroutine4 & 0xFFFF
    729          
    730            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??CrossCallReturnLabel_81:
   \   0000CD   A3           INC     DPTR
   \   0000CE   A983         MOV     R1,DPH
   \   0000D0   E5..         MOV     A,?V8
   \   0000D2   240F         ADD     A,#0xf
   \   0000D4   F5..         MOV     ?V12,A
   \   0000D6   E4           CLR     A
   \   0000D7   35..         ADDC    A,?V9
   \   0000D9   F5..         MOV     ?V13,A
   \   0000DB   E5..         MOV     A,?V8
   \   0000DD   2406         ADD     A,#0x6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   E4           CLR     A
   \   0000E1   35..         ADDC    A,?V9
   \   0000E3   FB           MOV     R3,A
   \   0000E4   7482         MOV     A,#-0x7e
   \   0000E6   65..         XRL     A,?V7
   \   0000E8   7058         JNZ     ??MT_AfIncomingMsg_6
    731            {
    732              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000EA   85..82       MOV     DPL,?V4
   \   0000ED   85..83       MOV     DPH,?V5
   \   0000F0   12....       LCALL   ?Subroutine6 & 0xFFFF
    733          
    734              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_2:
   \   0000F3   85..82       MOV     DPL,?V4
   \   0000F6   85..83       MOV     DPH,?V5
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6403         XRL     A,#0x3
   \   0000FC   701E         JNZ     ??MT_AfIncomingMsg_7
    735              {
    736                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000FE                ; Setup parameters for call to function osal_memcpy
   \   0000FE   8A..         MOV     ?V4,R2
   \   000100   8B..         MOV     ?V5,R3
   \   000102   75..00       MOV     ?V6,#0x0
   \   000105   78..         MOV     R0,#?V4
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010A   7C08         MOV     R4,#0x8
   \   00010C   7D00         MOV     R5,#0x0
   \   00010E   EE           MOV     A,R6
   \   00010F   FA           MOV     R2,A
   \   000110   EF           MOV     A,R7
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000115   7403         MOV     A,#0x3
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   8013         SJMP    ??MT_AfIncomingMsg_8
    737              }
    738              else
    739              {
    740                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   00011C   8A82         MOV     DPL,R2
   \   00011E   8B83         MOV     DPH,R3
   \   000120   12....       LCALL   ?Subroutine30 & 0xFFFF
    741                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_75:
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   8E82         MOV     DPL,R6
   \   00012B   8F83         MOV     DPH,R7
   \   00012D   A3           INC     DPTR
   \   00012E   F0           MOVX    @DPTR,A
    742              }
    743              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_8:
   \   00012F   EE           MOV     A,R6
   \   000130   2408         ADD     A,#0x8
   \   000132   FE           MOV     R6,A
   \   000133   5001         JNC     ??MT_AfIncomingMsg_9
   \   000135   0F           INC     R7
    744          
    745              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_9:
   \   000136   12....       LCALL   ?Subroutine15 & 0xFFFF
    746          #if defined INTER_PAN
    747              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    748              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    749          #else
    750              *pTmp++ = 0;
   \                     ??CrossCallReturnLabel_73:
   \   000139   E4           CLR     A
   \   00013A   F0           MOVX    @DPTR,A
   \   00013B   A3           INC     DPTR
    751              *pTmp++ = 0;
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   0E           INC     R6
   \   00013F   0E           INC     R6
   \   000140   8011         SJMP    ??CrossCallReturnLabel_74
    752          #endif
    753            }
    754            else
    755            {
    756              /* Source Address */
    757              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000142   8A82         MOV     DPL,R2
   \   000144   8B83         MOV     DPH,R3
   \   000146   12....       LCALL   ?Subroutine6 & 0xFFFF
    758              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_3:
   \   000149   8A82         MOV     DPL,R2
   \   00014B   8B83         MOV     DPH,R3
   \   00014D   12....       LCALL   ?Subroutine4 & 0xFFFF
    759          
    760              /* Source EP */
    761              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_82:
   \   000150   12....       LCALL   ?Subroutine15 & 0xFFFF
    762            }
   \                     ??CrossCallReturnLabel_74:
   \   000153   0E           INC     R6
   \   000154   AF83         MOV     R7,DPH
    763          
    764            /* Destination EP */
    765            *pTmp++ = pMsg->endPoint;
   \   000156   E5..         MOV     A,?V8
   \   000158   2414         ADD     A,#0x14
   \   00015A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00015D   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000160   AE82         MOV     R6,DPL
   \   000162   AF83         MOV     R7,DPH
    766          
    767            /* WasBroadCast */
    768            *pTmp++ = pMsg->wasBroadcast;
   \   000164   E5..         MOV     A,?V8
   \   000166   2415         ADD     A,#0x15
   \   000168   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00016B   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    769          
    770            /* LinkQuality */
    771            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_85:
   \   00016E   2416         ADD     A,#0x16
   \   000170   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000173   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    772          
    773            /* SecurityUse */
    774            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_86:
   \   000176   2419         ADD     A,#0x19
   \   000178   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00017B   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    775          
    776            /* Timestamp */
    777            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \                     ??CrossCallReturnLabel_87:
   \   00017E   241A         ADD     A,#0x1a
   \   000180   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000183   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000186   EE           MOV     A,R6
   \   000187   FA           MOV     R2,A
   \   000188   EF           MOV     A,R7
   \   000189   FB           MOV     R3,A
   \   00018A   12....       LCALL   ??osal_buffer_uint32?relay; Banked call to: osal_buffer_uint32
   \   00018D   7404         MOV     A,#0x4
   \   00018F   12....       LCALL   ?DEALLOC_XSTACK8
    778            pTmp += 4;
   \   000192   EE           MOV     A,R6
   \   000193   2404         ADD     A,#0x4
   \   000195   FE           MOV     R6,A
   \   000196   5001         JNC     ??MT_AfIncomingMsg_10
   \   000198   0F           INC     R7
    779          
    780            /* Data Length */
    781            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_10:
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   A3           INC     DPTR
   \   00019E   A983         MOV     R1,DPH
   \   0001A0   7482         MOV     A,#-0x7e
   \   0001A2   65..         XRL     A,?V7
   \   0001A4   7018         JNZ     ??MT_AfIncomingMsg_11
    782            {
    783              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    784               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    785               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    786               */
    787              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0001A6   8E82         MOV     DPL,R6
   \   0001A8   8F83         MOV     DPH,R7
   \   0001AA   E4           CLR     A
   \   0001AB   F0           MOVX    @DPTR,A
   \   0001AC   0E           INC     R6
   \   0001AD   E9           MOV     A,R1
   \   0001AE   FF           MOV     R7,A
    788              *pTmp++ = LO_UINT16(dataLen);
   \   0001AF   8E82         MOV     DPL,R6
   \   0001B1   8F83         MOV     DPH,R7
   \   0001B3   E5..         MOV     A,?V2
   \   0001B5   F0           MOVX    @DPTR,A
   \   0001B6   A3           INC     DPTR
    789              *pTmp++ = HI_UINT16(dataLen);
   \   0001B7   E5..         MOV     A,?V3
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   0E           INC     R6
   \   0001BC   8012         SJMP    ??MT_AfIncomingMsg_12
    790            }
    791            else
    792            {
    793              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_11:
   \   0001BE   E5..         MOV     A,?V8
   \   0001C0   241F         ADD     A,#0x1f
   \   0001C2   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001C5   12....       LCALL   ?Subroutine6 & 0xFFFF
    794              *pTmp++ = dataLen;
   \                     ??CrossCallReturnLabel_4:
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   E5..         MOV     A,?V2
   \   0001CE   F0           MOVX    @DPTR,A
   \   0001CF   A3           INC     DPTR
   \                     ??MT_AfIncomingMsg_12:
   \   0001D0   0E           INC     R6
   \   0001D1   AF83         MOV     R7,DPH
    795            }
    796          
    797            /* Data */
    798            if (pItem != NULL)
   \   0001D3   E5..         MOV     A,?V8
   \   0001D5   2422         ADD     A,#0x22
   \   0001D7   F5..         MOV     ?V12,A
   \   0001D9   E4           CLR     A
   \   0001DA   35..         ADDC    A,?V9
   \   0001DC   F5..         MOV     ?V13,A
   \   0001DE   E5..         MOV     A,?V10
   \   0001E0   45..         ORL     A,?V11
   \   0001E2   7003         JNZ     $+5
   \   0001E4   02....       LJMP    ??MT_AfIncomingMsg_13 & 0xFFFF
    799            {
    800              // Enqueue the new huge incoming item.
    801              pItem->next = pMtAfInMsgList;
   \   0001E7   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0001EA   85..82       MOV     DPL,?V10
   \   0001ED   85..83       MOV     DPH,?V11
   \   0001F0   E8           MOV     A,R0
   \   0001F1   F0           MOVX    @DPTR,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E9           MOV     A,R1
   \   0001F4   F0           MOVX    @DPTR,A
    802              pMtAfInMsgList = pItem;
   \   0001F5   90....       MOV     DPTR,#pMtAfInMsgList
   \   0001F8   E5..         MOV     A,?V10
   \   0001FA   F0           MOVX    @DPTR,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   E5..         MOV     A,?V11
   \   0001FE   F0           MOVX    @DPTR,A
    803          
    804              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    805              pItem->tick = MT_AF_EXEC_CNT;
   \   0001FF   85..82       MOV     DPL,?V10
   \   000202   F583         MOV     DPH,A
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   740F         MOV     A,#0xf
   \   00020E   F0           MOVX    @DPTR,A
    806              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   00020F                ; Setup parameters for call to function osal_start_timerEx
   \   00020F   90....       MOV     DPTR,#__Constant_3e8
   \   000212   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000215   7A08         MOV     R2,#0x8
   \   000217   7B00         MOV     R3,#0x0
   \   000219   90....       MOV     DPTR,#MT_TaskID
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F9           MOV     R1,A
   \   00021E   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000221   7404         MOV     A,#0x4
   \   000223   12....       LCALL   ?DEALLOC_XSTACK8
   \   000226   E9           MOV     A,R1
   \   000227   600C         JZ      ??MT_AfIncomingMsg_14
    807              {
    808                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000229                ; Setup parameters for call to function osal_set_event
   \   000229   7A08         MOV     R2,#0x8
   \   00022B   7B00         MOV     R3,#0x0
   \   00022D   90....       MOV     DPTR,#MT_TaskID
   \   000230   E0           MOVX    A,@DPTR
   \   000231   F9           MOV     R1,A
   \   000232   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    809              }
    810          
    811              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_14:
   \   000235   85..82       MOV     DPL,?V4
   \   000238   85..83       MOV     DPH,?V5
   \   00023B   12....       LCALL   ?XLOAD_R0123
   \   00023E   85..82       MOV     DPL,?V10
   \   000241   85..83       MOV     DPH,?V11
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   12....       LCALL   ?XSTORE_R0123
    812              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   00024B                ; Setup parameters for call to function osal_memcpy
   \   00024B   12....       LCALL   ?Subroutine12 & 0xFFFF
    813            }
   \                     ??CrossCallReturnLabel_15:
   \   00024E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000251   AC..         MOV     R4,?V2
   \   000253   AD..         MOV     R5,?V3
   \   000255   85..82       MOV     DPL,?V10
   \   000258   85..83       MOV     DPH,?V11
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000260   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000263   7403         MOV     A,#0x3
   \   000265   12....       LCALL   ?DEALLOC_XSTACK8
   \   000268   801E         SJMP    ??MT_AfIncomingMsg_15
    814            else
    815            {
    816              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_13:
   \   00026A                ; Setup parameters for call to function osal_memcpy
   \   00026A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00026D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000270   AC..         MOV     R4,?V2
   \   000272   AD..         MOV     R5,?V3
   \   000274   EE           MOV     A,R6
   \   000275   FA           MOV     R2,A
   \   000276   EF           MOV     A,R7
   \   000277   FB           MOV     R3,A
   \   000278   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00027B   7403         MOV     A,#0x3
   \   00027D   12....       LCALL   ?DEALLOC_XSTACK8
    817              pTmp += dataLen;
   \   000280   EE           MOV     A,R6
   \   000281   25..         ADD     A,?V2
   \   000283   FE           MOV     R6,A
   \   000284   EF           MOV     A,R7
   \   000285   35..         ADDC    A,?V3
   \   000287   FF           MOV     R7,A
    818            }
    819          
    820            // MAC Source address
    821            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_15:
   \   000288   E5..         MOV     A,?V8
   \   00028A   2424         ADD     A,#0x24
   \   00028C   12....       LCALL   ?Subroutine2 & 0xFFFF
    822            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
    823          
    824            // messages result radius
    825            *pTmp = pMsg->radius;
   \                     ??CrossCallReturnLabel_84:
   \   00028F   2426         ADD     A,#0x26
   \   000291   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000294   12....       LCALL   ?Subroutine30 & 0xFFFF
    826          
    827            /* Build and send back the response */
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??CrossCallReturnLabel_76:
   \   000297                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000297   AC..         MOV     R4,?V14
   \   000299   AD..         MOV     R5,?V15
   \   00029B   AB..         MOV     R3,?V0
   \   00029D   AA..         MOV     R2,?V7
   \   00029F   7944         MOV     R1,#0x44
   \   0002A1   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    829          
    830            (void)osal_mem_free(pRsp);
   \   0002A4                ; Setup parameters for call to function osal_mem_free
   \   0002A4   AA..         MOV     R2,?V14
   \   0002A6   AB..         MOV     R3,?V15
   \   0002A8   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    831          }
   \                     ??MT_AfIncomingMsg_3:
   \   0002AB   7F10         MOV     R7,#0x10
   \   0002AD   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F5..         MOV     ?V5,A
   \   000007                ; Setup parameters for call to function osal_buffer_uint32
   \   000007   85..82       MOV     DPL,?V4
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V9
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V5,A
   \   00000D   75..00       MOV     ?V6,#0x0
   \   000010   78..         MOV     R0,#?V4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   0E           INC     R6
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine37_0
   \   000001                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   35..         ADDC    A,?V9
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000C   A3           INC     DPTR
   \   00000D   AE82         MOV     R6,DPL
   \   00000F   AF83         MOV     R7,DPH
   \   000011   8882         MOV     DPL,R0
   \   000013   8983         MOV     DPH,R1
   \   000015   A3           INC     DPTR
   \   000016                REQUIRE ??Subroutine38_0
   \   000016                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   E5..         MOV     A,?V8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   22           RET
    832          
    833          /**************************************************************************************************
    834           * @fn          MT_AfDataRetrieve
    835           *
    836           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    837           *          incoming AF message.
    838           *
    839           * input parameters
    840           *
    841           * @param pBuf - pointer to the received buffer
    842           *
    843           * output parameters
    844           *
    845           * @param rtrn - AF-Status of the operation.
    846           *
    847           * @return      None.
    848           **************************************************************************************************
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    852            #define MT_AF_RTV_HDR_SZ  2
    853          
    854            uint32 timestamp;
    855            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV     DPTR,#pMtAfInMsgList
   \   00000C   12....       LCALL   ?Subroutine14 & 0xFFFF
    856            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_18:
   \   00000F   75..01       MOV     ?V1,#0x1
    857            uint8 len = 0;
   \   000012   75..00       MOV     ?V0,#0x0
    858          
    859            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000015   EE           MOV     A,R6
   \   000016   2403         ADD     A,#0x3
   \   000018   FE           MOV     R6,A
   \   000019   5001         JNC     ??MT_AfDataRetrieve_0
   \   00001B   0F           INC     R7
    860            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   00001C                ; Setup parameters for call to function osal_build_uint32
   \   00001C   7904         MOV     R1,#0x4
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_build_uint32?relay; Banked call to: osal_build_uint32
   \   000024   8A..         MOV     ?V4,R2
   \   000026   8B..         MOV     ?V5,R3
   \   000028   8C..         MOV     ?V6,R4
   \   00002A   8D..         MOV     ?V7,R5
   \   00002C   8009         SJMP    ??CrossCallReturnLabel_19
    861          
    862            while (pItem != NULL)
    863            {
    864              pPrev = pItem;
    865              if (pItem->timestamp == timestamp)
    866              {
    867                break;
    868              }
    869              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_1:
   \   00002E   85..82       MOV     DPL,?V2
   \   000031   85..83       MOV     DPH,?V3
   \   000034   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000037   E5..         MOV     A,?V2
   \   000039   45..         ORL     A,?V3
   \   00003B   6063         JZ      ??MT_AfDataRetrieve_2
   \   00003D   85....       MOV     ?V8,?V2
   \   000040   85....       MOV     ?V9,?V3
   \   000043   85..82       MOV     DPL,?V2
   \   000046   85..83       MOV     DPH,?V3
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   78..         MOV     R0,#?V4
   \   00004F   12....       LCALL   ?L_EQ_X
   \   000052   70DA         JNZ     ??MT_AfDataRetrieve_1
    870            }
    871          
    872            if (pItem != NULL)
    873            {
    874              uint16 idx;
    875              uint8 *pRsp;
    876          
    877              pBuf += 4;
   \   000054   EE           MOV     A,R6
   \   000055   2404         ADD     A,#0x4
   \   000057   FE           MOV     R6,A
   \   000058   5001         JNC     ??MT_AfDataRetrieve_3
   \   00005A   0F           INC     R7
    878              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_3:
   \   00005B                ; Setup parameters for call to function osal_build_uint16
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
   \   000061   8A..         MOV     ?V6,R2
   \   000063   8B..         MOV     ?V7,R3
    879              len = pBuf[2];
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F5..         MOV     ?V0,A
    880          
    881              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   00006E   704D         JNZ     ??MT_AfDataRetrieve_4
    882              {
    883                if (pMtAfInMsgList == pItem)
   \   000070   85..82       MOV     DPL,?V2
   \   000073   85..83       MOV     DPH,?V3
   \   000076   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000079   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00007C   E5..         MOV     A,?V2
   \   00007E   6A           XRL     A,R2
   \   00007F   7003         JNZ     ??MT_AfDataRetrieve_5
   \   000081   E5..         MOV     A,?V3
   \   000083   6B           XRL     A,R3
   \                     ??MT_AfDataRetrieve_5:
   \   000084   7005         JNZ     ??MT_AfDataRetrieve_6
    884                {
    885                  pMtAfInMsgList = pItem->next;
   \   000086   90....       MOV     DPTR,#pMtAfInMsgList
   \   000089   8006         SJMP    ??MT_AfDataRetrieve_7
    886                }
    887                else
    888                {
    889                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_6:
   \   00008B   85..82       MOV     DPL,?V8
   \   00008E   85..83       MOV     DPH,?V9
   \                     ??MT_AfDataRetrieve_7:
   \   000091   E8           MOV     A,R0
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E9           MOV     A,R1
   \   000095   F0           MOVX    @DPTR,A
    890                }
    891                (void)osal_mem_free(pItem);
   \   000096                ; Setup parameters for call to function osal_mem_free
   \   000096   AA..         MOV     R2,?V2
   \   000098   AB..         MOV     R3,?V3
   \   00009A   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    892                rtrn = afStatus_SUCCESS;
   \   00009D   75..00       MOV     ?V1,#0x0
    893              }
    894              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    895              {
    896                rtrn = afStatus_MEM_FAIL;
    897                len = 0;
    898              }
    899              else
    900              {
    901                pRsp[0] = ZSuccess;
    902                pRsp[1] = len;
    903                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    904                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    905                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    906                (void)osal_mem_free(pRsp);
    907                return;
    908              }
    909            }
    910          
    911            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_2:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E5..         MOV     A,?V1
   \   0000A6   F0           MOVX    @DPTR,A
    912            pBuf[1] = len;
   \   0000A7   A3           INC     DPTR
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   F0           MOVX    @DPTR,A
    913            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    914                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000AB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000AB   EE           MOV     A,R6
   \   0000AC   FC           MOV     R4,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   FD           MOV     R5,A
   \   0000AF   7B02         MOV     R3,#0x2
   \   0000B1   7A12         MOV     R2,#0x12
   \   0000B3   7964         MOV     R1,#0x64
   \   0000B5   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    915          }
   \                     ??MT_AfDataRetrieve_8:
   \   0000B8   7F0B         MOV     R7,#0xb
   \   0000BA   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_4:
   \   0000BD                ; Setup parameters for call to function osal_mem_alloc
   \   0000BD   2402         ADD     A,#0x2
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E4           CLR     A
   \   0000C1   3400         ADDC    A,#0x0
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   0000C7   8A..         MOV     ?V4,R2
   \   0000C9   8B..         MOV     ?V5,R3
   \   0000CB   EA           MOV     A,R2
   \   0000CC   45..         ORL     A,?V5
   \   0000CE   7008         JNZ     ??MT_AfDataRetrieve_9
   \   0000D0   75..10       MOV     ?V1,#0x10
   \   0000D3   75..00       MOV     ?V0,#0x0
   \   0000D6   80C8         SJMP    ??MT_AfDataRetrieve_2
   \                     ??MT_AfDataRetrieve_9:
   \   0000D8   8A82         MOV     DPL,R2
   \   0000DA   8B83         MOV     DPH,R3
   \   0000DC   E4           CLR     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2                ; Setup parameters for call to function osal_memcpy
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   25..         ADD     A,?V6
   \   0000ED   F5..         MOV     ?V8,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   35..         ADDC    A,?V7
   \   0000F3   F5..         MOV     ?V9,A
   \   0000F5   75..00       MOV     ?V10,#0x0
   \   0000F8   78..         MOV     R0,#?V8
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FD   AC..         MOV     R4,?V0
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   EA           MOV     A,R2
   \   000102   2402         ADD     A,#0x2
   \   000104   FA           MOV     R2,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V5
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00010C   7403         MOV     A,#0x3
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000111                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000111   AC..         MOV     R4,?V4
   \   000113   AD..         MOV     R5,?V5
   \   000115   7402         MOV     A,#0x2
   \   000117   25..         ADD     A,?V0
   \   000119   FB           MOV     R3,A
   \   00011A   7A12         MOV     R2,#0x12
   \   00011C   7964         MOV     R1,#0x64
   \   00011E   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV     R2,?V4
   \   000123   AB..         MOV     R3,?V5
   \   000125   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   000128   808E         SJMP    ??MT_AfDataRetrieve_8
    916          
    917          /**************************************************************************************************
    918           * @fn          MT_AfDataStore
    919           *
    920           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    921           *          outgoing AF message.
    922           *
    923           * input parameters
    924           *
    925           * @param pBuf - pointer to the received buffer
    926           *
    927           * output parameters
    928           *
    929           * @param rtrn - AF-Status of the operation.
    930           *
    931           * @return      None.
    932           **************************************************************************************************
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    936            uint16 idx;
    937            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    938          
    939            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_AfDataStore_0
   \   00001D   0F           INC     R7
    940            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint16
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_build_uint16?relay; Banked call to: osal_build_uint16
    941            len = pBuf[2];
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FC           MOV     R4,A
    942            pBuf += 3;
   \   00002C   EE           MOV     A,R6
   \   00002D   2403         ADD     A,#0x3
   \   00002F   FE           MOV     R6,A
   \   000030   5001         JNC     ??MT_AfDataStore_1
   \   000032   0F           INC     R7
    943          
    944            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000033   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000036   700B         JNZ     ??MT_AfDataStore_2
    945            {
    946              rtrn = afStatus_MEM_FAIL;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   7410         MOV     A,#0x10
   \   000040   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    947            }
    948            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F583         MOV     DPH,A
   \   000046   8882         MOV     DPL,R0
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V4,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V5,A
   \   00004F   EC           MOV     A,R4
   \   000050   7060         JNZ     ??MT_AfDataStore_4
    949            {
    950              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    951                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    952                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   000052                ; Setup parameters for call to function AF_DataRequest
   \   000052   90....       MOV     DPTR,#pMtAfDataReq + 1
   \   000055   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0,A
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   90....       MOV     DPTR,#pMtAfDataReq
   \   000063   E0           MOVX    A,@DPTR
   \   000064   2414         ADD     A,#0x14
   \   000066   F5..         MOV     ?V0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F5..         MOV     ?V1,A
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   78..         MOV     R0,#?V4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00007B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FD           MOV     R5,A
   \   000091   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000094   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000097   7409         MOV     A,#0x9
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   F0           MOVX    @DPTR,A
    953              (void)osal_mem_free(pMtAfDataReq);
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000A7   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    954              pMtAfDataReq = NULL;
   \   0000AA   90....       MOV     DPTR,#pMtAfDataReq
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   8025         SJMP    ??MT_AfDataStore_3
    955            }
    956            else
    957            {
    958              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000B2                ; Setup parameters for call to function osal_memcpy
   \   0000B2   8E..         MOV     ?V0,R6
   \   0000B4   8F..         MOV     ?V1,R7
   \   0000B6   75..00       MOV     ?V2,#0x0
   \   0000B9   78..         MOV     R0,#?V0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   E5..         MOV     A,?V4
   \   0000C2   2A           ADD     A,R2
   \   0000C3   FA           MOV     R2,A
   \   0000C4   E5..         MOV     A,?V5
   \   0000C6   3B           ADDC    A,R3
   \   0000C7   FB           MOV     R3,A
   \   0000C8   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000CB   7403         MOV     A,#0x3
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
    959              rtrn = afStatus_SUCCESS;
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   E4           CLR     A
    960            }
   \                     ??MT_AfDataStore_3:
   \   0000D7   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    961          
    962            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    963                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_65:
   \   0000DA   7A11         MOV     R2,#0x11
   \   0000DC   7964         MOV     R1,#0x64
   \   0000DE   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay; Banked call to: MT_BuildAndSendZToolResponse
    964          }
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine34_0
   \   000007                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfExec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfReflectError?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfIncomingMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRetrieve?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    965          
    966          /**************************************************************************************************
    967           * @fn          MT_AfAPSF_ConfigSet
    968           *
    969           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    970           *
    971           * input parameters
    972           *
    973           * @param       pBuf - Pointer to the received buffer.
    974           *
    975           * output parameters
    976           *
    977           * None.
    978           *
    979           * @return      None.
    980           */
    981          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    982          {
    983            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    984            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    985          
    986            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    987                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    988          }
    989          
    990          /**************************************************************************************************
    991           * @fn          MT_AfAPSF_ConfigGet
    992           *
    993           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    994           *
    995           * input parameters
    996           *
    997           * @param       pBuf - Pointer to the received buffer.
    998           *
    999           * output parameters
   1000           *
   1001           * None.
   1002           *
   1003           * @return      None.
   1004           */
   1005          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1006          {
   1007            afAPSF_Config_t cfg = { 0, 0 };
   1008            uint8 buf[2];
   1009          
   1010            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1011          
   1012            buf[0] = cfg.frameDelay;
   1013            buf[1] = cfg.windowSize;
   1014          
   1015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1016                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1017          }
   1018          
   1019          /***************************************************************************************************
   1020          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     19   MT_AfCommandProcessing
        0     19   -> MT_AfDataRequest
        0     19   -> MT_AfDataRequestSrcRtg
        0     19   -> MT_AfDataRetrieve
        0     19   -> MT_AfDataStore
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> MT_BuildEndpointDesc
        0     19   -> afAPSF_ConfigGet
        0     19   -> afAPSF_ConfigSet
        0     19   -> afDelete
        0     19   -> afRegister
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     63   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_build_uint16
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     39   -> osal_start_timerEx
      1     65   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_build_uint16
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     41   MT_AfDataRetrieve
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_build_uint16
        0     19   -> osal_build_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     43   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_build_uint16
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     28   MT_AfIncomingMsg
        0     24   -> MT_BuildAndSendZToolResponse
        0     28   -> osal_buffer_uint32
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     24   -> osal_set_event
        0     28   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       6  ??MT_AfCommandProcessing?relay
       6  ??MT_AfDataConfirm?relay
       6  ??MT_AfDataRequest?relay
       6  ??MT_AfDataRequestSrcRtg?relay
       6  ??MT_AfDataRetrieve?relay
       6  ??MT_AfDataStore?relay
       6  ??MT_AfExec?relay
       6  ??MT_AfIncomingMsg?relay
       6  ??MT_AfReflectError?relay
       8  ??Subroutine34_0
       6  ??Subroutine35_0
       5  ??Subroutine36_0
       4  ??Subroutine37_0
       6  ??Subroutine38_0
       6  ??Subroutine39_0
       6  ??Subroutine40_0
       8  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine10
      12  ?Subroutine11
      19  ?Subroutine12
       3  ?Subroutine13
       8  ?Subroutine14
       6  ?Subroutine15
      11  ?Subroutine16
      13  ?Subroutine17
       7  ?Subroutine18
      10  ?Subroutine19
      22  ?Subroutine2
       5  ?Subroutine20
       7  ?Subroutine21
       8  ?Subroutine22
       5  ?Subroutine23
       5  ?Subroutine24
       8  ?Subroutine25
      13  ?Subroutine26
       9  ?Subroutine27
       3  ?Subroutine28
      11  ?Subroutine29
       3  ?Subroutine3
       7  ?Subroutine30
       7  ?Subroutine31
       9  ?Subroutine32
       9  ?Subroutine33
       1  ?Subroutine4
      21  ?Subroutine5
       7  ?Subroutine6
       8  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
     389  MT_AfCommandProcessing
      49  MT_AfDataConfirm
     684  MT_AfDataRequest
     369  MT_AfDataRequestSrcRtg
     298  MT_AfDataRetrieve
     230  MT_AfDataStore
     175  MT_AfExec
     688  MT_AfIncomingMsg
     102  MT_AfReflectError
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 336 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 3 390 bytes of CODE  memory
     2 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
