###############################################################################
#
# IAR C/C++ Compiler V9.10.1.2146 for 8051                22/Jan/2018  15:11:40
# Copyright 2004-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\GitHub\面板Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=120000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=180000)
#        -f "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "E:\GitHub\面板Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c"
#        -D SCENE_SELECTOR_TOUCHKEY -D xSCENE_SELECTOR -D ISR_KEYINTERRUPT -D
#        OSC32K_CRYSTAL_INSTALLED=FALSE -D xxHAL_PA_LNA -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D POWER_SAVING -D
#        NWK_AUTO_POLL -D xHOLD_AUTO_START -D xZTOOL_P1 -D MT_TASK -D
#        MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_GROUPS -D ZCL_SCENES
#        -D ZCL_ON_OFF -D ZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
#        FEATURE_SYSTEM_STATS -lC "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        -lA "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddSceneSelector\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\AddCommon\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Add\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\Source\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\Source\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        E:\GitHub\面板Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SceneSelector\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

E:\GitHub\面板Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )
    164            uint8 MatchRsps = 0;
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    191          
    192          /*********************************************************************
    193           * EXTERNAL VARIABLES
    194           */
    195          
    196          /*********************************************************************
    197           * EXTERNAL FUNCTIONS
    198           */
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          
    204          void ZDApp_NetworkStartEvt( void );
    205          void ZDApp_DeviceAuthEvt( void );
    206          void ZDApp_SaveNetworkStateEvt( void );
    207          
    208          uint8 ZDApp_ReadNetworkRestoreState( void );
    209          uint8 ZDApp_RestoreNetworkState( void );
    210          void ZDAppDetermineDeviceType( void );
    211          void ZDApp_InitUserDesc( void );
    212          void ZDAppCheckForHoldKey( void );
    213          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    214          void ZDApp_ProcessNetworkJoin( void );
    215          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    216          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    217          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    218          
    219          void ZDApp_SecInit( uint8 state );
    220          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    221          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    222          
    223          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    224          
    225          void ZDApp_ResetTimerStart( uint16 delay );
    226          void ZDApp_ResetTimerCancel( void );
    227          void ZDApp_LeaveCtrlInit( void );
    228          void ZDApp_LeaveCtrlSet( uint8 ra );
    229          uint8 ZDApp_LeaveCtrlBypass( void );
    230          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    231          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    232                                  uint8 removeChildren );
    233          void ZDApp_NodeProfileSync( uint8 stackProfile );
    234          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    235          void ZDApp_RegisterCBs( void );
    236          void ZDApp_InitZdoCBFunc(void);
    237          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    238          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    239          void ZDApp_InitPendingBind( void );
    240          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    241          void ZDApp_AgeOutPendingBindEntry( void );
    242          #endif
    243          
    244          void ZDApp_SetParentAnnceTimer( void );
    245          
    246          /*********************************************************************
    247           * LOCAL VARIABLES
    248           */
    249          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    254          
    255          #if defined( HOLD_AUTO_START )
    256            devStates_t devState = DEV_HOLD;
    257          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    258            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    259          #endif
    260          
    261          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    263          
    264          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    265            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    266            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    267                                  // to parent. Set to make the device do an Orphan scan.
    268          #else
    269            // Set the default to coodinator
    270            devStartModes_t devStartMode = MODE_HARD;
    271          #endif
    272          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    275          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    276          {
    277            ZDO_EP,
    278            &ZDAppTaskID,
    279            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    280            (afNetworkLatencyReq_t)0            // No Network Latency req
    281          };
    282          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    283          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    284          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    286          
    287          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    288          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    289          
    290          /*********************************************************************
    291           * @fn      ZDApp_Init
    292           *
    293           * @brief   ZDApp Initialization function.
    294           *
    295           * @param   task_id - ZDApp Task ID
    296           *
    297           * @return  None
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    300          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    301            // Save the task ID
    302            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    303          
    304            // Initialize the ZDO global device short address storage
    305            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    306            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    307            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
    308          
    309            // Check for manual "Hold Auto Start"
    310            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay; Banked call to: ZDAppCheckForHoldKey
    311          
    312            // Initialize ZDO items and setup the device - type of device to create.
    313            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay     ; Banked call to: ZDO_Init
    314          
    315            // Register the endpoint description with the AF
    316            // This task doesn't have a Simple description, but we still need
    317            // to register the endpoint.
    318            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    319          
    320          #if defined( ZDO_USERDESC_RESPONSE )
    321            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   ??ZDApp_InitUserDesc?relay; Banked call to: ZDApp_InitUserDesc
    322          #endif // ZDO_USERDESC_RESPONSE
    323          
    324            // Start the device?
    325            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    326            {
    327              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
   \   000039   8014         SJMP    ??ZDApp_Init_1
    328            }
    329            else
    330            {
    331              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV     R2,#-0x1
   \   00003D   7BFF         MOV     R3,#-0x1
   \   00003F   12....       LCALL   ??ZDOInitDevice?relay; Banked call to: ZDOInitDevice
    332              // Blink LED to indicate HOLD_START
    333              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV     R4,#-0xc
   \   000044   7D01         MOV     R5,#0x1
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
    334            }
    335          
    336            // Initialize the ZDO callback function pointers zdoCBFunc[]
    337            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay; Banked call to: ZDApp_InitZdoCBFunc
    338          
    339            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL   ??ZDApp_RegisterCBs?relay; Banked call to: ZDApp_RegisterCBs
    340          
    341          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    342          #if defined ( REFLECTOR )
    343            ZDApp_InitPendingBind();
   \   000055                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000055   12....       LCALL   ??ZDApp_InitPendingBind?relay; Banked call to: ZDApp_InitPendingBind
    344          #endif
    345          #endif
    346          } /* ZDApp_Init() */
   \   000058   02....       LJMP    ??Subroutine44_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    347          
    348          /*********************************************************************
    349           * @fn          ZDApp_SecInit
    350           *
    351           * @brief       ZDApp initialize security.
    352           *
    353           * @param       state - device initialization state
    354           *
    355           * @return      none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    358          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    359            uint8 zgPreConfigKey[SEC_KEY_LEN];
    360          
    361            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    362            {
    363              // Set the Trust Center bit
    364              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    365            }
    366          
    367            // Initialize ZigBee Device Security Manager
    368            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   ??ZDSecMgrInit?relay ; Banked call to: ZDSecMgrInit
    369          
    370            if ( ZG_SECURE_ENABLED )
    371            {
    372              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0
   \   000011   6045         JZ      ??ZDApp_SecInit_0
    373              {
    374                nwkFrameCounter = 0;
   \   000013   90....       MOV     DPTR,#nwkFrameCounter
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    375          
    376                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV     DPTR,#_NIB + 61
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7034         JNZ     ??ZDApp_SecInit_0
    377                {
    378                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    379                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV     DPTR,#zgSecurityMode
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   702C         JNZ     ??ZDApp_SecInit_0
   \   00002C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6026         JZ      ??ZDApp_SecInit_0
    380                  {
    381                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   AC..         MOV     R4,?XSP + 0
   \   000034   AD..         MOV     R5,?XSP + 1
   \   000036   7A62         MOV     R2,#0x62
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??ZDSecMgrReadKeyFromNv?relay; Banked call to: ZDSecMgrReadKeyFromNv
    382                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00003D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   ??SSP_UpdateNwkKey?relay; Banked call to: SSP_UpdateNwkKey
    383                      SSP_SwitchNwkKey( 0 );
   \   000046                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   ??SSP_SwitchNwkKey?relay; Banked call to: SSP_SwitchNwkKey
    384          
    385                      // clear local copy of key
    386                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C10         MOV     R4,#0x10
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7900         MOV     R1,#0x0
   \   000051   AA..         MOV     R2,?XSP + 0
   \   000053   AB..         MOV     R3,?XSP + 1
   \   000055   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    387                  }
    388                }
    389              }
    390          
    391              // clean the new devices list when Security module is initialized
    392              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000058   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005B   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00005E   6021         JZ      ??ZDApp_SecInit_1
    393              {
    394                ZDAppNewDevice_t *pNewDeviceNext;
    395          
    396                while ( ZDApp_NewDeviceList )
    397                {
    398                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000060   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000063   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000066   FE           MOV     R6,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FF           MOV     R7,A
    399                  osal_mem_free( ZDApp_NewDeviceList );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006D   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000070   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
    400                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000073   EE           MOV     A,R6
   \   000074   F8           MOV     R0,A
   \   000075   EF           MOV     A,R7
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    401                }
   \                     ??CrossCallReturnLabel_49:
   \   00007D   E8           MOV     A,R0
   \   00007E   49           ORL     A,R1
   \   00007F   70DF         JNZ     ??ZDApp_SecInit_2
    402              }
    403            }
    404          }
   \                     ??ZDApp_SecInit_1:
   \   000081   7410         MOV     A,#0x10
   \   000083   02....       LJMP    ??Subroutine47_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine44_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    405          
    406          /*********************************************************************
    407           * @fn      ZDApp_event_loop()
    408           *
    409           * @brief   Main event loop for Zigbee device objects task. This function
    410           *          should be called at periodic intervals.
    411           *
    412           * @param   task_id - Task ID
    413           * @param   events  - Bitmap of events
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    419            uint8 *msg_ptr;
    420          
    421            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   7045         JNZ     ??ZDApp_event_loop_0
    422            {
    423              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    424              {
    425                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    426          
    427                // Release the memory
    428                osal_msg_deallocate( msg_ptr );
    429              }
    430          
    431              // Return unprocessed events
    432              return (events ^ SYS_EVENT_MSG);
    433            }
    434          
    435            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5074         JNC     ??ZDApp_event_loop_1
    436            {
    437          		//add by jc,for 加网失败10次后，等待1分钟再加网
    438          		static int8 initFailCounter = 0;
    439          		
    440          		if(initFailCounter++ >= 10)
   \   000014   90....       MOV     DPTR,#??initFailCounter
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   7401         MOV     A,#0x1
   \   00001B   28           ADD     A,R0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   EE           MOV     A,R6
   \   00001E   6401         XRL     A,#0x1
   \   000020   FE           MOV     R6,A
   \   000021   E8           MOV     A,R0
   \   000022   C3           CLR     C
   \   000023   940A         SUBB    A,#0xa
   \   000025   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000027   65D0         XRL     A,PSW
   \   000029   33           RLC     A
   \   00002A   4041         JC      ??ZDApp_event_loop_2
    441          		{
    442          			osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, 6000);
   \   00002C                ; Setup parameters for call to function osal_start_timerEx
   \   00002C   90....       MOV     DPTR,#__Constant_1770
   \   00002F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7B00         MOV     R3,#0x0
   \   000036   90....       MOV     DPTR,#ZDAppTaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    443          			initFailCounter = 0;
   \   000043   90....       MOV     DPTR,#??initFailCounter
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    444          			
    445          			return (events ^ ZDO_NETWORK_INIT);
   \   000048   803B         SJMP    ??ZDApp_event_loop_3
    446          		}
   \                     ??ZDApp_event_loop_4:
   \   00004A                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   00004A   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay; Banked call to: ZDApp_ProcessOSALMsg
   \   00004D                ; Setup parameters for call to function osal_msg_deallocate
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   000054                ; Setup parameters for call to function osal_msg_receive
   \   000054   90....       MOV     DPTR,#ZDAppTaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   00005C   8A..         MOV     ?V0,R2
   \   00005E   8B..         MOV     ?V1,R3
   \   000060   EA           MOV     A,R2
   \   000061   45..         ORL     A,?V1
   \   000063   70E5         JNZ     ??ZDApp_event_loop_4
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   6480         XRL     A,#0x80
   \   00006A   02....       LJMP    ??ZDApp_event_loop_5 & 0xFFFF
    447          		// end of add by jc
    448          		
    449              // Initialize apps and start the network
    450              ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_event_loop_2:
   \   00006D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006D   7901         MOV     R1,#0x1
   \   00006F   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    451          
    452              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    453                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000072                ; Setup parameters for call to function ZDO_StartDevice
   \   000072   7C0F         MOV     R4,#0xf
   \   000074   7B0F         MOV     R3,#0xf
   \   000076   90....       MOV     DPTR,#devStartMode
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   5407         ANL     A,#0x7
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??ZDO_StartDevice?relay; Banked call to: ZDO_StartDevice
    454          
    455              // Return unprocessed events
    456              return (events ^ ZDO_NETWORK_INIT);
   \                     ??ZDApp_event_loop_3:
   \   000085   EE           MOV     A,R6
   \   000086   806F         SJMP    ??ZDApp_event_loop_6
    457            }
    458          
    459            if ( ZSTACK_ROUTER_BUILD )
    460            {
    461              if ( events & ZDO_NETWORK_START )
    462              {
    463                ZDApp_NetworkStartEvt();
    464          
    465                // Return unprocessed events
    466                return (events ^ ZDO_NETWORK_START);
    467              }
    468          
    469              if ( events & ZDO_ROUTER_START )
    470              {
    471                if ( nwkStatus == ZSuccess )
    472                {
    473                  if ( devState == DEV_END_DEVICE )
    474                  {
    475                    ZDApp_ChangeState( DEV_ROUTER );
    476                  }
    477          
    478                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    479          
    480                  if ( zgChildAgingEnable == TRUE )
    481                  {
    482                    // Once the device has changed its state to a ROUTER set the timer to send
    483                    // Parent annce
    484                    ZDApp_SetParentAnnceTimer();
    485                  }
    486                }
    487                else
    488                {
    489                  // remain as end device
    490                }
    491                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    492          
    493                // Return unprocessed events
    494                return (events ^ ZDO_ROUTER_START);
    495              }
    496          
    497              if ( events & ZDO_PARENT_ANNCE_EVT )
    498              {
    499                ZDApp_SendParentAnnce();
    500          
    501                // Return unprocessed events
    502                return (events ^ ZDO_PARENT_ANNCE_EVT);
    503              }
    504            }
    505          
    506            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000088   EF           MOV     A,R7
   \   000089   5420         ANL     A,#0x20
   \   00008B   603B         JZ      ??ZDApp_event_loop_7
    507            {
    508              if( devState == DEV_NWK_BACKOFF )
   \   00008D   90....       MOV     DPTR,#devState
   \   000090   E0           MOVX    A,@DPTR
   \   000091   640C         XRL     A,#0xc
   \   000093   700D         JNZ     ??ZDApp_event_loop_8
    509              {
    510                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000095                ; Setup parameters for call to function ZDApp_ChangeState
   \   000095   7902         MOV     R1,#0x2
   \   000097   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    511                // Restart scan for rejoin	  
    512                ZDApp_StartJoiningCycle();
   \   00009A                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   00009A   12....       LCALL   ??ZDApp_StartJoiningCycle?relay; Banked call to: ZDApp_StartJoiningCycle
    513                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   0000A0   800B         SJMP    ??ZDApp_event_loop_9
    514              }
    515              else
    516              {
    517                // Rejoin backoff, silent period
    518                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_8:
   \   0000A2                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A2   790C         MOV     R1,#0xc
   \   0000A4   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    519                ZDApp_StopJoiningCycle();
   \   0000A7                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000A7   12....       LCALL   ??ZDApp_StopJoiningCycle?relay; Banked call to: ZDApp_StopJoiningCycle
    520                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );	  
   \   0000AA                ; Setup parameters for call to function osal_start_timerEx
   \   0000AA   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_9:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B0   7A00         MOV     R2,#0x0
   \   0000B2   7B20         MOV     R3,#0x20
   \   0000B4   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000BC   7404         MOV     A,#0x4
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
    521              }
    522          
    523              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   6420         XRL     A,#0x20
   \   0000C6   8078         SJMP    ??ZDApp_event_loop_5
    524            }
    525          
    526            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_7:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   5410         ANL     A,#0x10
   \   0000CB   602E         JZ      ??ZDApp_event_loop_10
    527            {
    528              ZDO_UpdateNwkStatus( devState );
   \   0000CD                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000CD   90....       MOV     DPTR,#devState
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   ??ZDO_UpdateNwkStatus?relay; Banked call to: ZDO_UpdateNwkStatus
    529          
    530              // At start up, do one MTO route discovery if the device is a concentrator
    531              if ( zgConcentratorEnable == TRUE )
   \   0000D5   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   6401         XRL     A,#0x1
   \   0000DB   7017         JNZ     ??ZDApp_event_loop_11
    532              {
    533                // Start next event
    534                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000DD                ; Setup parameters for call to function osal_start_timerEx
   \   0000DD   90....       MOV     DPTR,#__Constant_64
   \   0000E0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E3   7A00         MOV     R2,#0x0
   \   0000E5   7B08         MOV     R3,#0x8
   \   0000E7   90....       MOV     DPTR,#NWK_TaskID
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000EF   7404         MOV     A,#0x4
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
    535              }
    536          
    537              // Return unprocessed events
    538              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_11:
   \   0000F4   EE           MOV     A,R6
   \   0000F5   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_6:
   \   0000F7   FA           MOV     R2,A
   \   0000F8   EF           MOV     A,R7
   \   0000F9   8045         SJMP    ??ZDApp_event_loop_5
    539            }
    540          
    541            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_10:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   5408         ANL     A,#0x8
   \   0000FE   6006         JZ      ??ZDApp_event_loop_12
    542            {
    543              // User defined logic
    544          
    545              // Return unprocessed events
    546              return (events ^ ZDO_COMMAND_CNF);
   \   000100   EE           MOV     A,R6
   \   000101   6408         XRL     A,#0x8
   \   000103   FA           MOV     R2,A
   \   000104   8046         SJMP    ??ZDApp_event_loop_13
    547            }
    548          
    549            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   000106   EF           MOV     A,R7
   \   000107   5401         ANL     A,#0x1
   \   000109   6019         JZ      ??ZDApp_event_loop_14
    550            {
    551              // Save only in valid state
    552              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   00010B   90....       MOV     DPTR,#_NIB + 35
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F8           MOV     R0,A
   \   000110   7408         MOV     A,#0x8
   \   000112   68           XRL     A,R0
   \   000113   6005         JZ      ??ZDApp_event_loop_15
   \   000115   7404         MOV     A,#0x4
   \   000117   68           XRL     A,R0
   \   000118   7003         JNZ     ??ZDApp_event_loop_16
    553              {
    554                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_15:
   \   00011A                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00011A   12....       LCALL   ??ZDApp_SaveNetworkStateEvt?relay; Banked call to: ZDApp_SaveNetworkStateEvt
    555              }
    556          
    557              // Return unprocessed events
    558              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_16:
   \   00011D   EE           MOV     A,R6
   \   00011E   FA           MOV     R2,A
   \   00011F   EF           MOV     A,R7
   \   000120   6401         XRL     A,#0x1
   \   000122   801C         SJMP    ??ZDApp_event_loop_5
    559            }
    560          
    561            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_14:
   \   000124   EE           MOV     A,R6
   \   000125   5404         ANL     A,#0x4
   \   000127   600A         JZ      ??ZDApp_event_loop_17
    562            {
    563          #ifdef ZBA_FALLBACK_NWKKEY
    564              if ( devState == DEV_END_DEVICE_UNAUTH )
    565              {
    566                ZDSecMgrFallbackNwkKey();
    567              }
    568              else
    569          #endif
    570              {
    571                // Set the NV startup option to force a "new" join.
    572                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000129                ; Setup parameters for call to function zgWriteStartupOptions
   \   000129   7A02         MOV     R2,#0x2
   \   00012B   79FF         MOV     R1,#-0x1
   \   00012D   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
    573          
    574                // The device has been in the UNAUTH state, so reset
    575                // Note: there will be no return from this call
    576                SystemResetSoft();
   \   000130                ; Setup parameters for call to function Onboard_soft_reset
   \   000130   12....       LCALL   Onboard_soft_reset & 0xFFFF
    577              }
    578            }
    579          
    580          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    581            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_17:
   \   000133   EF           MOV     A,R7
   \   000134   5410         ANL     A,#0x10
   \   000136   600B         JZ      ??ZDApp_event_loop_18
    582            {
    583          #if defined ( REFLECTOR )
    584              ZDApp_AgeOutPendingBindEntry();
   \   000138                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   000138   12....       LCALL   ??ZDApp_AgeOutPendingBindEntry?relay; Banked call to: ZDApp_AgeOutPendingBindEntry
    585          #endif
    586              // Return unprocessed events
    587              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   00013B   EE           MOV     A,R6
   \   00013C   FA           MOV     R2,A
   \   00013D   EF           MOV     A,R7
   \   00013E   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_5:
   \   000140   FB           MOV     R3,A
   \   000141   8009         SJMP    ??ZDApp_event_loop_13
    588            }
    589          #endif
    590          
    591            if ( ZG_SECURE_ENABLED )
    592            {
    593              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_18:
   \   000143                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000143   EE           MOV     A,R6
   \   000144   FA           MOV     R2,A
   \   000145   EF           MOV     A,R7
   \   000146   FB           MOV     R3,A
   \   000147   A9..         MOV     R1,?V2
   \   000149   12....       LCALL   ??ZDApp_ProcessSecEvent?relay; Banked call to: ZDApp_ProcessSecEvent
    594            }
   \                     ??ZDApp_event_loop_13:
   \   00014C   02....       LJMP    ?Subroutine1 & 0xFFFF
    595            else
    596            {
    597              // Discard or make more handlers
    598              return 0;
    599            }
    600          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??initFailCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    601          
    602          /*********************************************************************
    603           * @fn      ZDApp_ProcessSecEvent()
    604           *
    605           * @brief   Process incoming security events.
    606           *
    607           * @param   task_id - Task ID
    608           * @param   events  - Bitmap of events
    609           *
    610           * @return  none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    614            (void)task_id;  // Intentionally unreferenced parameter
    615          
    616            if ( ZSTACK_ROUTER_BUILD )
    617            {
    618              if ( events & ZDO_NEW_DEVICE )
    619              {
    620                // process the new device event
    621                if ( ZDApp_NewDeviceList )
    622                {
    623                  ZDAppNewDevice_t *pNewDevice;
    624                  uint16 timeDelta;
    625          
    626                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    627          
    628                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    629                  osal_mem_free( ZDApp_NewDeviceList );
    630                  ZDApp_NewDeviceList = pNewDevice;
    631          
    632                  if ( pNewDevice )
    633                  {
    634                    timeDelta = pNewDevice->timeDelta;
    635                    pNewDevice = pNewDevice->next;
    636          
    637                    while ( pNewDevice )
    638                    {
    639                      pNewDevice->timeDelta -= timeDelta;
    640                      pNewDevice = pNewDevice->next;
    641                    }
    642          
    643                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    644                  }
    645                }
    646          
    647                // Return unprocessed events
    648                return (events ^ ZDO_NEW_DEVICE);
    649              }
    650            }
    651          
    652            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV     A,R6
   \   00000A   5480         ANL     A,#0x80
   \   00000C   600A         JZ      ??ZDApp_ProcessSecEvent_0
    653            {
    654              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay; Banked call to: ZDApp_DeviceAuthEvt
    655          
    656              // Return unprocessed events
    657              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV     A,R6
   \   000012   6480         XRL     A,#0x80
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   802B         SJMP    ??ZDApp_ProcessSecEvent_1
    658            }
    659          
    660            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EF           MOV     A,R7
   \   000019   5402         ANL     A,#0x2
   \   00001B   600A         JZ      ??ZDApp_ProcessSecEvent_2
    661            {
    662              ZDApp_SaveNwkKey();
   \   00001D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001D   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    663          
    664              // Return unprocessed events
    665              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   6402         XRL     A,#0x2
   \   000025   801C         SJMP    ??ZDApp_ProcessSecEvent_1
    666            }
    667          
    668            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000027   EF           MOV     A,R7
   \   000028   5408         ANL     A,#0x8
   \   00002A   600A         JZ      ??ZDApp_ProcessSecEvent_3
    669            {
    670          #if defined (NV_RESTORE)
    671              ZDSecMgrSaveApsLinkKey();
   \   00002C                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   00002C   12....       LCALL   ??ZDSecMgrSaveApsLinkKey?relay; Banked call to: ZDSecMgrSaveApsLinkKey
    672          #endif // (NV_RESTORE)
    673          
    674              // Return unprocessed events
    675              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   6408         XRL     A,#0x8
   \   000034   800D         SJMP    ??ZDApp_ProcessSecEvent_1
    676            }
    677          
    678            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000036   EF           MOV     A,R7
   \   000037   5404         ANL     A,#0x4
   \   000039   600B         JZ      ??ZDApp_ProcessSecEvent_4
    679            {
    680              ZDSecMgrSaveTCLinkKey();
   \   00003B                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00003B   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay; Banked call to: ZDSecMgrSaveTCLinkKey
    681          
    682              // Return unprocessed events
    683              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000043   FB           MOV     R3,A
   \   000044   8004         SJMP    ??ZDApp_ProcessSecEvent_5
    684            }
    685          
    686            // Discard or make more handlers
    687            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000046   7A00         MOV     R2,#0x0
   \   000048   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00004A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    688          }
    689          
    690          /*********************************************************************
    691           * Application Functions
    692           */
    693          
    694          /*********************************************************************
    695           * @fn      ZDOInitDevice
    696           *
    697           * @brief   Start the device in the network.  This function will read
    698           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    699           *   restore the network state of the device.
    700           *
    701           * @param   startDelay - timeDelay to start device (in milliseconds).
    702           *                       There is a jitter added to this delay:
    703           *                       ((NWK_START_DELAY + startDelay)
    704           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    705           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    706           *                       this function will hold the network init. Application
    707           *                       can start the device.
    708           *
    709           * NOTE:    If the application would like to force a "new" join, the
    710           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    711           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    712           *          this function. "new" join means to not restore the network
    713           *          state of the device. Use zgWriteStartupOptions() to set these
    714           *          options.
    715           *
    716           * @return
    717           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    718           *          restored.
    719           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    720           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    721           *          it could mean that there was no network state to restore.
    722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    723          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    724          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    725            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000009   75..01       MOV     ?V0,#0x1
    726            uint16 extendedDelay = 0;
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   7F00         MOV     R7,#0x0
    727          
    728            if ( devState == DEV_HOLD )
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7005         JNZ     ??ZDOInitDevice_0
    729            {
    730              // Initialize the RAM items table, in case an NV item has been updated.
    731              zgInitItems( FALSE );
   \   000016                ; Setup parameters for call to function zgInitItems
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   ??zgInitItems?relay  ; Banked call to: zgInitItems
    732            }
    733          
    734            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001B                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001B   12....       LCALL   ??ZDConfig_InitDescriptors?relay; Banked call to: ZDConfig_InitDescriptors
    735            //devtag.071807.todo - fix this temporary solution
    736            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000021   E0           MOVX    A,@DPTR
   \   000022   90....       MOV     DPTR,#_NIB + 14
   \   000025   F0           MOVX    @DPTR,A
    737          
    738          #if defined ( NV_RESTORE )
    739            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    740            // while booting to skip past NV Restore.
    741            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000026   90....       MOV     DPTR,#zdappHoldKeys
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6404         XRL     A,#0x4
   \   00002C   7064         JNZ     ??ZDOInitDevice_1
    742            {
    743              zdappHoldKeys = 0;   // Only once
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    744              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    745            }
    746            else
    747            {
    748              // Determine if NV should be restored
    749              networkStateNV = ZDApp_ReadNetworkRestoreState();
    750            }
    751          
    752            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    753            {
    754              networkStateNV = ZDApp_RestoreNetworkState();
    755              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    756            }
    757            else
    758            {
    759              // Wipe out the network state in NV
    760              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000030                ; Setup parameters for call to function NLME_InitNV
   \   000030   12....       LCALL   ??NLME_InitNV?relay  ; Banked call to: NLME_InitNV
    761              NLME_SetDefaultNV();
   \   000033                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000033   12....       LCALL   ??NLME_SetDefaultNV?relay; Banked call to: NLME_SetDefaultNV
    762              // clear NWK key values
    763              ZDSecMgrClearNVKeyValues();
   \   000036                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000036   12....       LCALL   ??ZDSecMgrClearNVKeyValues?relay; Banked call to: ZDSecMgrClearNVKeyValues
    764            }
    765          #endif
    766          
    767            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   000039   7401         MOV     A,#0x1
   \   00003B   65..         XRL     A,?V0
   \   00003D   7025         JNZ     ??ZDOInitDevice_4
    768            {
    769              ZDAppDetermineDeviceType();
   \   00003F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00003F   12....       LCALL   ??ZDAppDetermineDeviceType?relay; Banked call to: ZDAppDetermineDeviceType
    770          
    771              // Only delay if joining network - not restoring network state
    772              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    773                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000042                ; Setup parameters for call to function osal_rand
   \   000042   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000045   EA           MOV     A,R2
   \   000046   547F         ANL     A,#0x7f
   \   000048   F8           MOV     R0,A
   \   000049   E5..         MOV     A,?V2
   \   00004B   28           ADD     A,R0
   \   00004C   F8           MOV     R0,A
   \   00004D   E4           CLR     A
   \   00004E   35..         ADDC    A,?V3
   \   000050   F9           MOV     R1,A
   \   000051   E8           MOV     A,R0
   \   000052   2464         ADD     A,#0x64
   \   000054   FE           MOV     R6,A
   \   000055   E4           CLR     A
   \   000056   39           ADDC    A,R1
   \   000057   FF           MOV     R7,A
    774          
    775              runtimeChannel = zgDefaultChannelList;
   \   000058   90....       MOV     DPTR,#zgDefaultChannelList
   \   00005B   12....       LCALL   ?XLOAD_R0123
   \   00005E   90....       MOV     DPTR,#runtimeChannel
   \   000061   12....       LCALL   ?XSTORE_R0123
    776            }
    777          
    778            // Initialize the security for type of device
    779            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000064                ; Setup parameters for call to function ZDApp_SecInit
   \   000064   A9..         MOV     R1,?V0
   \   000066   12....       LCALL   ??ZDApp_SecInit?relay; Banked call to: ZDApp_SecInit
    780          
    781            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000069   74FF         MOV     A,#-0x1
   \   00006B   65..         XRL     A,?V2
   \   00006D   7004         JNZ     ??ZDOInitDevice_5
   \   00006F   74FF         MOV     A,#-0x1
   \   000071   65..         XRL     A,?V3
   \                     ??ZDOInitDevice_5:
   \   000073   6010         JZ      ??ZDOInitDevice_6
    782            {
    783              devState = DEV_INIT;    // Remove the Hold state
   \   000075   90....       MOV     DPTR,#devState
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
    784          
    785              // Initialize leave control logic
    786              ZDApp_LeaveCtrlInit();
   \   00007B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007B   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay; Banked call to: ZDApp_LeaveCtrlInit
    787          
    788              // Trigger the network start
    789              ZDApp_NetworkInit( extendedDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
    790            }
    791          
    792            // set broadcast address mask to support broadcast filtering
    793            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   000085                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000085   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
    794          
    795            return ( networkStateNV );
   \   00008D   A9..         MOV     R1,?V0
   \   00008F   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??ZDOInitDevice_1:
   \   000092                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000092   12....       LCALL   ??ZDApp_ReadNetworkRestoreState?relay; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000095   E9           MOV     A,R1
   \   000096   F5..         MOV     ?V0,A
   \   000098   7096         JNZ     ??ZDOInitDevice_2
   \   00009A                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   00009A   12....       LCALL   ??ZDApp_RestoreNetworkState?relay; Banked call to: ZDApp_RestoreNetworkState
   \   00009D   E9           MOV     A,R1
   \   00009E   F5..         MOV     ?V0,A
   \   0000A0   75..01       MOV     ?V4,#0x1
   \   0000A3   8E..         MOV     ?V5,R6
   \   0000A5   8E..         MOV     ?V6,R6
   \   0000A7   8E..         MOV     ?V7,R6
   \   0000A9   90....       MOV     DPTR,#_NIB + 22
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?L_SHL
   \   0000B2   90....       MOV     DPTR,#runtimeChannel
   \   0000B5   78..         MOV     R0,#?V4
   \   0000B7   12....       LCALL   ?L_MOV_TO_X
   \   0000BA   02....       LJMP    ??ZDOInitDevice_3 & 0xFFFF
    796          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    797          
    798          /*********************************************************************
    799           * @fn      ZDApp_ReadNetworkRestoreState
    800           *
    801           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    802           *          or not to restore the network state.
    803           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    804           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    805           *
    806           * @param   none
    807           *
    808           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    809           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    810           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    811           *          ZCD_NV_STARTUP_OPTION
    812           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    813          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    814          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    815            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    816          
    817            // Look for the New Network State option.
    818            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    819            {
    820              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    821            }
    822          
    823            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    824          }
    825          
    826          /*********************************************************************
    827           * @fn      ZDAppDetermineDeviceType()
    828           *
    829           * @brief   Determines the type of device to start.
    830           *
    831           *          Looks at zgDeviceLogicalType and determines what type of
    832           *          device to start.  The types are:
    833           *            ZG_DEVICETYPE_COORDINATOR
    834           *            ZG_DEVICETYPE_ROUTER
    835           *            ZG_DEVICETYPE_ENDDEVICE
    836           *
    837           * @param   none
    838           *
    839           * @return  none
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    842          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    843            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    844            {
    845              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    846              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8036         SJMP    ??ZDAppDetermineDeviceType_1
    847            }
    848            else
    849            {
    850              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   54F8         ANL     A,#0xf8
   \   00001E   F8           MOV     R0,A
   \   00001F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7004         JNZ     ??ZDAppDetermineDeviceType_2
    851                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV     A,#0x1
   \   000029   8007         SJMP    ??ZDAppDetermineDeviceType_3
    852              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6402         XRL     A,#0x2
   \   00002E   7007         JNZ     ??ZDAppDetermineDeviceType_4
    853                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL     A,R0
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX    @DPTR,A
    854          
    855              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    856              // The device shall do rejoin the network. Otherwise, do normal join
    857              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV     A,R1
   \   00003F   90....       MOV     DPTR,#devStartMode
   \   000042   7003         JNZ     ??ZDAppDetermineDeviceType_5
    858              {
    859                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR     A
   \   000045   8007         SJMP    ??ZDAppDetermineDeviceType_1
    860              }
    861              else
    862              {
    863                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV     A,#0x3
   \   000049   F0           MOVX    @DPTR,A
    864                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV     DPTR,#prevDevState
   \   00004D   04           INC     A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX    @DPTR,A
    865              }
    866            }
    867          }
   \   00004F   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    868          
    869          /*********************************************************************
    870           * @fn      ZDApp_NetworkStartEvt()
    871           *
    872           * @brief   Process the Network Start Event
    873           *
    874           * @param   none
    875           *
    876           * @return  none
    877           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    878          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    879          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    880            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7030         JNZ     ??ZDApp_NetworkStartEvt_0
    881            {
    882              // Successfully started a ZigBee network
    883              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7015         JNZ     ??ZDApp_NetworkStartEvt_1
    884              {
    885                //save NIB to NV before child joins if NV_RESTORE is defined
    886                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL   ??AddrMgrWriteNVRequest?relay; Banked call to: AddrMgrWriteNVRequest
    887                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV     R1,#0x9
   \   000017   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    888          
    889                if ( zgChildAgingEnable == TRUE )
   \   00001A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6401         XRL     A,#0x1
   \   000020   7011         JNZ     ??ZDApp_NetworkStartEvt_2
    890                {
    891                  // Once the device has changed its state to a COORDINATOR set the timer to send
    892                  // Parent annce
    893                  ZDApp_SetParentAnnceTimer();
   \   000022                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000022   12....       LCALL   ??ZDApp_SetParentAnnceTimer?relay; Banked call to: ZDApp_SetParentAnnceTimer
   \   000025   800C         SJMP    ??ZDApp_NetworkStartEvt_2
    894                }
    895              }
    896              else
    897              {
    898                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000027                ; Setup parameters for call to function osal_set_event
   \   000027   7A10         MOV     R2,#0x10
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#ZDAppTaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
    899              }
    900          
    901              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000033                ; Setup parameters for call to function osal_pwrmgr_device
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
   \   000038   8037         SJMP    ??ZDApp_NetworkStartEvt_3
    902            }
    903            else
    904            {
    905              // Try again with a higher energy threshold
    906              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00003A                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00003A   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   00003D   E9           MOV     A,R1
   \   00003E   7900         MOV     R1,#0x0
   \   000040   2410         ADD     A,#0x10
   \   000042   5001         JNC     ??ZDApp_NetworkStartEvt_4
   \   000044   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000045   C3           CLR     C
   \   000046   94FF         SUBB    A,#-0x1
   \   000048   E9           MOV     A,R1
   \   000049   9400         SUBB    A,#0x0
   \   00004B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004D   65D0         XRL     A,PSW
   \   00004F   33           RLC     A
   \   000050   501A         JNC     ??ZDApp_NetworkStartEvt_5
    907              {
    908                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000052                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000052   12....       LCALL   ??NLME_GetEnergyThreshold?relay; Banked call to: NLME_GetEnergyThreshold
   \   000055   E9           MOV     A,R1
   \   000056   F8           MOV     R0,A
   \   000057                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000057   7410         MOV     A,#0x10
   \   000059   29           ADD     A,R1
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??NLME_SetEnergyThreshold?relay; Banked call to: NLME_SetEnergyThreshold
    909                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00005E                ; Setup parameters for call to function osal_set_event
   \   00005E   7A01         MOV     R2,#0x1
   \   000060   7B00         MOV     R3,#0x0
   \   000062   90....       MOV     DPTR,#ZDAppTaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00006A   8005         SJMP    ??ZDApp_NetworkStartEvt_3
    910              }
    911              else
    912              {
    913                // Failed to start network. Enter a dormant state (until user intervenes)
    914                ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00006C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    915              }
    916            }
    917          }
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000071   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    918          
    919          /*********************************************************************
    920           * @fn      ZDApp_DeviceAuthEvt()
    921           *
    922           * @brief   Process the Device Authentic Event
    923           *
    924           * @param   none
    925           *
    926           * @return  none
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            // received authentication from trust center
    931            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   7031         JNZ     ??ZDApp_DeviceAuthEvt_0
    932            {
    933              // Stop the reset timer so it doesn't reset
    934              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay; Banked call to: ZDApp_ResetTimerCancel
    935          
    936              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV     R1,#0x6
   \   000011   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
    937          
    938              // Set the Power Manager Device
    939          #if defined ( POWER_SAVING )
    940              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
    941          #endif
    942          
    943              if ( ZSTACK_ROUTER_BUILD )
    944              {
    945                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    946                {
    947                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    948                  NLME_StartRouterRequest( 0, 0, false );
    949                }
    950              }
    951          
    952              // Notify to save info into NV
    953              ZDApp_NVUpdate();
   \   000019                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000019   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
    954          
    955              // Save off the security
    956              ZDApp_SaveNwkKey();
   \   00001C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001C   12....       LCALL   ??ZDApp_SaveNwkKey?relay; Banked call to: ZDApp_SaveNwkKey
    957          
    958              ZDApp_AnnounceNewAddress();
   \   00001F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001F   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
    959          
    960              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    961                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    962                    && (zgChildAgingEnable == TRUE) ) )
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000025   E0           MOVX    A,@DPTR
   \   000026   A2E3         MOV     C,0xE0 /* A   */.3
   \   000028   5008         JNC     ??ZDApp_DeviceAuthEvt_1
   \   00002A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6401         XRL     A,#0x1
   \   000030   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
    963              {
    964                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000032                ; Setup parameters for call to function NLME_SetPollRate
   \   000032   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000035   12....       LCALL   ?XLOAD_R2345
   \   000038   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   \   00003B   8003         SJMP    ??ZDApp_DeviceAuthEvt_2
    965              }
    966            }
    967            else
    968            {
    969              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00003D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00003D   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
    970            }
    971          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000040   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    972          
    973          /*********************************************************************
    974           * @fn      ZDApp_SaveNetworkStateEvt()
    975           *
    976           * @brief   Process the Save the Network State Event
    977           *
    978           * @param   none
    979           *
    980           * @return  none
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    983          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    984          #if defined ( NV_RESTORE )
    985           #if defined ( NV_TURN_OFF_RADIO )
    986            // Turn off the radio's receiver during an NV update
    987            uint8 RxOnIdle;
    988            uint8 x = false;
    989            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    990            ZMacSetReq( ZMacRxOnIdle, &x );
    991           #endif
    992          
    993            // Update the Network State in NV
    994            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    995                           NWK_NV_DEVICELIST_ENABLE |
    996                           NWK_NV_BINDING_ENABLE    |
    997                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   ??NLME_UpdateNV?relay; Banked call to: NLME_UpdateNV
    998          
    999            // Reset the NV startup option to resume from NV by
   1000            // clearing the "New" join option.
   1001            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
   1002          
   1003           #if defined ( NV_TURN_OFF_RADIO )
   1004            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1005           #endif
   1006          #endif // NV_RESTORE
   1007          }
   \   000010   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1008          
   1009          #if defined ( NV_RESTORE )
   1010          /*********************************************************************
   1011           * @fn      ZDApp_RestoreNetworkState()
   1012           *
   1013           * @brief   This function will restore the network state of the
   1014           *          device if the network state is stored in NV.
   1015           *
   1016           * @param   none
   1017           *
   1018           * @return
   1019           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1020           *          restored.
   1021           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1022           *          This could mean that zgStartupOption said to not restore, or
   1023           *          it could mean that there was no network state to restore.
   1024           *
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1027          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1028            uint8 nvStat;
   1029          
   1030            // Initialize NWK NV items
   1031            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay  ; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
   1032          
   1033            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6039         JZ      ??ZDApp_RestoreNetworkState_0
   1034            {
   1035              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   6023         JZ      ??ZDApp_RestoreNetworkState_1
   1036              {
   1037                // Are we a coordinator
   1038                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   1039                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_99:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
   1040                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
   1041                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   12....       LCALL   ?Subroutine12 & 0xFFFF
   1042                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1043              }
   \                     ??CrossCallReturnLabel_46:
   \   000033   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000036   8002         SJMP    ??ZDApp_RestoreNetworkState_3
   1044              else
   1045                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000038   7E09         MOV     R6,#0x9
   1046          
   1047              if ( ZG_SECURE_ENABLED )
   1048              {
   1049                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003A   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   1050          
   1051                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1052                {
   1053                  ZDApp_RestoreNwkKey( TRUE );
   1054                }
   1055              }
   1056          
   1057              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1058              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1059              // other than default.
   1060            }
   1061          
   1062            if ( nvStat == ZSUCCESS )
   \   000041   EE           MOV     A,R6
   \   000042   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1063              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000044   7900         MOV     R1,#0x0
   \   000046   8002         SJMP    ??ZDApp_RestoreNetworkState_4
   1064            else
   1065              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000048   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00004A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1066          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine39_0
   \   000002                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   1067          #endif // NV_RESTORE
   1068          
   1069          /*********************************************************************
   1070           * @fn      ZDApp_InitUserDesc()
   1071           *
   1072           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1073           *          when needed.  If you want to initialize the User descriptor to
   1074           *          something other than all zero, do it here.
   1075           *
   1076           * @param   none
   1077           *
   1078           * @return  none
   1079           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1080          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1081          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1082            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1083          
   1084            // Initialize the User Descriptor, the descriptor is read from NV
   1085            // when needed.  If you want to initialize the User descriptor to something
   1086            // other than all zero, do it here.
   1087            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1088            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1089                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1090            {
   1091              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1092                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1093              {
   1094                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1095                {
   1096                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1097                }
   1098              }
   1099            }
   1100          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1101          
   1102          /*********************************************************************
   1103           * @fn      ZDAppCheckForHoldKey()
   1104           *
   1105           * @brief   Check for key to set the device into Hold Auto Start
   1106           *
   1107           * @param   none
   1108           *
   1109           * @return  none
   1110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1111          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1112          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1113          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1114          
   1115            // Get Keypad directly to see if a HOLD is needed
   1116            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay   ; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1117          
   1118            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1119            // while booting to avoid starting up the device.
   1120            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1121            {
   1122              // Change the device state to HOLD on start up
   1123              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1124            }
   1125          #endif // HAL_KEY
   1126          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1127          
   1128          /*********************************************************************
   1129           * @fn      ZDApp_ProcessOSALMsg()
   1130           *
   1131           * @brief   Process the incoming task message.
   1132           *
   1133           * @param   msgPtr - message to process
   1134           *
   1135           * @return  none
   1136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1137          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1139            // Data Confirmation message fields
   1140            uint8 sentEP;       // This should always be 0
   1141            uint8 sentStatus;
   1142            afDataConfirm_t *afDataConfirm;
   1143            uint8 tmp;
   1144          
   1145            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   602A         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600E         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   6010         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   \   00002D   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1146            {
   1147              // Incoming ZDO Message
   1148              case AF_INCOMING_MSG_CMD:
   1149                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000030                ; Setup parameters for call to function ZDP_IncomingData
   \   000030   12....       LCALL   ??ZDP_IncomingData?relay; Banked call to: ZDP_IncomingData
   1150                break;
   \   000033   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1151          
   1152              case ZDO_CB_MSG:
   1153                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000036                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000036   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay; Banked call to: ZDApp_ProcessMsgCBs
   1154                break;
   \   000039   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1155          
   1156              case AF_DATA_CONFIRM_CMD:
   1157                // This message is received as a confirmation of a data packet sent.
   1158                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1159                // The message fields are defined in AF.h
   1160                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1161                sentEP = afDataConfirm->endpoint;
   1162                sentStatus = afDataConfirm->hdr.status;
   1163          
   1164                // Action taken when confirmation is received.
   1165          #if defined ( ZIGBEE_FREQ_AGILITY )
   1166                if ( pZDNwkMgr_ProcessDataConfirm )
   1167                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1168          #endif
   1169                (void)sentEP;
   1170                (void)sentStatus;
   1171                break;
   1172          
   1173              case ZDO_NWK_DISC_CNF:
   1174                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003C   90....       MOV     DPTR,#devState
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6402         XRL     A,#0x2
   \   000042   6003         JZ      $+5
   \   000044   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1175                  break;
   1176          
   1177                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000047   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6008         JZ      ??ZDApp_ProcessOSALMsg_7
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6402         XRL     A,#0x2
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1178                {
   1179                  // Process the network discovery scan results and choose a parent
   1180                  // device to join/rejoin itself
   1181                  networkDesc_t *pChosenNwk;
   1182                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000057                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000057   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay; Banked call to: ZDApp_NwkDescListProcessing
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   EA           MOV     A,R2
   \   00005F   45..         ORL     A,?V1
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   \   000066   90....       MOV     DPTR,#zdoDiscCounter
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C3           CLR     C
   \   00006B   9403         SUBB    A,#0x3
   \   00006D   5003         JNC     $+5
   \   00006F   02....       LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   1183                  {
   1184                    if ( devStartMode == MODE_JOIN )
   \   000072   EA           MOV     A,R2
   \   000073   2402         ADD     A,#0x2
   \   000075   F8           MOV     R0,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V1
   \   000079   F9           MOV     R1,A
   \   00007A   E8           MOV     A,R0
   \   00007B   FE           MOV     R6,A
   \   00007C   E9           MOV     A,R1
   \   00007D   FF           MOV     R7,A
   \   00007E   90....       MOV     DPTR,#devStartMode
   \   000081   E0           MOVX    A,@DPTR
   \   000082   706E         JNZ     ??ZDApp_ProcessOSALMsg_9
   1185                    {
   1186                      ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000084                ; Setup parameters for call to function ZDApp_ChangeState
   \   000084   7903         MOV     R1,#0x3
   \   000086   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   1187          
   1188                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   000089                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000089   85..82       MOV     DPL,?V0
   \   00008C   85..83       MOV     DPH,?V1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   1189          
   1190                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1191                                            pChosenNwk->logicalChannel,
   1192                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1193                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   00009A                ; Setup parameters for call to function NLME_JoinRequest
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V2,A
   \   0000AD   78..         MOV     R0,#?V2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   85..82       MOV     DPL,?V0
   \   0000B5   85..83       MOV     DPH,?V1
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V2,A
   \   0000C8   78..         MOV     R0,#?V2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F9           MOV     R1,A
   \   0000D3   85..82       MOV     DPL,?V0
   \   0000D6   85..83       MOV     DPH,?V1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FC           MOV     R4,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FD           MOV     R5,A
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   240B         ADD     A,#0xb
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E4           CLR     A
   \   0000E4   35..         ADDC    A,?V1
   \   0000E6   FB           MOV     R3,A
   \   0000E7   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   0000EA   7404         MOV     A,#0x4
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   02....       LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1194                      {
   1195                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1196                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1197                      }
   1198                    } // if ( devStartMode == MODE_JOIN )
   1199                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   0000F2   6403         XRL     A,#0x3
   \   0000F4   6003         JZ      $+5
   \   0000F6   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1200                    {
   1201                      ZStatus_t rejoinStatus;
   1202          
   1203                      // Transition state machine to correct rejoin state based on previous state before network discovery
   1204                      if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   0000F9                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F9   7900         MOV     R1,#0x0
   \   0000FB   12....       LCALL   ??ZDApp_RestoreNwkKey?relay; Banked call to: ZDApp_RestoreNwkKey
   \   0000FE   E9           MOV     A,R1
   \   0000FF   6401         XRL     A,#0x1
   \   000101   90....       MOV     DPTR,#prevDevState
   \   000104   700D         JNZ     ??ZDApp_ProcessOSALMsg_12
   1205                      {
   1206                        if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6404         XRL     A,#0x4
   \   000109   7004         JNZ     ??ZDApp_ProcessOSALMsg_13
   1207                        {
   1208                          ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
   \   00010B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010B   790D         MOV     R1,#0xd
   \   00010D   800F         SJMP    ??ZDApp_ProcessOSALMsg_14
   1209                        }
   1210                        else
   1211                        {
   1212                          ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00010F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010F   7904         MOV     R1,#0x4
   \   000111   800B         SJMP    ??ZDApp_ProcessOSALMsg_14
   1213                        }
   1214                      }
   1215                      else
   1216                      {
   1217                        if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000113   E0           MOVX    A,@DPTR
   \   000114   640D         XRL     A,#0xd
   \   000116   7004         JNZ     ??ZDApp_ProcessOSALMsg_15
   1218                        {
   1219                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \   000118                ; Setup parameters for call to function ZDApp_ChangeState
   \   000118   790E         MOV     R1,#0xe
   \   00011A   8002         SJMP    ??ZDApp_ProcessOSALMsg_14
   1220                        }
   1221                        else
   1222                        {
   1223                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00011C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00011C   790F         MOV     R1,#0xf
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00011E   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   1224                        }
   1225                      }
   1226          
   1227                      // Before trying to do rejoin, check if the device has a valid short address
   1228                      // If not, generate a random short address for itself
   1229                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000121   90....       MOV     DPTR,#_NIB + 20
   \   000124   E0           MOVX    A,@DPTR
   \   000125   64FE         XRL     A,#0xfe
   \   000127   7003         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00012C   7065         JNZ     ??ZDApp_ProcessOSALMsg_17
   1230                      {
   1231                        uint16 commNwkAddr;
   1232          
   1233                        // Verify if the Network address has been commissioned by external tool
   1234                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1235                                           sizeof(commNwkAddr),
   1236                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1237                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00012E                ; Setup parameters for call to function osal_nv_read
   \   00012E   7401         MOV     A,#0x1
   \   000130   12....       LCALL   ?XSTACK_DISP100_8
   \   000133   88..         MOV     ?V2,R0
   \   000135   89..         MOV     ?V3,R1
   \   000137   78..         MOV     R0,#?V2
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013C   75..02       MOV     ?V2,#0x2
   \   00013F   75..00       MOV     ?V3,#0x0
   \   000142   78..         MOV     R0,#?V2
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   7C00         MOV     R4,#0x0
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   7A49         MOV     R2,#0x49
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000152   7404         MOV     A,#0x4
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   E9           MOV     A,R1
   \   000158   7025         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   00015A   7401         MOV     A,#0x1
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   64FE         XRL     A,#0xfe
   \   000162   7003         JNZ     ??ZDApp_ProcessOSALMsg_19
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000167   6016         JZ      ??ZDApp_ProcessOSALMsg_18
   1238                        {
   1239                          _NIB.nwkDevAddress = commNwkAddr;
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000171   90....       MOV     DPTR,#_NIB + 20
   \   000174   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1240          
   1241                          // clear Allocate address bit because device has a commissioned address
   1242                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_50:
   \   000177   90....       MOV     DPTR,#_NIB + 14
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   C2E7         CLR     0xE0 /* A   */.7
   \   00017D   800A         SJMP    ??ZDApp_ProcessOSALMsg_20
   1243                        }
   1244                        else
   1245                        {
   1246                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   00017F                ; Setup parameters for call to function osal_rand
   \   00017F   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000182   90....       MOV     DPTR,#_NIB + 20
   \   000185   EA           MOV     A,R2
   \   000186   F0           MOVX    @DPTR,A
   \   000187   A3           INC     DPTR
   \   000188   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   000189   F0           MOVX    @DPTR,A
   1247                        }
   1248          
   1249                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   00018A                ; Setup parameters for call to function ZMacSetReq
   \   00018A   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00018C   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00018E   7953         MOV     R1,#0x53
   \   000190   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1250                      }
   1251          
   1252                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1253                      if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000193   90....       MOV     DPTR,#_NIB + 33
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F4           CPL     A
   \   000198   7003         JNZ     ??ZDApp_ProcessOSALMsg_21
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   00019D   7018         JNZ     ??ZDApp_ProcessOSALMsg_22
   1254                      {
   1255                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00019F   85..82       MOV     DPL,?V0
   \   0001A2   85..83       MOV     DPH,?V1
   \   0001A5   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0001A8   90....       MOV     DPTR,#_NIB + 33
   \   0001AB   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1256                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_51:
   \   0001AE                ; Setup parameters for call to function ZMacSetReq
   \   0001AE   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001B0   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001B2   7950         MOV     R1,#0x50
   \   0001B4   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1257                      }
   1258          
   1259                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0001B7   85..82       MOV     DPL,?XSP + 0
   \   0001BA   85..83       MOV     DPH,?XSP + 1
   \   0001BD   7401         MOV     A,#0x1
   \   0001BF   F0           MOVX    @DPTR,A
   1260                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001C0                ; Setup parameters for call to function ZMacSetReq
   \   0001C0   AA..         MOV     R2,?XSP + 0
   \   0001C2   AB..         MOV     R3,?XSP + 1
   \   0001C4   7952         MOV     R1,#0x52
   \   0001C6   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1261          
   1262                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1263                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   0001C9                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001C9   7901         MOV     R1,#0x1
   \   0001CB   12....       LCALL   ??ZDApp_RestoreNwkKey?relay; Banked call to: ZDApp_RestoreNwkKey
   \   0001CE   E9           MOV     A,R1
   \   0001CF   6401         XRL     A,#0x1
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   700B         JNZ     ??ZDApp_ProcessOSALMsg_23
   1264                      {
   1265                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001D7                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001DB   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001DD   12....       LCALL   ??NLME_ReJoinRequest?relay; Banked call to: NLME_ReJoinRequest
   \   0001E0   8009         SJMP    ??ZDApp_ProcessOSALMsg_10
   1266                      }
   1267                      else
   1268                      {
   1269                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   0001E2                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F9           MOV     R1,A
   \   0001E4   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001E6   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001E8   12....       LCALL   ??NLME_ReJoinRequestUnsecure?relay; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0001EB   E9           MOV     A,R1
   1270                      }
   1271          
   1272                      if ( rejoinStatus != ZSuccess )
   \   0001EC   6009         JZ      ??ZDApp_ProcessOSALMsg_11
   1273                      {
   1274                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1275                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001EE                ; Setup parameters for call to function osal_rand
   \   0001EE   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   0001F1                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001F1   12....       LCALL   ?Subroutine28 & 0xFFFF
   1276                      }
   1277                    } // else if ( devStartMode == MODE_REJOIN )
   \                     ??CrossCallReturnLabel_25:
   \   0001F4   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   1278          
   1279                    // The receiver is on, turn network layer polling off.
   1280                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001F7   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001FD   502C         JNC     ??ZDApp_ProcessOSALMsg_24
   1281                    {
   1282                      // for an End Device with NO Child Table Management process or for a Router
   1283                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1284                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001FF   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000202   E0           MOVX    A,@DPTR
   \   000203   600D         JZ      ??ZDApp_ProcessOSALMsg_25
   \   000205   6401         XRL     A,#0x1
   \   000207   6009         JZ      ??ZDApp_ProcessOSALMsg_25
   \   000209   90....       MOV     DPTR,#zgChildAgingEnable
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   6003         JZ      $+5
   \   00020F   02....       LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1285                      {
   1286                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000212                ; Setup parameters for call to function NLME_SetPollRate
   \   000212   90....       MOV     DPTR,#__Constant_0
   \   000215   12....       LCALL   ?XLOAD_R2345
   \   000218   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1287                        NLME_SetQueuedPollRate( 0 );
   \   00021B                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00021B   7A00         MOV     R2,#0x0
   \   00021D   7B00         MOV     R3,#0x0
   \   00021F   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1288                        NLME_SetResponseRate( 0 );
   \   000222                ; Setup parameters for call to function NLME_SetResponseRate
   \   000222   7A00         MOV     R2,#0x0
   \   000224   7B00         MOV     R3,#0x0
   \   000226   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   \   000229   807C         SJMP    ??ZDApp_ProcessOSALMsg_5
   1289                      }
   1290                    }
   1291                    else
   1292                    {
   1293                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   00022B   90....       MOV     DPTR,#devStartMode
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   7076         JNZ     ??ZDApp_ProcessOSALMsg_5
   1294                      {
   1295                        ZDApp_SavedPollRate = zgPollRate;
   \   000231   90....       MOV     DPTR,#zgPollRate
   \   000234   12....       LCALL   ?XLOAD_R0123
   \   000237   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00023A   12....       LCALL   ?XSTORE_R0123
   1296                        NLME_SetPollRate( zgRejoinPollRate );
   \   00023D                ; Setup parameters for call to function NLME_SetPollRate
   \   00023D   90....       MOV     DPTR,#zgRejoinPollRate
   \   000240   E0           MOVX    A,@DPTR
   \   000241   F5..         MOV     ?V0,A
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   AA..         MOV     R2,?V0
   \   000247   FB           MOV     R3,A
   \   000248   E4           CLR     A
   \   000249   FC           MOV     R4,A
   \   00024A   FD           MOV     R5,A
   \   00024B   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   \   00024E   8057         SJMP    ??ZDApp_ProcessOSALMsg_5
   1297                      }
   1298                    }
   1299                  }
   1300                  else
   1301                  {
   1302                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000250   90....       MOV     DPTR,#continueJoining
   \   000253   E0           MOVX    A,@DPTR
   \   000254   6051         JZ      ??ZDApp_ProcessOSALMsg_5
   1303                    {
   1304          #if defined ( MANAGED_SCAN )
   1305                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1306          #else
   1307                      zdoDiscCounter++;
   \   000256   90....       MOV     DPTR,#zdoDiscCounter
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   04           INC     A
   \   00025B   F0           MOVX    @DPTR,A
   1308                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1309                                                  + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   00025C                ; Setup parameters for call to function osal_rand
   \   00025C   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   00025F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00025F   EA           MOV     A,R2
   \   000260   2464         ADD     A,#0x64
   \   000262   FA           MOV     R2,A
   \   000263   E4           CLR     A
   \   000264   3400         ADDC    A,#0x0
   \   000266   FB           MOV     R3,A
   \   000267   8036         SJMP    ??ZDApp_ProcessOSALMsg_26
   1310          #endif
   1311                    }
   1312                  }
   1313                }
   1314                break;
   1315          
   1316              case ZDO_NWK_JOIN_IND:
   1317                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000269   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   6401         XRL     A,#0x1
   \   00026F   6005         JZ      ??ZDApp_ProcessOSALMsg_27
   \   000271   E0           MOVX    A,@DPTR
   \   000272   6402         XRL     A,#0x2
   \   000274   7031         JNZ     ??ZDApp_ProcessOSALMsg_5
   1318                {
   1319                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_27:
   \   000276                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000276   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay; Banked call to: ZDApp_ProcessNetworkJoin
   \   000279   802C         SJMP    ??ZDApp_ProcessOSALMsg_5
   1320                }
   1321                break;
   1322          
   1323              case ZDO_NWK_JOIN_REQ:
   1324                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00027B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   6401         XRL     A,#0x1
   \   000281   6005         JZ      ??ZDApp_ProcessOSALMsg_28
   \   000283   E0           MOVX    A,@DPTR
   \   000284   6402         XRL     A,#0x2
   \   000286   701F         JNZ     ??ZDApp_ProcessOSALMsg_5
   1325                {
   1326                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_28:
   \   000288   90....       MOV     DPTR,#retryCnt
   \   00028B   E4           CLR     A
   \   00028C   12....       LCALL   ?Subroutine15 & 0xFFFF
   1327                  devStartMode = MODE_RESUME;
   1328                  _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_2:
   \   00028F   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   1329                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_48:
   \   000292   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   1330                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000295   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000298   7402         MOV     A,#0x2
   \   00029A   F0           MOVX    @DPTR,A
   1331                  ZDApp_NetworkInit( 0 );
   \   00029B                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00029B   7A00         MOV     R2,#0x0
   \   00029D   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   00029F   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   0002A2   8003         SJMP    ??ZDApp_ProcessOSALMsg_5
   1332                }
   1333                break;
   1334          
   1335              default:
   1336                if ( ZG_SECURE_ENABLED )
   1337                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0002A4                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0002A4   12....       LCALL   ??ZDApp_ProcessSecMsg?relay; Banked call to: ZDApp_ProcessSecMsg
   1338                break;
   1339            }
   1340          
   1341          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0002A7   7403         MOV     A,#0x3
   \   0002A9   02....       LJMP    ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   547F         ANL     A,#0x7f
   \   000003   2464         ADD     A,#0x64
   \   000005   FA           MOV     R2,A
   \   000006   7B00         MOV     R3,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#devStartMode
   \   000004   04           INC     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#_tmpRejoinState
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1342          
   1343          /*********************************************************************
   1344           * @fn      ZDApp_ProcessMsgCBs()
   1345           *
   1346           * @brief   Process response messages
   1347           *
   1348           * @param   none
   1349           *
   1350           * @return  none
   1351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1352          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1354            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000028   0200         DW        2
   \   00002A   2100         DW        33
   \   00002C   2200         DW        34
   \   00002E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000030   0080         DW        32768
   \   000032   0180         DW        32769
   \   000034   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000036   0000         DW        0
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1355            {
   1356          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1357              case NWK_addr_rsp:
   1358              case IEEE_addr_rsp:
   1359                {
   1360                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1361          
   1362                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   12....       LCALL   ??ZDO_ParseAddrRsp?relay; Banked call to: ZDO_ParseAddrRsp
   \   00003D   8A..         MOV     ?V2,R2
   \   00003F   8B..         MOV     ?V3,R3
   1363                  if ( pAddrRsp )
   \   000041   EA           MOV     A,R2
   \   000042   45..         ORL     A,?V3
   \   000044   604A         JZ      ??ZDApp_ProcessMsgCBs_2
   1364                  {
   1365                    if ( pAddrRsp->status == ZSuccess )
   \   000046   EA           MOV     A,R2
   \   000047   2403         ADD     A,#0x3
   \   000049   FE           MOV     R6,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V3
   \   00004D   FF           MOV     R7,A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   700A         JNZ     ??ZDApp_ProcessMsgCBs_3
   1366                    {
   1367                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   12....       LCALL   ?Subroutine21 & 0xFFFF
   1368                    }
   \                     ??CrossCallReturnLabel_85:
   \   00005C   12....       LCALL   ??ZDO_UpdateAddrManager?relay; Banked call to: ZDO_UpdateAddrManager
   1369          
   1370          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1371                    // look for pending bind entry for NWK_addr_rsp Only
   1372                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00005F   85..82       MOV     DPL,?V0
   \   000062   85..83       MOV     DPH,?V1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006C   7007         JNZ     ??ZDApp_ProcessMsgCBs_5
   1373                    {
   1374          #if defined ( REFLECTOR )
   1375                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006E                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   ??ZDApp_ProcessPendingBindReq?relay; Banked call to: ZDApp_ProcessPendingBindReq
   1376          #endif
   1377                    }
   1378          #endif
   1379          
   1380                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000075                ; Setup parameters for call to function osal_mem_free
   \   000075   AA..         MOV     R2,?V2
   \   000077   AB..         MOV     R3,?V3
   \   000079   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   00007C   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1381                  }
   1382                }
   1383                break;
   1384          #endif
   1385          
   1386          #if defined ( REFLECTOR )
   1387              case Bind_req:
   1388              case Unbind_req:
   1389                {
   1390                  ZDO_BindUnbindReq_t bindReq;
   1391                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007E                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007E   AC..         MOV     R4,?XSP + 0
   \   000080   AD..         MOV     R5,?XSP + 1
   \   000082   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay; Banked call to: ZDO_ParseBindUnbindReq
   1392                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000085                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000085   AC..         MOV     R4,?XSP + 0
   \   000087   AD..         MOV     R5,?XSP + 1
   \   000089   EE           MOV     A,R6
   \   00008A   FA           MOV     R2,A
   \   00008B   EF           MOV     A,R7
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay; Banked call to: ZDO_ProcessBindUnbindReq
   1393                }
   1394                break;
   1395          #endif
   1396          
   1397          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1398              case Bind_rsp:
   1399              case Unbind_rsp:
   1400                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1401                {
   1402                  ZDMatchSendState(
   1403                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1404                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1405                }
   1406                break;
   1407          
   1408              case End_Device_Bind_req:
   1409                if (ZG_DEVICE_COORDINATOR_TYPE)
   1410                {
   1411                  ZDEndDeviceBind_t bindReq;
   1412                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1413                  ZDO_MatchEndDeviceBind( &bindReq );
   1414          
   1415                  // Freeing the cluster lists - if allocated.
   1416                  if ( bindReq.numInClusters )
   1417                    osal_mem_free( bindReq.inClusters );
   1418                  if ( bindReq.numOutClusters )
   1419                    osal_mem_free( bindReq.outClusters );
   1420                }
   1421                break;
   1422          #endif
   1423            }
   1424          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000090   7415         MOV     A,#0x15
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0
   1425          
   1426          /*********************************************************************
   1427           * @fn      ZDApp_RegisterCBs()
   1428           *
   1429           * @brief   Process response messages
   1430           *
   1431           * @param   none
   1432           *
   1433           * @return  none
   1434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1435          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1436          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1437          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1439          #endif
   1440          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1441            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1442          #endif
   1443          #if ZG_BUILD_COORDINATOR_TYPE
   1444            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1445            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1446            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1447          #endif
   1448          #if defined ( REFLECTOR )
   1449            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1450            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
   1451          #endif
   1452          }
   \   000034   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1453          
   1454          /*********************************************************************
   1455           * @fn      ZDApp_ProcessSecMsg()
   1456           *
   1457           * @brief   Process the incoming security message.
   1458           *
   1459           * @param   msgPtr - message to process
   1460           *
   1461           * @return  none
   1462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1463          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1464          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1465            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6006         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD     A,#-0x4
   \   00000F   6014         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP    ??ZDApp_ProcessSecMsg_2
   1466            {
   1467              case ZDO_TRANSPORT_KEY_IND:
   1468                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   6005         JZ      ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6402         XRL     A,#0x2
   \   00001E   7015         JNZ     ??ZDApp_ProcessSecMsg_2
   1469                {
   1470                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP    ??ZDApp_ProcessSecMsg_2
   1471                }
   1472                break;
   1473          
   1474              case ZDO_UPDATE_DEVICE_IND:
   1475                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1476                {
   1477                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1478                }
   1479                break;
   1480          
   1481              case ZDO_REMOVE_DEVICE_IND:
   1482                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1483                {
   1484                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1485                }
   1486                break;
   1487          
   1488              case ZDO_REQUEST_KEY_IND:
   1489                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1490                {
   1491                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1492                  {
   1493                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1494                  }
   1495                }
   1496                break;
   1497          
   1498              case ZDO_SWITCH_KEY_IND:
   1499                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6401         XRL     A,#0x1
   \   00002B   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   7003         JNZ     ??ZDApp_ProcessSecMsg_2
   1500                {
   1501                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay; Banked call to: ZDSecMgrSwitchKeyInd
   1502                }
   1503                break;
   1504          
   1505              default:
   1506                // Unsupported messages
   1507                break;
   1508            }
   1509          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1510          
   1511          /*********************************************************************
   1512           * @fn      ZDApp_ProcessNetworkJoin()
   1513           *
   1514           * @brief
   1515           *
   1516           *   Save off the Network key information.
   1517           *
   1518           * @param   none
   1519           *
   1520           * @return  none
   1521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1522          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1523          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1524            if ( (devState == DEV_NWK_JOINING) ||
   1525                ((devState == DEV_NWK_ORPHAN)  &&
   1526                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1527            {
   1528              // Result of a Join attempt by this device.
   1529              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   702F         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1530              {
   1531                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   1532          
   1533          #if defined ( POWER_SAVING )
   1534                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000039                ; Setup parameters for call to function osal_pwrmgr_device
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
   1535          #endif
   1536          
   1537                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00003E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003E   7901         MOV     R1,#0x1
   \   000040   12....       LCALL   ??ZDApp_RestoreNwkKey?relay; Banked call to: ZDApp_RestoreNwkKey
   \   000043   E9           MOV     A,R1
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1538                {
   1539                  // wait for auth from trust center
   1540                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   1541          
   1542                  // Start the reset timer for MAX UNAUTH time
   1543                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1544                }
   1545                else
   1546                {
   1547                  if ( ZSTACK_ROUTER_BUILD )
   1548                  {
   1549                    if ( devState == DEV_NWK_ORPHAN
   1550                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1551                    {
   1552                      // Change NIB state to router for restore
   1553                      _NIB.nwkState = NWK_ROUTER;
   1554                    }
   1555                  }
   1556          
   1557                  if ( devState == DEV_NWK_JOINING )
   \   000049   90....       MOV     DPTR,#devState
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6403         XRL     A,#0x3
   \   00004F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_5
   1558                  {
   1559                    ZDApp_AnnounceNewAddress();
   \   000051                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000051   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1560                  }
   1561          
   1562                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000054                ; Setup parameters for call to function ZDApp_ChangeState
   \   000054   7906         MOV     R1,#0x6
   \   000056   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   1563          
   1564                  if ( ZSTACK_ROUTER_BUILD )
   \   000059   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1565                  {
   1566                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1567                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1568                    {
   1569                      NLME_StartRouterRequest( 0, 0, false );
   1570                    }
   1571                  }
   1572                }
   1573              }
   1574              else
   1575              {
   1576                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00005C   90....       MOV     DPTR,#devStartMode
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   7026         JNZ     ??ZDApp_ProcessNetworkJoin_7
   \   000064   90....       MOV     DPTR,#retryCnt
   \   000067   E0           MOVX    A,@DPTR
   \   000068   04           INC     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   C3           CLR     C
   \   00006B   9403         SUBB    A,#0x3
   \   00006D   401B         JC      ??ZDApp_ProcessNetworkJoin_7
   1577                {
   1578                  if ( _NIB.nwkPanId == 0xFFFF )
   \   00006F   90....       MOV     DPTR,#_NIB + 33
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F4           CPL     A
   \   000074   7003         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000079   90....       MOV     DPTR,#devStartMode
   \   00007C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1579                    devStartMode = MODE_JOIN;
   \   00007E   E4           CLR     A
   \   00007F   8008         SJMP    ??ZDApp_ProcessNetworkJoin_10
   1580                  else
   1581                  {
   1582                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000081   7403         MOV     A,#0x3
   \   000083   F0           MOVX    @DPTR,A
   1583                    _tmpRejoinState = true;
   \   000084   90....       MOV     DPTR,#_tmpRejoinState
   \   000087   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000089   F0           MOVX    @DPTR,A
   1584                  }
   1585                }
   1586          
   1587                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1588                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00008A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008A   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00008D   8A..         MOV     ?V0,R2
   \   00008F   8B..         MOV     ?V1,R3
   \   000091   74FE         MOV     A,#-0x2
   \   000093   65..         XRL     A,?V0
   \   000095   7004         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   000097   74FF         MOV     A,#-0x1
   \   000099   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00009B   700D         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   00009D   90....       MOV     DPTR,#_NIB + 20
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   64FE         XRL     A,#0xfe
   \   0000A3   7003         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000A8   601D         JZ      ??ZDApp_ProcessNetworkJoin_14
   1589                {
   1590                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   74FE         MOV     A,#-0x2
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   04           INC     A
   \   0000B5   F0           MOVX    @DPTR,A
   1591                  // Invalidate nwk addr so end device does not use in its data reqs.
   1592                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000B6   90....       MOV     DPTR,#_NIB + 20
   \   0000B9   14           DEC     A
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   04           INC     A
   \   0000BD   F0           MOVX    @DPTR,A
   1593                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000BE                ; Setup parameters for call to function ZMacSetReq
   \   0000BE   AA..         MOV     R2,?XSP + 0
   \   0000C0   AB..         MOV     R3,?XSP + 1
   \   0000C2   7953         MOV     R1,#0x53
   \   0000C4   12....       LCALL   ??ZMacSetReq?relay   ; Banked call to: ZMacSetReq
   1594                }
   1595          
   1596                // Clear the neighbor Table and network discovery tables.
   1597                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C7                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C7   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1598                NLME_NwkDiscTerm();
   \   0000CA                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000CA   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1599          
   1600                zdoDiscCounter = 1;
   \   0000CD   90....       MOV     DPTR,#zdoDiscCounter
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   F0           MOVX    @DPTR,A
   1601          
   1602                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1603                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D3                ; Setup parameters for call to function osal_rand
   \   0000D3   02....       LJMP    ??ZDApp_ProcessNetworkJoin_15 & 0xFFFF
   1604              }
   1605            }
   1606            else if ( devState == DEV_NWK_ORPHAN ||
   1607                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1608                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1609                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1610                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6404         XRL     A,#0x4
   \   0000D9   6012         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   640E         XRL     A,#0xe
   \   0000DE   600D         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   640F         XRL     A,#0xf
   \   0000E3   6008         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   640D         XRL     A,#0xd
   \   0000E8   6003         JZ      $+5
   \   0000EA   02....       LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1611            {
   1612              // results of an orphaning attempt by this device
   1613              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000ED   90....       MOV     DPTR,#nwkStatus
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   7079         JNZ     ??ZDApp_ProcessNetworkJoin_17
   1614              {
   1615                //When the device has successfully rejoined then reset retryCnt
   1616                retryCnt = 0;
   \   0000F3   90....       MOV     DPTR,#retryCnt
   \   0000F6   E4           CLR     A
   \   0000F7   F0           MOVX    @DPTR,A
   1617          
   1618                // Verify NWK key is available before sending Device_annce
   1619                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000F8                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F8   7901         MOV     R1,#0x1
   \   0000FA   12....       LCALL   ??ZDApp_RestoreNwkKey?relay; Banked call to: ZDApp_RestoreNwkKey
   \   0000FD   E9           MOV     A,R1
   \   0000FE   700F         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1620                {
   1621                  // wait for auth from trust center
   1622                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000100                ; Setup parameters for call to function ZDApp_ChangeState
   \   000100   7905         MOV     R1,#0x5
   \   000102   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   1623          
   1624                  // Start the reset timer for MAX UNAUTH time
   1625                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000105                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000105   7A10         MOV     R2,#0x10
   \   000107   7B27         MOV     R3,#0x27
   \   000109   12....       LCALL   ??ZDApp_ResetTimerStart?relay; Banked call to: ZDApp_ResetTimerStart
   \   00010C   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1626                }
   1627                else
   1628                {
   1629                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00010F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010F   7906         MOV     R1,#0x6
   \   000111   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   1630          
   1631                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   000114                ; Setup parameters for call to function osal_stop_timerEx
   \   000114   7A00         MOV     R2,#0x0
   \   000116   7B20         MOV     R3,#0x20
   \   000118   90....       MOV     DPTR,#ZDAppTaskID
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F9           MOV     R1,A
   \   00011D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   1632          
   1633                  // setup Power Manager Device
   1634          #if defined ( POWER_SAVING )
   1635                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000120                ; Setup parameters for call to function osal_pwrmgr_device
   \   000120   7901         MOV     R1,#0x1
   \   000122   12....       LCALL   ??osal_pwrmgr_device?relay; Banked call to: osal_pwrmgr_device
   1636          #endif
   1637          
   1638                  // The receiver is on, turn network layer polling off.
   1639                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000125   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000128   E0           MOVX    A,@DPTR
   \   000129   A2E3         MOV     C,0xE0 /* A   */.3
   \   00012B   501D         JNC     ??ZDApp_ProcessNetworkJoin_19
   1640                  {
   1641                    // if Child Table Management process is not enabled
   1642                    if ( zgChildAgingEnable == FALSE )
   \   00012D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000130   E0           MOVX    A,@DPTR
   \   000131   7017         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1643                    {
   1644                      NLME_SetPollRate( 0 );
   \   000133                ; Setup parameters for call to function NLME_SetPollRate
   \   000133   90....       MOV     DPTR,#__Constant_0
   \   000136   12....       LCALL   ?XLOAD_R2345
   \   000139   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   1645                      NLME_SetQueuedPollRate( 0 );
   \   00013C                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00013C   7A00         MOV     R2,#0x0
   \   00013E   7B00         MOV     R3,#0x0
   \   000140   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   1646                      NLME_SetResponseRate( 0 );
   \   000143                ; Setup parameters for call to function NLME_SetResponseRate
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \   000147   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   1647                    }
   1648                  }
   1649          
   1650                  if ( ZSTACK_ROUTER_BUILD )
   1651                  {
   1652                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1653                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1654                    {
   1655                      NLME_StartRouterRequest( 0, 0, false );
   1656                    }
   1657                  }
   1658          
   1659                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00014A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00014A   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1660          
   1661                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1662                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1663                        && (zgChildAgingEnable == TRUE) ) )
   \   00014D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000150   E0           MOVX    A,@DPTR
   \   000151   A2E3         MOV     C,0xE0 /* A   */.3
   \   000153   500B         JNC     ??ZDApp_ProcessNetworkJoin_20
   \   000155   90....       MOV     DPTR,#zgChildAgingEnable
   \   000158   E0           MOVX    A,@DPTR
   \   000159   6401         XRL     A,#0x1
   \   00015B   6003         JZ      $+5
   \   00015D   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1664                  {
   1665                    NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000160                ; Setup parameters for call to function NLME_SetPollRate
   \   000160   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000163   12....       LCALL   ?XLOAD_R2345
   \   000166   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   \   000169   02....       LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
   1666                  }
   1667                }
   1668              }
   1669              else
   1670              {
   1671                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00016C   90....       MOV     DPTR,#devStartMode
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   6401         XRL     A,#0x1
   \   000172   7038         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1672                {
   1673                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000174   90....       MOV     DPTR,#retryCnt
   \   000177   E0           MOVX    A,@DPTR
   \   000178   04           INC     A
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   C3           CLR     C
   \   00017B   9404         SUBB    A,#0x4
   \   00017D   501F         JNC     ??ZDApp_ProcessNetworkJoin_22
   1674                  {
   1675                    if ( _NIB.nwkPanId == 0xFFFF )
   \   00017F   90....       MOV     DPTR,#_NIB + 33
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F4           CPL     A
   \   000184   7003         JNZ     ??ZDApp_ProcessNetworkJoin_23
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000189   601B         JZ      ??ZDApp_ProcessNetworkJoin_24
   1676                      devStartMode = MODE_JOIN;
   1677                    else
   1678                    {
   1679                      devStartMode = MODE_REJOIN;
   \   00018B   90....       MOV     DPTR,#devStartMode
   \   00018E   7403         MOV     A,#0x3
   \   000190   F0           MOVX    @DPTR,A
   1680                      _tmpRejoinState = true;
   \   000191   90....       MOV     DPTR,#_tmpRejoinState
   \   000194   7401         MOV     A,#0x1
   \   000196   F0           MOVX    @DPTR,A
   1681                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000197   90....       MOV     DPTR,#prevDevState
   \   00019A   7404         MOV     A,#0x4
   \   00019C   8060         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1682                    }
   1683                  }
   1684                  // Do a normal join to the network after certain times of rejoin retries
   1685                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00019E   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   6401         XRL     A,#0x1
   \   0001A4   7059         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1686                  {
   1687                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001A6   90....       MOV     DPTR,#devStartMode
   \   0001A9   E4           CLR     A
   \   0001AA   8052         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1688                  }
   1689                }
   1690                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   6403         XRL     A,#0x3
   \   0001AF   704E         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1691                {
   1692                  if ( ZSTACK_END_DEVICE_BUILD )
   1693                  {
   1694                    devStartMode = MODE_REJOIN;
   1695                    _tmpRejoinState = true;
   \   0001B1   90....       MOV     DPTR,#_tmpRejoinState
   \   0001B4   7401         MOV     A,#0x1
   \   0001B6   F0           MOVX    @DPTR,A
   1696                    _NIB.nwkState = NWK_INIT;
   \   0001B7   90....       MOV     DPTR,#_NIB + 35
   \   0001BA   E4           CLR     A
   \   0001BB   F0           MOVX    @DPTR,A
   1697          
   1698                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   0001BC   90....       MOV     DPTR,#prevDevState
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   6404         XRL     A,#0x4
   \   0001C2   7007         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1699                    {
   1700                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001C4   12....       LCALL   ?Subroutine11 & 0xFFFF
   1701                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1702                    }
   \                     ??CrossCallReturnLabel_0:
   \   0001C7   740D         MOV     A,#0xd
   \   0001C9   8033         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1703                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   640D         XRL     A,#0xd
   \   0001CE   7024         JNZ     ??ZDApp_ProcessNetworkJoin_28
   1704                    {
   1705                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1706                      //将这两句注释后，可能导致重入网到网关没保存在的节点？2018.1.18
   1707          						//不注释会使节点重加网失败，不停发Beacon request，rejoin到协调器，它也不给转发Recall Scene 2018.1.18
   1708          						//_NIB.nwkKeyLoaded = FALSE;             //add by jc，不清除旧的keys，不以TC加入的方式加网
   1709                      //ZDApp_ResetNwkKey(); // Clear up the old network key.
   1710          						//end of add by jc
   1711                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   0001D0   75..01       MOV     ?V0,#0x1
   \   0001D3   75..00       MOV     ?V1,#0x0
   \   0001D6   75..00       MOV     ?V2,#0x0
   \   0001D9   75..00       MOV     ?V3,#0x0
   \   0001DC   90....       MOV     DPTR,#_NIB + 22
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   78..         MOV     R0,#?V0
   \   0001E2   12....       LCALL   ?L_SHL
   \   0001E5   90....       MOV     DPTR,#runtimeChannel
   \   0001E8   78..         MOV     R0,#?V0
   \   0001EA   12....       LCALL   ?L_MOV_TO_X
   1712                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   0001ED   90....       MOV     DPTR,#prevDevState
   \   0001F0   740E         MOV     A,#0xe
   \   0001F2   800A         SJMP    ??ZDApp_ProcessNetworkJoin_25
   1713                    }
   1714                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   640E         XRL     A,#0xe
   \   0001F7   7006         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1715                    {
   1716                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001F9   12....       LCALL   ?Subroutine11 & 0xFFFF
   1717                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1718                    }
   1719          
   1720                  }
   1721                }
   \                     ??CrossCallReturnLabel_1:
   \   0001FC   740F         MOV     A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001FE   F0           MOVX    @DPTR,A
   1722          
   1723                // Clear the neighbor Table and network discovery tables.
   1724                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   0001FF                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001FF   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   1725                NLME_NwkDiscTerm();
   \   000202                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000202   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   1726          
   1727                // setup a retry for later...
   1728                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1729                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000205                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000205   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000208                ; Setup parameters for call to function ZDApp_NetworkInit
   1730              }
   1731            }
   \   000208   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00020B   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   00020E   8012         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1732          #if defined ( ZIGBEEPRO )
   1733            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000210   E0           MOVX    A,@DPTR
   \   000211   600F         JZ      ??ZDApp_ProcessNetworkJoin_6
   1734            {
   1735              // Assume from address conflict
   1736          
   1737              // Notify the network
   1738              ZDApp_AnnounceNewAddress();
   \   000213                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000213   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   1739          
   1740              // Notify apps
   1741              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000216                ; Setup parameters for call to function osal_set_event
   \   000216   7A10         MOV     R2,#0x10
   \   000218   7B00         MOV     R3,#0x0
   \   00021A   90....       MOV     DPTR,#ZDAppTaskID
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   F9           MOV     R1,A
   \   00021F   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   1742            }
   1743          #endif
   1744          }
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000222   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#runtimeChannel
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74F8         MOV     A,#-0x8
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7407         MOV     A,#0x7
   \   000010   F0           MOVX    @DPTR,A
   \   000011   90....       MOV     DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0
   1745          
   1746          /*********************************************************************
   1747           * @fn      ZDApp_SaveNwkKey()
   1748           *
   1749           * @brief   Save off the Network key information.
   1750           *
   1751           * @param   none
   1752           *
   1753           * @return  none
   1754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1755          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1756          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1757            nwkActiveKeyItems keyItems;
   1758          
   1759            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   ??SSP_ReadNwkActiveKey?relay; Banked call to: SSP_ReadNwkActiveKey
   1760          
   1761            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1762                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1765          
   1766            // Clear copy in RAM before return.
   1767            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1768          
   1769          }
   \   00004B                REQUIRE ?Subroutine8
   \   00004B                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1770          
   1771          /*********************************************************************
   1772           * @fn      ZDApp_ForceConcentratorChange()
   1773           *
   1774           * @brief   Force a network concentrator change by resetting
   1775           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1776           *          from NV and set nwk event.
   1777           *
   1778           * @param   none
   1779           *
   1780           * @return  none
   1781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1782          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1784            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1785            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1786          
   1787            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1788            {
   1789              // Start next event
   1790              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1791            }
   1792            else
   1793            {
   1794              // Stop the next event
   1795              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   1796            }
   1797          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1798          
   1799          /*********************************************************************
   1800           * @fn      ZDApp_ResetNwkKey()
   1801           *
   1802           * @brief   Reset the Network key information in NV.
   1803           *
   1804           * @param   none
   1805           *
   1806           * @return  none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1810            nwkActiveKeyItems keyItems;
   1811          
   1812            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1813            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1814                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1815          }
   \   00003F   02....       LJMP    ?Subroutine8 & 0xFFFF
   1816          
   1817          /*********************************************************************
   1818           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1819           *
   1820           * @brief
   1821           *
   1822           *   Save off the Network key information.
   1823           *
   1824           * @param   incrFrmCnt - set to true if we want to increment the network
   1825                      frame counter, else set to false
   1826           *
   1827           * @return  true if restored from NV, false if not
   1828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1829          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1830          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1831            nwkActiveKeyItems keyItems;
   1832            uint8 ret = FALSE;
   \   00000C   7F00         MOV     R7,#0x0
   1833          
   1834            // Restore the key information
   1835            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1836                == ZSUCCESS )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV     R0,?XSP + 0
   \   000010   A9..         MOV     R1,?XSP + 1
   \   000012   88..         MOV     ?V0,R0
   \   000014   89..         MOV     ?V1,R1
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75..15       MOV     ?V0,#0x15
   \   00001E   8F..         MOV     ?V1,R7
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7C00         MOV     R4,#0x0
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7A82         MOV     R2,#-0x7e
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   E9           MOV     A,R1
   \   000036   6003         JZ      $+5
   \   000038   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1837            {
   1838              uint8 nullKey[SEC_KEY_LEN];
   1839          
   1840              // initialize default value to compare to
   1841              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C10         MOV     R4,#0x10
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7900         MOV     R1,#0x0
   \   000041   7415         MOV     A,#0x15
   \   000043   12....       LCALL   ?XSTACK_DISP101_8
   \   000046   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1842          
   1843              // if stored key is different than default value, then a key has been established
   1844              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000049                ; Setup parameters for call to function osal_memcmp
   \   000049   7415         MOV     A,#0x15
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
   \   000052   8F..         MOV     ?V2,R7
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   7060         JNZ     ??ZDApp_RestoreNwkKey_0
   1845              {
   1846                if ( incrFrmCnt )
   \   000073   EE           MOV     A,R6
   \   000074   604E         JZ      ??ZDApp_RestoreNwkKey_1
   1847                {
   1848                  // Increment the frame counter stored in NV
   1849                  keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1850                                            NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000076   90....       MOV     DPTR,#__Constant_4e2
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   7411         MOV     A,#0x11
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?L_ADD_TO_X
   1851          
   1852                  nwkFrameCounter = keyItems.frameCounter;
   \   000088   7411         MOV     A,#0x11
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?XLOAD_R0123
   \   000090   90....       MOV     DPTR,#nwkFrameCounter
   \   000093   12....       LCALL   ?XSTORE_R0123
   1853          
   1854                  // Save the updated Frame Counter right away
   1855                  osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1856                                (void *)&keyItems );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V0,R0
   \   00009C   89..         MOV     ?V1,R1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..15       MOV     ?V0,#0x15
   \   0000A6   8F..         MOV     ?V1,R7
   \   0000A8   78..         MOV     R0,#?V0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   7C00         MOV     R4,#0x0
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7A82         MOV     R2,#-0x7e
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   1857          
   1858                  nwkFrameCounterChanges = 0;
   \   0000BD   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
   1859                }
   1860          
   1861                ret = TRUE;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   0000C4   7F01         MOV     R7,#0x1
   1862          
   1863                // Clear copy in RAM before return.
   1864                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C15         MOV     R4,#0x15
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   1865              }
   1866            }
   1867          
   1868            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   7425         MOV     A,#0x25
   \   0000D7   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   1869          }
   1870          
   1871          /*********************************************************************
   1872           * @fn      ZDApp_ResetTimerStart
   1873           *
   1874           * @brief   Start the reset timer.
   1875           *
   1876           * @param   delay - delay time(ms) before reset
   1877           *
   1878           * @return  none
   1879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1880          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1882            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1883            {
   1884              // Start the rest timer
   1885              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1886            }
   1887          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   1888          
   1889          /*********************************************************************
   1890           * @fn      ZDApp_ResetTimerCancel
   1891           *
   1892           * @brief   Cancel the reset timer.
   1893           *
   1894           * @param   none
   1895           *
   1896           * @return  none
   1897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1898          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1899          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1900            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   1901            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_clear_event?relay; Banked call to: osal_clear_event
   1902          }
   \   00001C   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1903          
   1904          /*********************************************************************
   1905           * @fn      ZDApp_LeaveCtrlInit
   1906           *
   1907           * @brief   Initialize the leave control logic.
   1908           *
   1909           * @param   none
   1910           *
   1911           * @return  none
   1912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1913          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1915            uint8 status;
   1916          
   1917          
   1918            // Initialize control state
   1919            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1920          
   1921            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1922                                        sizeof(ZDApp_LeaveCtrl),
   1923                                        &ZDApp_LeaveCtrl );
   1924          
   1925            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1926            {
   1927              // Read saved control
   1928              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1929                            0,
   1930                            sizeof( uint8 ),
   1931                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1932            }
   1933          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1934          
   1935          /*********************************************************************
   1936           * @fn      ZDApp_LeaveCtrlSet
   1937           *
   1938           * @brief   Set the leave control logic.
   1939           *
   1940           * @param   ra - reassociate flag
   1941           *
   1942           * @return  none
   1943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1944          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1946            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1947          
   1948            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1949            {
   1950              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1951            }
   1952          
   1953            // Write the leave control
   1954            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1955                           0,
   1956                           sizeof( uint8 ),
   1957                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine4 & 0xFFFF
   1958          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine50_0
   \   000023                ; // Fall through to label ??Subroutine50_0
   1959          
   1960          /*********************************************************************
   1961           * @fn      ZDApp_LeaveCtrlReset
   1962           *
   1963           * @brief   Re-initialize the leave control logic.
   1964           *
   1965           * @param   none
   1966           *
   1967           * @return  none
   1968           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1969          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1970          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1971            // Set leave control to initialized state
   1972            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1973          
   1974            // Write initialized control
   1975            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1976                          0,
   1977                          sizeof( uint8 ),
   1978                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1979          }
   1980          
   1981          /*********************************************************************
   1982           * @fn      ZDApp_LeaveCtrlBypass
   1983           *
   1984           * @brief   Check if NV restore should be skipped during a leave reset.
   1985           *
   1986           * @param   none
   1987           *
   1988           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1990          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1991          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1992            uint8 bypass;
   1993          
   1994            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1995            {
   1996              bypass = TRUE;
   1997            }
   1998            else
   1999            {
   2000              bypass = FALSE;
   2001            }
   2002          
   2003            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine40_0
   2004          }
   2005          
   2006          /*********************************************************************
   2007           * @fn      ZDApp_LeaveCtrlStartup
   2008           *
   2009           * @brief   Check for startup conditions during a leave reset.
   2010           *
   2011           * @param   state      - devState_t determined by leave control logic
   2012           * @param   startDelay - startup delay
   2013           *
   2014           * @return  none
   2015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2016          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2017          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2018            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   2019          
   2020            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   2021            {
   2022              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   2023              {
   2024                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   2025              }
   2026              else
   2027              {
   2028                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   2029              }
   2030          
   2031              // Reset leave control logic
   2032              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay; Banked call to: ZDApp_LeaveCtrlReset
   2033            }
   2034          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine40_0
   2035          
   2036          /*********************************************************************
   2037           * @fn      ZDApp_LeaveReset
   2038           *
   2039           * @brief   Setup a device reset due to a leave indication/confirm.
   2040           *
   2041           * @param   ra - reassociate flag
   2042           *
   2043           * @return  none
   2044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2045          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2047            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay; Banked call to: ZDApp_LeaveCtrlSet
   2048          
   2049            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV     R2,#-0x78
   \   00000C   7B13         MOV     R3,#0x13
   \   00000E   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   2050          
   2051            if ( ZSTACK_ROUTER_BUILD )
   2052            {
   2053              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2054              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2055            }
   2056          
   2057            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2058            {
   2059              // Save polling values to be restored after rejoin
   2060              if ( ra == TRUE )
   \   000011   7401         MOV     A,#0x1
   \   000013   6E           XRL     A,R6
   \   000014   7024         JNZ     ??CrossCallReturnLabel_53
   2061              {
   2062                 ZDApp_SavedPollRate = zgPollRate;
   \   000016   90....       MOV     DPTR,#zgPollRate
   \   000019   12....       LCALL   ?XLOAD_R0123
   \   00001C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL   ?XSTORE_R0123
   2063                 savedResponseRate = zgResponsePollRate;
   \   000022   90....       MOV     DPTR,#zgResponsePollRate
   \   000025   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000028   90....       MOV     DPTR,#savedResponseRate
   \   00002B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2064                 savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_52:
   \   00002E   90....       MOV     DPTR,#zgQueuedPollRate
   \   000031   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   2065              }
   \                     ??CrossCallReturnLabel_90:
   \   000034   90....       MOV     DPTR,#savedQueuedPollRate
   \   000037   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2066          
   2067              // Disable polling
   2068              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_53:
   \   00003A                ; Setup parameters for call to function NLME_SetPollRate
   \   00003A   90....       MOV     DPTR,#__Constant_0
   \   00003D   12....       LCALL   ?XLOAD_R2345
   \   000040   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   2069              NLME_SetResponseRate(0);
   \   000043                ; Setup parameters for call to function NLME_SetResponseRate
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   2070              NLME_SetQueuedPollRate(0);
   \   00004A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   2071            }
   2072          
   2073            if ( ra == TRUE )
   \   000051   7401         MOV     A,#0x1
   \   000053   6E           XRL     A,R6
   \   000054   7027         JNZ     ??ZDApp_LeaveReset_0
   2074            {
   2075              devState = DEV_NWK_DISC;
   \   000056   90....       MOV     DPTR,#devState
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2076              devStartMode = MODE_REJOIN;
   2077              _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_3:
   \   00005E   12....       LCALL   ?Subroutine12 & 0xFFFF
   2078          
   2079              // For rejoin, specify the extended PANID to look for
   2080              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_47:
   \   000061   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2081          
   2082              _NIB.nwkState = NWK_DISC;
   \   000064   90....       MOV     DPTR,#_NIB + 35
   \   000067   7402         MOV     A,#0x2
   \   000069   F0           MOVX    @DPTR,A
   2083          
   2084              zdoDiscCounter = 3;
   \   00006A   90....       MOV     DPTR,#zdoDiscCounter
   \   00006D   04           INC     A
   \   00006E   F0           MOVX    @DPTR,A
   2085              NLME_NwkDiscTerm();
   \   00006F                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006F   12....       LCALL   ??NLME_NwkDiscTerm?relay; Banked call to: NLME_NwkDiscTerm
   2086          
   2087              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000072                ; Setup parameters for call to function osal_rand
   \   000072   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000075                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000075   12....       LCALL   ?Subroutine28 & 0xFFFF
   2088            }
   \                     ??CrossCallReturnLabel_27:
   \   000078   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   \   00007B   8007         SJMP    ??ZDApp_LeaveReset_1
   2089            else
   2090            {
   2091              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_0:
   \   00007D                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00007D   7A88         MOV     R2,#-0x78
   \   00007F   7B13         MOV     R3,#0x13
   \   000081   12....       LCALL   ??ZDApp_ResetTimerStart?relay; Banked call to: ZDApp_ResetTimerStart
   2092            }
   2093          }
   \                     ??ZDApp_LeaveReset_1:
   \   000084   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   2094          
   2095          /*********************************************************************
   2096           * @fn      ZDApp_LeaveUpdate
   2097           *
   2098           * @brief   Update local device data related to leaving device.
   2099           *
   2100           * @param   nwkAddr        - NWK address of leaving device
   2101           * @param   extAddr        - EXT address of leaving device
   2102           * @param   removeChildren - remove children of leaving device
   2103           *
   2104           * @return  none
   2105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2106          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2107                                  uint8 removeChildren )
   2108          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2109            // Remove Apps Key for leaving device
   2110            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2111          
   2112            // Clear SECURITY bit from Address Manager
   2113            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??ZDSecMgrAddrClear?relay; Banked call to: ZDSecMgrAddrClear
   2114          
   2115            if ( pbindRemoveDev )
   \   000020   90....       MOV     DPTR,#pbindRemoveDev
   \   000023   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000026   6032         JZ      ??ZDApp_LeaveUpdate_0
   2116            {
   2117              zAddrType_t devAddr;
   2118          
   2119              // Remove bind entry and all related data
   2120              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV     A,#0x8
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   7403         MOV     A,#0x3
   \   00002F   F0           MOVX    @DPTR,A
   2121              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV     ?V4,R6
   \   000032   8F..         MOV     ?V5,R7
   \   000034   75..00       MOV     ?V6,#0x0
   \   000037   78..         MOV     R0,#?V4
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV     R4,#0x8
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP101_8
   \   000045   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   2122          
   2123              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   90....       MOV     DPTR,#pbindRemoveDev
   \   000054   12....       LCALL   ?Subroutine36 & 0xFFFF
   2124            }
   \                     ??CrossCallReturnLabel_59:
   \   000057   12....       LCALL   ?CALL_IND
   2125          
   2126            // Remove if child
   2127            if ( ZSTACK_ROUTER_BUILD )
   2128            {
   2129              // Router shall notify the Trust Center that a child End Device or
   2130              // a neighbor Router (within radius=1) has left the network
   2131              APSME_UpdateDeviceReq_t req;
   2132          
   2133              // forward authorization to the Trust Center
   2134              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2135              req.devAddr    = nwkAddr;
   2136              req.devExtAddr = extAddr;
   2137              req.status = APSME_UD_DEVICE_LEFT;
   2138          
   2139              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2140              {
   2141                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2142                // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2143                // with legacy Coordinator devices which can only handle one or the other.
   2144                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   2145                {
   2146                  req.apsSecure = FALSE;
   2147          
   2148                  // send and APSME_UPDATE_DEVICE request to the trust center
   2149                  APSME_UpdateDeviceReq( &req );
   2150                }
   2151          
   2152                // send the message APS encrypted
   2153                req.apsSecure = TRUE;
   2154          
   2155                // send and APSME_UPDATE_DEVICE request to the trust center
   2156                APSME_UpdateDeviceReq( &req );
   2157              }
   2158              else
   2159              {
   2160                req.apsSecure = FALSE;
   2161          
   2162                // send and APSME_UPDATE_DEVICE request to the trust center
   2163                APSME_UpdateDeviceReq( &req );
   2164              }
   2165          
   2166              NLME_RemoveChild( extAddr, removeChildren );
   2167            }
   2168          
   2169            // Remove Routing table related entry
   2170            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   12....       LCALL   ??RTG_RemoveRtgEntry?relay; Banked call to: RTG_RemoveRtgEntry
   2171          
   2172            // Remove entry from neighborTable
   2173            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV     DPTR,#_NIB + 33
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   AB..         MOV     R3,?V1
   \   00006F   12....       LCALL   ??nwkNeighborRemove?relay; Banked call to: nwkNeighborRemove
   2174          
   2175            // Schedule to save data to NV
   2176            ZDApp_NwkWriteNVRequest();
   \   000072                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000072   12....       LCALL   ??AddrMgrWriteNVRequest?relay; Banked call to: AddrMgrWriteNVRequest
   2177          }
   \   000075   7409         MOV     A,#0x9
   \   000077                REQUIRE ?Subroutine6
   \   000077                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   2178          
   2179          /*********************************************************************
   2180           * @fn      ZDApp_NetworkDiscoveryReq
   2181           *
   2182           * @brief   Request a network discovery.
   2183           *
   2184           * @param  scanChannels -
   2185           * @param  scanDuration -
   2186           *
   2187           * @return  ZStatus_t
   2188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2189          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2190          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2191            // Setup optional filters - tbd
   2192          
   2193            // Request NLME network discovery
   2194            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   2195          }
   2196          
   2197          /*********************************************************************
   2198           * @fn      ZDApp_JoinReq
   2199           *
   2200           * @brief   Request the device to join a parent in a network.
   2201           *
   2202           * @param   channel -
   2203           * @param   panID -
   2204           *
   2205           * @return  ZStatus_t
   2206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2207          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2208                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2210            // Sync up the node with the stack profile (In the case where a pro device
   2211            // joins a non-pro network, or verse versa)
   2212            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??ZDApp_NodeProfileSync?relay; Banked call to: ZDApp_NodeProfileSync
   2213          
   2214            // Request NLME Join Request
   2215            return NLME_JoinRequest(extendedPanID, panID,channel,
   2216                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2217                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??NLME_JoinRequest?relay; Banked call to: NLME_JoinRequest
   \   000046                REQUIRE ?Subroutine9
   \   000046                ; // Fall through to label ?Subroutine9
   2218          
   2219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   2220          
   2221          /*********************************************************************
   2222           * @fn      ZDApp_DeviceConfigured
   2223           *
   2224           * @brief   Check to see if the local device is configured (i.e., part
   2225           *          of a network).
   2226           *
   2227           * @param   none
   2228           *
   2229           * @return  TRUE if configured. FALSE, otherwise.
   2230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2231          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2233            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2234          
   2235            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2236                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_read?relay ; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2237          
   2238            // Does the NIB have anything more than default?
   2239            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   7402         MOV     A,#0x2
   \   000056   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   2240          }
   2241          
   2242          /*********************************************************************
   2243           * CALLBACK FUNCTIONS
   2244           */
   2245          
   2246          
   2247          /*********************************************************************
   2248           * @fn      ZDApp_SendEventMsg()
   2249           *
   2250           * @brief
   2251           *
   2252           *   Sends a Network Join message
   2253           *
   2254           * @param  cmd - command ID
   2255           * @param  len - length (in bytes) of the buf field
   2256           * @param  buf - buffer for the rest of the message.
   2257           *
   2258           * @return  none
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2261          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2262            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2263          }
   \   000013   80..         SJMP    ??Subroutine44_0
   2264          
   2265          /*********************************************************************
   2266           * @fn      ZDApp_SendMsg()
   2267           *
   2268           * @brief   Sends a OSAL message
   2269           *
   2270           * @param  taskID - Where to send the message
   2271           * @param  cmd - command ID
   2272           * @param  len - length (in bytes) of the buf field
   2273           * @param  buf - buffer for the rest of the message.
   2274           *
   2275           * @return  none
   2276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2277          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2279            osal_event_hdr_t *msgPtr;
   2280          
   2281            // Send the address to the task
   2282            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV     R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   2283            if ( msgPtr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6035         JZ      ??ZDApp_SendMsg_0
   2284            {
   2285              if ( (len > 0) && (buf != NULL) )
   \   000021   EE           MOV     A,R6
   \   000022   6020         JZ      ??ZDApp_SendMsg_1
   \   000024   E5..         MOV     A,?V2
   \   000026   45..         ORL     A,?V3
   \   000028   601A         JZ      ??ZDApp_SendMsg_1
   2286                osal_memcpy( msgPtr, buf, len );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV     ?V8,?V2
   \   00002D   85....       MOV     ?V9,?V3
   \   000030   75..00       MOV     ?V10,#0x0
   \   000033   78..         MOV     R0,#?V8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   2287          
   2288              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
   2289              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   A9..         MOV     R1,?V4
   \   000053   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   2290            }
   2291          }
   \                     ??ZDApp_SendMsg_0:
   \   000056   7F0B         MOV     R7,#0xb
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   2292          
   2293          /*********************************************************************
   2294           * Call Back Functions from NWK  - API
   2295           */
   2296          
   2297          /*********************************************************************
   2298           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2299           *
   2300           * @brief       This function returns a choice of PAN to join.
   2301           *
   2302           * @param       status - return status of the nwk discovery confirm
   2303           *
   2304           * @return      ZStatus_t
   2305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2306          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2307          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2308            osal_event_hdr_t msg;
   2309          
   2310            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2311            // Send ZDO_MGMT_NWK_DISC_RSP back
   2312          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2313            if ( zdappMgmtNwkDiscReqInProgress )
   2314            {
   2315              zdappMgmtNwkDiscReqInProgress = false;
   2316              ZDO_FinishProcessingMgmtNwkDiscReq();
   2317            }
   2318            else
   2319          #endif
   2320            {
   2321              // Pass the confirm to another task if it registers the callback
   2322              // Otherwise, pass the confirm to ZDApp.
   2323              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000017   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2324              {
   2325                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   \   000020   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2326              }
   2327              else
   2328              {
   2329                // Otherwise, send scan confirm to ZDApp task to proceed
   2330                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   2331                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC     A
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7B02         MOV     R3,#0x2
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2332              }
   2333            }
   2334            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine3 & 0xFFFF
   2335          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2336          
   2337          /*********************************************************************
   2338           * @fn          ZDApp_NwkDescListProcessing
   2339           *
   2340           * @brief       This function process the network discovery result and select
   2341           *              a parent device to join itself.
   2342           *
   2343           * @param       none
   2344           *
   2345           * @return      ZStatus_t
   2346           */
   2347          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2348          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2350            networkDesc_t *pNwkDesc;
   2351            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2352            uint8 stackProfile;
   2353            uint8 stackProfilePro;
   2354            uint8 selected;
   2355          
   2356            // Count the number of nwk descriptors in the list
   2357            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_64
   2358            while (pNwkDesc)
   2359            {
   2360              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2361              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine24 & 0xFFFF
   2362            }
   \                     ??CrossCallReturnLabel_64:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2363          
   2364            // process discovery results
   2365            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2366            selected = FALSE;
   2367          
   2368          
   2369            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2370            {
   2371              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2372              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_65
   2373              {
   2374                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2375                {
   2376                  // If the extended Pan ID is commissioned to a non zero value
   2377                  // Only join the Pan that has match EPID
   2378                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2379                    continue;
   2380          
   2381                }
   2382                else if ( zgConfigPANID != 0xFFFF )
   2383                {
   2384                  // PAN Id is preconfigured. check if it matches
   2385                  if ( pNwkDesc->panId != zgConfigPANID )
   2386                    continue;
   2387                }
   2388          
   2389                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2390                {
   2391                  // check that network is allowing joining
   2392                  if ( ZSTACK_ROUTER_BUILD )
   2393                  {
   2394                    if ( stackProfilePro == FALSE )
   2395                    {
   2396                      if ( !pNwkDesc->routerCapacity )
   2397                      {
   2398                        continue;
   2399                      }
   2400                    }
   2401                    else
   2402                    {
   2403                      if ( !pNwkDesc->deviceCapacity )
   2404                      {
   2405                        continue;
   2406                      }
   2407                    }
   2408                  }
   2409                  else if ( ZSTACK_END_DEVICE_BUILD )
   2410                  {
   2411                    if ( !pNwkDesc->deviceCapacity )
   2412                    {
   2413                      continue;
   2414                    }
   2415                  }
   2416                }
   2417          
   2418                // check version of zigbee protocol
   2419                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2420                  continue;
   2421          
   2422                // check version of stack profile
   2423                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2424                {
   2425                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2426                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2427                  {
   2428                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0,#0x1
   2429                  }
   2430          
   2431                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V3
   \   00004A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00004D   E5..         MOV     A,?V3
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V1
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   ??nwk_ExtPANIDValid?relay; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV     DPTR,#zgConfigPANID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F4           CPL     A
   \   00007B   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000085   90....       MOV     DPTR,#zgConfigPANID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   68           XRL     A,R0
   \   00008A   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV     DPTR,#_NIB + 23
   \   000094   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   68           XRL     A,R0
   \   00009A   7003         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009F   700A         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   68           XRL     A,R0
   \   0000A4   7003         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   0000A6   74FF         MOV     A,#-0x1
   \   0000A8   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A9   700B         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6092         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   90....       MOV     DPTR,#_NIB + 17
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   68           XRL     A,R0
   \   0000C6   7080         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   90....       MOV     DPTR,#zgStackProfile
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   68           XRL     A,R0
   \   0000D9   6032         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E3   7402         MOV     A,#0x2
   \   0000E5   68           XRL     A,R0
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EB   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2432                  {
   2433                    continue;
   2434                  }
   2435                }
   2436          
   2437                break;
   2438              }
   2439          
   2440              if (i < ResultCount)
   2441              {
   2442               selected = TRUE;
   2443                break;
   2444              }
   2445          
   2446              // break if selected or stack profile pro wasn't found
   2447              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   600C         JZ      ??ZDApp_NwkDescListProcessing_16
   2448              {
   2449                break;
   2450              }
   2451            }
   \   0000F2   05..         INC     ?V2
   \   0000F4   E5..         MOV     A,?V2
   \   0000F6   C3           CLR     C
   \   0000F7   9402         SUBB    A,#0x2
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2452          
   2453            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FE   E5..         MOV     A,?V1
   \   000100   65..         XRL     A,?V3
   \   000102   7009         JNZ     ??ZDApp_NwkDescListProcessing_5
   2454            {
   2455              nwk_desc_list_free();
   \   000104                ; Setup parameters for call to function nwk_desc_list_free
   \   000104   12....       LCALL   ??nwk_desc_list_free?relay; Banked call to: nwk_desc_list_free
   2456              return (NULL);   // couldn't find appropriate PAN to join !
   \   000107   7A00         MOV     R2,#0x0
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8004         SJMP    ??ZDApp_NwkDescListProcessing_17
   2457            }
   2458            else
   2459            {
   2460              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   2461            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000111                REQUIRE ?Subroutine1
   \   000111                ; // Fall through to label ?Subroutine1
   2462          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine45_0
   \   000009                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0
   2463          
   2464          /*********************************************************************
   2465           * @fn          ZDO_NetworkFormationConfirmCB
   2466           *
   2467           * @brief       This function reports the results of the request to
   2468           *              initialize a coordinator in a network.
   2469           *
   2470           * @param       Status - Result of NLME_NetworkFormationRequest()
   2471           *
   2472           * @return      none
   2473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine44_0
   \   00000A                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2474          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2475          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2476            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2477          
   2478            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2479            {
   2480              // LED on shows Coordinator started
   2481              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2482          
   2483              // LED off forgets HOLD_AUTO_START
   2484              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2485          
   2486          #if defined ( ZBIT )
   2487              SIM_SetColor(0xd0ffd0);
   2488          #endif
   2489          
   2490              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700E         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2491              {
   2492                // Began with HOLD_AUTO_START
   2493                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7908         MOV     R1,#0x8
   \   000022   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2494              }
   2495            }
   2496          #if defined(BLINK_LEDS)
   2497            else
   2498            {
   2499              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7904         MOV     R1,#0x4
   \   00002B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2500            }
   2501          #endif
   2502          
   2503            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A02         MOV     R2,#0x2
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   2504          }
   2505          
   2506          /****************************************************************************
   2507           * @fn          ZDApp_beaconIndProcessing
   2508           *
   2509           * @brief       This function processes the incoming beacon indication.
   2510           *
   2511           *              When another task (MT or App) is registered to process
   2512           *              beacon indication themselves, this function will parse the
   2513           *              beacon payload and pass the beacon descriptor to that task
   2514           *              If no other tasks registered, this function will process
   2515           *              the beacon payload and generate the network descriptor link
   2516           *              list.
   2517           *
   2518           * @param
   2519           *
   2520           * @return      none
   2521           *
   2522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2523          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2525            // Pass the beacon Indication to another task if it registers the callback
   2526            // Otherwise, process the beacon notification here.
   2527            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2528            {
   2529              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2530            }
   2531            else
   2532            {
   2533              networkDesc_t *pNwkDesc;
   2534              networkDesc_t *pLastNwkDesc;
   2535              uint8 found = false;
   2536          
   2537              // Add the network to the Network Descriptor List
   2538              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2539              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_61:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V1
   \   00002F   F5..         MOV     ?V7,A
   \   000031   EA           MOV     A,R2
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   802B         SJMP    ??CrossCallReturnLabel_66
   2540              while (pNwkDesc)
   2541              {
   2542                if ((pNwkDesc->panId == pBeacon->panID) &&
   2543                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000040   85..82       MOV     DPL,?V4
   \   000043   85..83       MOV     DPH,?V5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   68           XRL     A,R0
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   85..82       MOV     DPL,?V6
   \   00005A   85..83       MOV     DPH,?V7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2544                {
   2545                  found = true;
   2546                  break;
   2547                }
   2548                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV     ?V2,R6
   \   000063   8F..         MOV     ?V3,R7
   2549                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL   ?Subroutine24 & 0xFFFF
   2550              }
   \                     ??CrossCallReturnLabel_66:
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2551          
   2552              // If no existing descriptor found, make a new one and add to the list
   2553              if (found == false)
   2554              {
   2555                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV     R2,#0x16
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   AE..         MOV     R6,?V8
   \   000079   AF..         MOV     R7,?V9
   2556                if ( !pNwkDesc )
   \   00007B   EE           MOV     A,R6
   \   00007C   4F           ORL     A,R7
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2557                {
   2558                  // Memory alloc failed, discard this beacon
   2559                  return;
   2560                }
   2561          
   2562                // Clear the network descriptor
   2563                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV     R4,#0x16
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2564          
   2565                // Initialize the descriptor
   2566                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   74FE         MOV     A,#-0x2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   04           INC     A
   \   00009B   F0           MOVX    @DPTR,A
   2567                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   2568          
   2569                // Save new entry into the descriptor list
   2570                if ( !NwkDescList )
   \   0000AB   90....       MOV     DPTR,#NwkDescList
   \   0000AE   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000B1   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2571                {
   2572                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV     DPTR,#NwkDescList
   \   0000B6   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2573                }
   2574                else
   2575                {
   2576                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   2577                }
   2578              }
   2579          
   2580              // Update the descriptor with the incoming beacon
   2581              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   2582              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2408         ADD     A,#0x8
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000EC   F0           MOVX    @DPTR,A
   2583              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2584              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2585              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_100:
   \   00010B   E5..         MOV     A,?V0
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   EE           MOV     A,R6
   \   00011A   2413         ADD     A,#0x13
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   3F           ADDC    A,R7
   \   000120   F583         MOV     DPH,A
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   2586          
   2587              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2588              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   3F           ADDC    A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2589              {
   2590                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV     A,?V0
   \   000137   240D         ADD     A,#0xd
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V1
   \   00013D   FD           MOV     R5,A
   \   00013E   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2591              }
   2592              else
   2593              {
   2594                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   79FF         MOV     R1,#-0x1
   \   000149   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2595              }
   2596          
   2597              // check if this device is a better choice to join...
   2598              // ...dont bother checking assocPermit flag is doing a rejoin
   2599              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2600                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240A         ADD     A,#0xa
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   35..         ADDC    A,?V1
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V4,A
   \   00015C   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C3           CLR     C
   \   000161   95..         SUBB    A,?V4
   \   000163   4003         JC      $+5
   \   000165   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000168   85..82       MOV     DPL,?V0
   \   00016B   85..83       MOV     DPH,?V1
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   6401         XRL     A,#0x1
   \   000176   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000178   90....       MOV     DPTR,#_tmpRejoinState
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2601              {
   2602                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000181   75..00       MOV     ?V6,#0x0
   2603                uint8 capacity = FALSE;
   2604          
   2605          #if defined ( ZIGBEEPRO )
   2606                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2607                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2608                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2609                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000184   EE           MOV     A,R6
   \   000185   2409         ADD     A,#0x9
   \   000187   FA           MOV     R2,A
   \   000188   E4           CLR     A
   \   000189   3F           ADDC    A,R7
   \   00018A   FB           MOV     R3,A
   \   00018B   8A82         MOV     DPL,R2
   \   00018D   8B83         MOV     DPH,R3
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F5..         MOV     ?V5,A
   \   000192   EE           MOV     A,R6
   \   000193   240A         ADD     A,#0xa
   \   000195   FC           MOV     R4,A
   \   000196   E4           CLR     A
   \   000197   3F           ADDC    A,R7
   \   000198   FD           MOV     R5,A
   \   000199   E5..         MOV     A,?V0
   \   00019B   240B         ADD     A,#0xb
   \   00019D   F5..         MOV     ?V2,A
   \   00019F   E4           CLR     A
   \   0001A0   35..         ADDC    A,?V1
   \   0001A2   F5..         MOV     ?V3,A
   \   0001A4   E5..         MOV     A,?V5
   \   0001A6   C3           CLR     C
   \   0001A7   95..         SUBB    A,?V4
   \   0001A9   500E         JNC     ??ZDO_beaconNotifyIndCB_11
   \   0001AB   85..82       MOV     DPL,?V2
   \   0001AE   85..83       MOV     DPH,?V3
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   C3           CLR     C
   \   0001B3   9414         SUBB    A,#0x14
   \   0001B5   401B         JC      ??ZDO_beaconNotifyIndCB_12
   \   0001B7   801C         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001B9   E5..         MOV     A,?V5
   \   0001BB   65..         XRL     A,?V4
   \   0001BD   7016         JNZ     ??ZDO_beaconNotifyIndCB_13
   \   0001BF   8C82         MOV     DPL,R4
   \   0001C1   8D83         MOV     DPH,R5
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F5..         MOV     ?V4,A
   \   0001C6   85..82       MOV     DPL,?V2
   \   0001C9   85..83       MOV     DPH,?V3
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   C3           CLR     C
   \   0001CE   95..         SUBB    A,?V4
   \   0001D0   5003         JNC     ??ZDO_beaconNotifyIndCB_13
   2610                {
   2611                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D2   75..01       MOV     ?V6,#0x1
   2612                }
   2613          #else
   2614                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2615                {
   2616                  selected = TRUE;
   2617                }
   2618          #endif
   2619          
   2620                if ( ZSTACK_ROUTER_BUILD )
   2621                {
   2622                  capacity = pBeacon->routerCapacity;
   2623                }
   2624                else if ( ZSTACK_END_DEVICE_BUILD )
   2625                {
   2626                  capacity = pBeacon->deviceCapacity;
   2627                }
   2628          
   2629                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D5   E5..         MOV     A,?V0
   \   0001D7   2407         ADD     A,#0x7
   \   0001D9   F5..         MOV     ?V4,A
   \   0001DB   E4           CLR     A
   \   0001DC   35..         ADDC    A,?V1
   \   0001DE   F5..         MOV     ?V5,A
   \   0001E0   85..82       MOV     DPL,?V4
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   701B         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   0001E8   85..82       MOV     DPL,?V0
   \   0001EB   85..83       MOV     DPH,?V1
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F5..         MOV     ?V8,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F5..         MOV     ?V9,A
   \   0001F5   90....       MOV     DPTR,#_NIB + 23
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   65..         XRL     A,?V8
   \   0001FB   7004         JNZ     ??ZDO_beaconNotifyIndCB_15
   \   0001FD   A3           INC     DPTR
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   65..         XRL     A,?V9
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000201   704A         JNZ     ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000203   E5..         MOV     A,?V6
   \   000205   A2E0         MOV     C,0xE0 /* A   */.0
   \   000207   5030         JNC     ??ZDO_beaconNotifyIndCB_17
   2630                {
   2631                  // this is the new chosen router for joining...
   2632                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000209   85..82       MOV     DPL,?V0
   \   00020C   85..83       MOV     DPH,?V1
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F5..         MOV     ?V6,A
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   F5..         MOV     ?V7,A
   \   000216   8E82         MOV     DPL,R6
   \   000218   8F83         MOV     DPH,R7
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   E5..         MOV     A,?V6
   \   000223   F0           MOVX    @DPTR,A
   \   000224   A3           INC     DPTR
   \   000225   E5..         MOV     A,?V7
   \   000227   F0           MOVX    @DPTR,A
   2633                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000228   8882         MOV     DPL,R0
   \   00022A   8983         MOV     DPH,R1
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   8A82         MOV     DPL,R2
   \   00022F   8B83         MOV     DPH,R3
   \   000231   12....       LCALL   ?Subroutine16 & 0xFFFF
   2634                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   2635                }
   \                     ??CrossCallReturnLabel_4:
   \   000234   8C82         MOV     DPL,R4
   \   000236   8D83         MOV     DPH,R5
   \   000238   F0           MOVX    @DPTR,A
   2636          
   2637                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000239   85..82       MOV     DPL,?V4
   \   00023C   85..83       MOV     DPH,?V5
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   600B         JZ      ??ZDO_beaconNotifyIndCB_16
   2638                  pNwkDesc->deviceCapacity = 1;
   \   000242   8E82         MOV     DPL,R6
   \   000244   8F83         MOV     DPH,R7
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   7401         MOV     A,#0x1
   \   00024C   F0           MOVX    @DPTR,A
   2639          
   2640                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00024D   85..82       MOV     DPL,?V0
   \   000250   85..83       MOV     DPH,?V1
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   A3           INC     DPTR
   \   000257   A3           INC     DPTR
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2641                  pNwkDesc->routerCapacity = 1;
   \   00025C   8E82         MOV     DPL,R6
   \   00025E   8F83         MOV     DPH,R7
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   7401         MOV     A,#0x1
   \   000265   F0           MOVX    @DPTR,A
   2642              }
   2643            }
   2644          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000266   7F0A         MOV     R7,#0xa
   \   000268   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   2645          
   2646          /*********************************************************************
   2647           * @fn          ZDO_StartRouterConfirmCB
   2648           *
   2649           * @brief       This function reports the results of the request to
   2650           *              start functioning as a router in a network.
   2651           *
   2652           * @param       Status - Result of NLME_StartRouterRequest()
   2653           *
   2654           * @return      none
   2655           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2656          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2657          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2658            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2659          
   2660            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ     ??ZDO_StartRouterConfirmCB_0
   2661            {
   2662              // LED on shows Router started
   2663              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2664              // LED off forgets HOLD_AUTO_START
   2665              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2666              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   700E         JNZ     ??ZDO_StartRouterConfirmCB_1
   2667              {
   2668                // Began with HOLD_AUTO_START
   2669                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7906         MOV     R1,#0x6
   \   000022   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP    ??ZDO_StartRouterConfirmCB_1
   2670              }
   2671            }
   2672          #if defined(BLINK_LEDS)
   2673            else
   2674            {
   2675              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV     R2,#0x4
   \   000029   7904         MOV     R1,#0x4
   \   00002B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2676            }
   2677          #endif
   2678          
   2679            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A20         MOV     R2,#0x20
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   2680          }
   2681          
   2682          /*********************************************************************
   2683           * @fn          ZDO_JoinConfirmCB
   2684           *
   2685           * @brief       This function allows the next higher layer to be notified
   2686           *              of the results of its request to join itself or another
   2687           *              device to a network.
   2688           *
   2689           * @param       Status - Result of NLME_JoinRequest()
   2690           *
   2691           * @return      none
   2692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2693          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2694          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2695            (void)PanId;  // remove if this parameter is used.
   2696          
   2697            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2698          
   2699            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2700            {
   2701              if ( ZSTACK_END_DEVICE_BUILD
   2702                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2703              {
   2704                neighborEntry_t *pItem;
   2705          
   2706                // We don't need the neighbor table entries.
   2707                // Clear the neighbor Table to remove beacon information
   2708                nwkNeighborInitTable();
   \   000016                ; Setup parameters for call to function nwkNeighborInitTable
   \   000016   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   2709          
   2710                // Force a neighbor table entry for the parent
   2711                pItem = nwkNeighborFindEmptySlot();
   \   000019                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000019   12....       LCALL   ??nwkNeighborFindEmptySlot?relay; Banked call to: nwkNeighborFindEmptySlot
   \   00001C   8A..         MOV     ?V2,R2
   \   00001E   8B..         MOV     ?V3,R3
   \   000020   AE..         MOV     R6,?V2
   \   000022   AF..         MOV     R7,?V3
   2712                if ( pItem != NULL )
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   6054         JZ      ??ZDO_JoinConfirmCB_1
   2713                {
   2714                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000028                ; Setup parameters for call to function osal_memset
   \   000028   7C17         MOV     R4,#0x17
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   2715                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000031   90....       MOV     DPTR,#_NIB + 23
   \   000034   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2716                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_54:
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000040   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000042   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000045   12....       LCALL   ??sAddrExtCpy?relay  ; Banked call to: sAddrExtCpy
   2717                  pItem->panId = _NIB. nwkPanId;
   \   000048   90....       MOV     DPTR,#_NIB + 33
   \   00004B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004E   12....       LCALL   ?Subroutine13 & 0xFFFF
   2718                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_55:
   \   000051   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000054   74AA         MOV     A,#-0x56
   \   000056   F0           MOVX    @DPTR,A
   2719                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000057   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   00005A   E4           CLR     A
   \   00005B   93           MOVC    A,@A+DPTR
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   2401         ADD     A,#0x1
   \   000060   F8           MOV     R0,A
   \   000061   5001         JNC     ??ZDO_JoinConfirmCB_2
   \   000063   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000064   7A02         MOV     R2,#0x2
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   ?S_DIV_MOD
   \   00006B   EE           MOV     A,R6
   \   00006C   240D         ADD     A,#0xd
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   3F           ADDC    A,R7
   \   000072   F583         MOV     DPH,A
   \   000074   E8           MOV     A,R0
   \   000075   F0           MOVX    @DPTR,A
   2720                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000076   12....       LCALL   ?Subroutine32 & 0xFFFF
   2721                }
   2722              }
   \                     ??CrossCallReturnLabel_35:
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
   2723          
   2724              // LED on shows device joined
   2725              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   00007C                ; Setup parameters for call to function HalLedSet
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7904         MOV     R1,#0x4
   \   000080   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2726              // LED off forgets HOLD_AUTO_START
   2727              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000083                ; Setup parameters for call to function HalLedSet
   \   000083   7A00         MOV     R2,#0x0
   \   000085   7908         MOV     R1,#0x8
   \   000087   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2728              if ( (devState == DEV_HOLD) )
   \   00008A   90....       MOV     DPTR,#devState
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   700E         JNZ     ??ZDO_JoinConfirmCB_3
   2729              {
   2730                // Began with HOLD_AUTO_START
   2731                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000090                ; Setup parameters for call to function ZDApp_ChangeState
   \   000090   7903         MOV     R1,#0x3
   \   000092   12....       LCALL   ??ZDApp_ChangeState?relay; Banked call to: ZDApp_ChangeState
   \   000095   8007         SJMP    ??ZDO_JoinConfirmCB_3
   2732              }
   2733          
   2734              if ( !ZG_SECURE_ENABLED )
   2735              {
   2736                // Notify to save info into NV
   2737                ZDApp_NVUpdate();
   2738              }
   2739            }
   2740            else
   2741            {
   2742          #if defined(BLINK_LEDS)
   2743              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   000097                ; Setup parameters for call to function HalLedSet
   \   000097   7A04         MOV     R2,#0x4
   \   000099   7904         MOV     R1,#0x4
   \   00009B   12....       LCALL   ??HalLedSet?relay    ; Banked call to: HalLedSet
   2744          #endif
   2745            }
   2746          
   2747            // Pass the join confirm to higher layer if callback registered
   2748            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   00009E   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000A1   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000A4   6030         JZ      ??ZDO_JoinConfirmCB_4
   2749            {
   2750              zdoJoinCnf_t joinCnf;
   2751          
   2752              joinCnf.status = Status;
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   F0           MOVX    @DPTR,A
   2753              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000AF   90....       MOV     DPTR,#_NIB + 20
   \   0000B2   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2754              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_101:
   \   0000BD   90....       MOV     DPTR,#_NIB + 23
   \   0000C0   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   2755          
   2756              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_102:
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   AA..         MOV     R2,?XSP + 0
   \   0000CD   AB..         MOV     R3,?XSP + 1
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   12....       LCALL   ?CALL_IND
   2757            }
   2758          
   2759            // Notify ZDApp
   2760            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000D6                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   7B02         MOV     R3,#0x2
   \   0000DC   7A02         MOV     R2,#0x2
   \   0000DE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   2761          
   2762          }
   \   0000E6   7405         MOV     A,#0x5
   \   0000E8   02....       LJMP    ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2763          
   2764          /*********************************************************************
   2765           * @fn          ZDO_PermitJoinCB
   2766           *
   2767           * @brief      This function is called when there is a change in the
   2768           *             device's permit join status.
   2769           *
   2770           * @param       duration - the new duration
   2771           *
   2772           * @return      none
   2773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2774          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2775          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2776            // Pass the Permit Join status to higher layer if callback registered
   2777            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2778            {
   2779              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2780            }
   2781          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   02....       LJMP    ?Subroutine3 & 0xFFFF
   2782          
   2783          /*********************************************************************
   2784           * @fn          ZDO_AddrChangeIndicationCB
   2785           *
   2786           * @brief       This function notifies the application that this
   2787           *              device's address has changed.  Could happen in
   2788           *              a network with stochastic addressing (PRO).
   2789           *
   2790           * @param       newAddr - the new address
   2791           *
   2792           * @return      none
   2793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2794          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2795          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2796            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2797            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2798          
   2799            // Notify to save info into NV
   2800            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_62:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   2801          
   2802            // Notify the applications
   2803            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   \   00001E   8043         SJMP    ??CrossCallReturnLabel_63
   2804          
   2805            while (pItem != NULL)
   2806            {
   2807              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F9           MOV     R1,A
   \   000027   88..         MOV     ?V2,R0
   \   000029   89..         MOV     ?V3,R1
   \   00002B   8882         MOV     DPL,R0
   \   00002D   F583         MOV     DPH,A
   \   00002F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000032   6028         JZ      ??ZDO_AddrChangeIndicationCB_1
   2808              {
   2809                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A04         MOV     R2,#0x4
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   ??osal_msg_allocate?relay; Banked call to: osal_msg_allocate
   2810                if (pZDOAddrChangeMsg != NULL)
   \   00003B   EA           MOV     A,R2
   \   00003C   4B           ORL     A,R3
   \   00003D   601D         JZ      ??ZDO_AddrChangeIndicationCB_1
   2811                {
   2812                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   74D6         MOV     A,#-0x2a
   \   000045   F0           MOVX    @DPTR,A
   2813                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V1
   \   00004E   12....       LCALL   ?Subroutine16 & 0xFFFF
   2814                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2815                }
   2816              }
   \                     ??CrossCallReturnLabel_5:
   \   000051   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000054   A3           INC     DPTR
   \   000055   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_msg_send?relay; Banked call to: osal_msg_send
   2817              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2818            }
   \                     ??CrossCallReturnLabel_63:
   \   000063   EE           MOV     A,R6
   \   000064   4F           ORL     A,R7
   \   000065   70B9         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2819          
   2820            // Send out a device announce
   2821            ZDApp_AnnounceNewAddress();
   \   000067                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000067   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay; Banked call to: ZDApp_AnnounceNewAddress
   2822          }
   \   00006A   02....       LJMP    ?Subroutine1 & 0xFFFF
   2823          
   2824          /*********************************************************************
   2825           * @fn          ZDO_JoinIndicationCB
   2826           *
   2827           * @brief       This function allows the next higher layer of a
   2828           *              coordinator to be notified of a remote join request.
   2829           *
   2830           * @param       ShortAddress - 16-bit address
   2831           * @param       ExtendedAddress - IEEE (64-bit) address
   2832           * @param       CapabilityFlags - Association Capability Flags
   2833           * @param       type - of joining -
   2834           *                          NWK_ASSOC_JOIN
   2835           *                          NWK_ASSOC_REJOIN_UNSECURE
   2836           *                          NWK_ASSOC_REJOIN_SECURE
   2837           *
   2838           * @return      ZStatus_t
   2839           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2840          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2841                                          uint8 CapabilityFlags, uint8 type)
   2842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2843            (void)ExtendedAddress;
   2844            //check if the device is leaving before responding to rejoin request
   2845            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6005         JZ      ??ZDO_JoinIndicationCB_0
   2846            {
   2847              return ZFailure; // device leaving , hence do not allow rejoin
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2848            }
   2849          
   2850          #if ZDO_NV_SAVE_RFDs
   2851              (void)CapabilityFlags;
   2852          
   2853          #else  // if !ZDO_NV_SAVE_RFDs
   2854              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2855          #endif
   2856              {
   2857                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   \   000023   7410         MOV     A,#0x10
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   2858              }
   2859          
   2860              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2861              {
   2862                if ( type == NWK_ASSOC_JOIN ||
   2863                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   2864                      type == NWK_ASSOC_REJOIN_SECURE )
   \   00002A   600D         JZ      ??ZDO_JoinIndicationCB_2
   \   00002C   7401         MOV     A,#0x1
   \   00002E   68           XRL     A,R0
   \   00002F   6008         JZ      ??ZDO_JoinIndicationCB_2
   \   000031   7402         MOV     A,#0x2
   \   000033   68           XRL     A,R0
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2865                {
   2866                  uint16 timeToFire;
   2867                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2868          
   2869                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   7A06         MOV     R2,#0x6
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000040   8A..         MOV     ?V2,R2
   \   000042   8B..         MOV     ?V3,R3
   \   000044   AE..         MOV     R6,?V2
   \   000046   AF..         MOV     R7,?V3
   2870          
   2871                  if ( pNewDevice == NULL )
   \   000048   EE           MOV     A,R6
   \   000049   4F           ORL     A,R7
   \   00004A   7005         JNZ     ??ZDO_JoinIndicationCB_4
   2872                  {
   2873                    // Memory alloc failed
   2874                    return ZMemError;
   \   00004C   7910         MOV     R1,#0x10
   \   00004E   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2875                  }
   2876          
   2877                  // Add the new device to the New Device List
   2878                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000051   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000054   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000057   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005A   7006         JNZ     ??ZDO_JoinIndicationCB_5
   2879                  {
   2880                    // The list is empty, add the first element
   2881                    ZDApp_NewDeviceList = pNewDevice;
   \   00005C   EE           MOV     A,R6
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   EF           MOV     A,R7
   \   000060   801F         SJMP    ??ZDO_JoinIndicationCB_6
   2882                  }
   2883                  else
   2884                  {
   2885                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   8003         SJMP    ??ZDO_JoinIndicationCB_7
   2886          
   2887                    // Walk the list to last element
   2888                    while ( pDeviceList->next )
   2889                    {
   2890                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000068   E8           MOV     A,R0
   \   000069   FA           MOV     R2,A
   \   00006A   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   00006B   FB           MOV     R3,A
   2891                    }
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000073   70F3         JNZ     ??ZDO_JoinIndicationCB_8
   2892          
   2893                    // Add new device at the end
   2894                    pDeviceList->next = pNewDevice;
   \   000075   EE           MOV     A,R6
   \   000076   F8           MOV     R0,A
   \   000077   EF           MOV     A,R7
   \   000078   F9           MOV     R1,A
   \   000079   8A82         MOV     DPL,R2
   \   00007B   8B83         MOV     DPH,R3
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000081   F0           MOVX    @DPTR,A
   2895                  }
   2896          
   2897                  // get the remaining time of the timer
   2898                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000082                ; Setup parameters for call to function osal_get_timeoutEx
   \   000082   7A40         MOV     R2,#0x40
   \   000084   7B00         MOV     R3,#0x0
   \   000086   90....       MOV     DPTR,#ZDAppTaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   00008E   8A..         MOV     ?V4,R2
   \   000090   8B..         MOV     ?V5,R3
   2899          
   2900                  pNewDevice->next = NULL;
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   E4           CLR     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   F0           MOVX    @DPTR,A
   2901                  pNewDevice->shortAddr = ShortAddress;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E5..         MOV     A,?V1
   \   0000A6   F0           MOVX    @DPTR,A
   2902                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000A7   7458         MOV     A,#0x58
   \   0000A9   C3           CLR     C
   \   0000AA   95..         SUBB    A,?V4
   \   0000AC   F8           MOV     R0,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   95..         SUBB    A,?V5
   \   0000B1   F9           MOV     R1,A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   12....       LCALL   ?Subroutine13 & 0xFFFF
   2903          
   2904                  // Start the timer only if there is no pending timer
   2905                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_56:
   \   0000B9   7458         MOV     A,#0x58
   \   0000BB   68           XRL     A,R0
   \   0000BC   7003         JNZ     ??ZDO_JoinIndicationCB_9
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000C1   7017         JNZ     ??ZDO_JoinIndicationCB_3
   2906                  {
   2907                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000C3                ; Setup parameters for call to function osal_start_timerEx
   \   0000C3   90....       MOV     DPTR,#__Constant_258
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000C9   7A40         MOV     R2,#0x40
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000D5   7404         MOV     A,#0x4
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   2908                  }
   2909                }
   2910              }
   2911          
   2912              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000DA   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000DC                REQUIRE ?Subroutine2
   \   0000DC                ; // Fall through to label ?Subroutine2
   2913          
   2914          }
   2915          
   2916          /*********************************************************************
   2917           * @fn          ZDO_ConcentratorIndicationCB
   2918           *
   2919           * @brief       This function allows the next higher layer of a
   2920           *              device to be notified of existence of the concentrator.
   2921           *
   2922           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2923           * @param       extAddr - pointer to extended Address
   2924           *                        NULL if not available
   2925           * @param       pktCost - PktCost from RREQ
   2926           *
   2927           * @return      void
   2928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2929          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2930          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2931            zdoConcentratorInd_t conInd;
   2932          
   2933            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2934            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_105:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2935            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2936          
   2937            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   2938            {
   2939              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   2940            }
   2941          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D                REQUIRE ?Subroutine7
   \   00002D                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine52_0
   \   000006                ; // Fall through to label ??Subroutine52_0
   2942          
   2943          /*********************************************************************
   2944           * @fn          ZDO_LeaveCnf
   2945           *
   2946           * @brief       This function allows the next higher layer to be
   2947           *              notified of the results of its request for this or
   2948           *              a child device to leave the network.
   2949           *
   2950           * @param       cnf - NLME_LeaveCnf_t
   2951           *
   2952           * @return      none
   2953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2954          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2956            // Check for this device
   2957            if ( osal_ExtAddrEqual( cnf->extAddr,
   2958                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000017   12....       LCALL   ??sAddrExtCmp?relay  ; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   701C         JNZ     ??ZDO_LeaveCnf_0
   2959            {
   2960              // Pass the leave confirm to higher layer if callback registered
   2961              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2962                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000025   600E         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ?CALL_IND
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V1
   \   000033   7006         JNZ     ??ZDO_LeaveCnf_0
   2963              {
   2964                // Prepare to leave with reset
   2965                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000035                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000035   12....       LCALL   ?Subroutine29 & 0xFFFF
   2966              }
   2967            }
   \                     ??CrossCallReturnLabel_28:
   \   000038   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   2968            else if ( ZSTACK_ROUTER_BUILD )
   2969            {
   2970              // Remove device address(optionally descendents) from data
   2971              ZDApp_LeaveUpdate( cnf->dstAddr,
   2972                                 cnf->extAddr,
   2973                                 cnf->removeChildren );
   2974            }
   2975          }
   \                     ??ZDO_LeaveCnf_0:
   \   00003B   02....       LJMP    ??Subroutine51_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   2976          
   2977          /*********************************************************************
   2978           * @fn          ZDO_LeaveInd
   2979           *
   2980           * @brief       This function allows the next higher layer of a
   2981           *              device to be notified of a remote leave request or
   2982           *              indication.
   2983           *
   2984           * @param       ind - NLME_LeaveInd_t
   2985           *
   2986           * @return      none
   2987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2988          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2989          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2990            uint8 leave;
   2991          
   2992          
   2993            // Parent is requesting the leave - NWK layer filters out illegal
   2994            // requests
   2995            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7034         JNZ     ??ZDO_LeaveInd_0
   2996            {
   2997              // Only respond if we are not rejoining the network
   2998              if ( ind->rejoin == FALSE )
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   7022         JNZ     ??ZDO_LeaveInd_1
   2999              {
   3000                // Notify network of leave
   3001                NLME_LeaveRsp_t rsp;
   3002                rsp.rejoin = ind->rejoin;
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   3003          
   3004                if ( ZSTACK_ROUTER_BUILD )
   3005                {
   3006                  rsp.removeChildren = ind->removeChildren;
   3007                }
   3008                else if ( ZSTACK_END_DEVICE_BUILD )
   3009                {
   3010                  NLME_SetResponseRate(0);
   \   00003A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00003A   FA           MOV     R2,A
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   ??NLME_SetResponseRate?relay; Banked call to: NLME_SetResponseRate
   3011                  NLME_SetQueuedPollRate(0);
   \   00003F                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ??NLME_SetQueuedPollRate?relay; Banked call to: NLME_SetQueuedPollRate
   3012                  rsp.removeChildren = 0;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   3013                }
   3014          
   3015                NLME_LeaveRsp( &rsp );
   \   00004E                ; Setup parameters for call to function NLME_LeaveRsp
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   ??NLME_LeaveRsp?relay; Banked call to: NLME_LeaveRsp
   3016              }
   3017          
   3018              if ( ZSTACK_END_DEVICE_BUILD )
   3019              {
   3020                // Stop polling and get ready to reset
   3021                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   000055                ; Setup parameters for call to function NLME_SetPollRate
   \   000055   90....       MOV     DPTR,#__Constant_0
   \   000058   12....       LCALL   ?XLOAD_R2345
   \   00005B   12....       LCALL   ??NLME_SetPollRate?relay; Banked call to: NLME_SetPollRate
   3022              }
   3023          
   3024              // Prepare to leave with reset
   3025              ZDApp_LeaveReset( ind->rejoin );
   \   00005E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00005E   8033         SJMP    ??ZDO_LeaveInd_2
   3026            }
   3027            else
   3028            {
   3029              leave = FALSE;
   3030          
   3031              // Check if this device needs to leave as a child or descendent
   3032              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000060                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000060   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   000063   8A..         MOV     ?V2,R2
   \   000065   8B..         MOV     ?V3,R3
   \   000067   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000071   E5..         MOV     A,?V2
   \   000073   6A           XRL     A,R2
   \   000074   7003         JNZ     ??ZDO_LeaveInd_3
   \   000076   E5..         MOV     A,?V3
   \   000078   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000079   7025         JNZ     ??ZDO_LeaveInd_4
   3033              {
   3034                if ( ( ind->removeChildren == TRUE )   )
   \   00007B   7401         MOV     A,#0x1
   \   00007D   69           XRL     A,R1
   \   00007E   6013         JZ      ??ZDO_LeaveInd_2
   3035                {
   3036                  leave = TRUE;
   3037                }
   3038                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000080   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000083   E0           MOVX    A,@DPTR
   \   000084   5407         ANL     A,#0x7
   \   000086   6402         XRL     A,#0x2
   \   000088   7016         JNZ     ??ZDO_LeaveInd_4
   3039                {
   3040                  // old parents is leaving the network, child needs to search for a new parent
   3041                  ind->rejoin = TRUE;
   \   00008A   85..82       MOV     DPL,?V0
   \   00008D   85..83       MOV     DPH,?V1
   \   000090   7401         MOV     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   3042                  leave = TRUE;
   3043                }
   3044          
   3045              }
   3046              else if ( ind->removeChildren == TRUE )
   3047              {
   3048                // Check NWK address allocation algorithm
   3049                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3050              }
   3051          
   3052              if ( leave == TRUE )
   3053              {
   3054                // Prepare to leave with reset
   3055                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   000093                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000093   85..82       MOV     DPL,?V0
   \   000096   85..83       MOV     DPH,?V1
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   ??ZDApp_LeaveReset?relay; Banked call to: ZDApp_LeaveReset
   \   00009E   800A         SJMP    ??ZDO_LeaveInd_5
   3056              }
   3057              else
   3058              {
   3059                // Remove device address(optionally descendents) from data
   3060                ZDApp_LeaveUpdate( ind->srcAddr,
   3061                                   ind->extAddr,
   3062                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   0000A0                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000A0   EE           MOV     A,R6
   \   0000A1   2402         ADD     A,#0x2
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   FD           MOV     R5,A
   \   0000A7   12....       LCALL   ??ZDApp_LeaveUpdate?relay; Banked call to: ZDApp_LeaveUpdate
   3063              }
   3064            }
   3065          
   3066            // Pass the leave indication to higher layer if callback registered.
   3067            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_5:
   \   0000AA   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000AD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000B0   6007         JZ      ??ZDO_LeaveInd_6
   3068            {
   3069              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000B2                ; Setup parameters for indirect call
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   ?CALL_IND
   3070            }
   3071          }
   \                     ??ZDO_LeaveInd_6:
   \   0000B9   02....       LJMP    ?Subroutine5 & 0xFFFF
   3072          
   3073          /*********************************************************************
   3074           * @fn          ZDO_SyncIndicationCB
   3075           *
   3076           * @brief       This function allows the next higher layer of a
   3077           *              coordinator to be notified of a loss of synchronization
   3078           *                          with the parent/child device.
   3079           *
   3080           * @param       type: 0 - child; 1 - parent
   3081           *
   3082           *
   3083           * @return      none
   3084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3085          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3087            (void)shortAddr;  // Remove this line if this parameter is used.
   3088          
   3089            if ( ZSTACK_END_DEVICE_BUILD
   3090              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3091            {
   3092              if ( type == 1 && retryCnt == 0 )
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7036         JNZ     ??ZDO_SyncIndicationCB_0
   \   00000C   90....       MOV     DPTR,#retryCnt
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7030         JNZ     ??ZDO_SyncIndicationCB_0
   3093              {
   3094                // We lost contact with our parent.  Clear the neighbor Table.
   3095                nwkNeighborInitTable();
   \   000012                ; Setup parameters for call to function nwkNeighborInitTable
   \   000012   12....       LCALL   ??nwkNeighborInitTable?relay; Banked call to: nwkNeighborInitTable
   3096          
   3097                runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   000015   75..01       MOV     ?V0,#0x1
   \   000018   75..00       MOV     ?V1,#0x0
   \   00001B   75..00       MOV     ?V2,#0x0
   \   00001E   75..00       MOV     ?V3,#0x0
   \   000021   90....       MOV     DPTR,#_NIB + 22
   \   000024   E0           MOVX    A,@DPTR
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?L_SHL
   \   00002A   90....       MOV     DPTR,#runtimeChannel
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?L_MOV_TO_X
   3098          
   3099                // Start the rejoin process.
   3100                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000032                ; Setup parameters for call to function ZDApp_SendMsg
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7B02         MOV     R3,#0x2
   \   000038   7A03         MOV     R2,#0x3
   \   00003A   90....       MOV     DPTR,#ZDAppTaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??ZDApp_SendMsg?relay; Banked call to: ZDApp_SendMsg
   3101              }
   3102            }
   3103          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000042   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3104          
   3105          /*********************************************************************
   3106           * @fn          ZDO_ManytoOneFailureIndicationCB
   3107           *
   3108           * @brief       This function allows the next higher layer of a
   3109           *              concentrator to be notified of a many-to-one route
   3110           *              failure.
   3111           *
   3112           * @param       none
   3113           *
   3114           *
   3115           * @return      none
   3116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3117          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3119            // By default, the concentrator automatically redo many-to-one route
   3120            // discovery to update all many-to-one routes in the network
   3121            // If you want anything processing other than the default,
   3122            // please replace the following code.
   3123          
   3124            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay; Banked call to: RTG_MTORouteReq
   3125          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3126          
   3127          /*********************************************************************
   3128           * @fn          ZDO_PollConfirmCB
   3129           *
   3130           * @brief       This function allows the next higher layer to be
   3131           *              notified of a Poll Confirm.
   3132           *
   3133           * @param       none
   3134           *
   3135           * @return      none
   3136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3137          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3138          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3139            (void)status;  // Remove this line if this parameter is used.
   3140            return;
   \   000000   02....       LJMP    ?BRET
   3141          }
   3142          
   3143          /*********************************************************************
   3144           * @fn          ZDO_NetworkStatusCB
   3145           *
   3146           * @brief       Network Status Callback function
   3147           *
   3148           * @param       nwkDstAddr - message's destination address- used to determine
   3149           *                           if the message was intended for this device or
   3150           *                           a sleeping end device.
   3151           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3152           * @param       dstAddr - the destination address related to the status code
   3153           *
   3154           * @return      none
   3155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3156          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3157          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3158            (void)dstAddr;     // Remove this line if this parameter is used.
   3159          
   3160            if ( (nwkDstAddr == NLME_GetShortAddr())
   3161                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   3162            {
   3163              // Routing error for dstAddr, this is informational and a Route
   3164              // Request should happen automatically.
   3165            }
   3166          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3167          
   3168          /******************************************************************************
   3169           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3170           *
   3171           * @brief       Stub routine implemented by NHLE. NHLE should call
   3172           *              <AddrMgrWriteNV> when appropriate.
   3173           *
   3174           * @param       none
   3175           *
   3176           * @return      none
   3177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3178          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3179          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3180          #if defined ( NV_RESTORE )
   3181            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3182            {
   3183              // Trigger to save info into NV
   3184              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   3185            }
   3186          #endif
   3187          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3188          
   3189          /*********************************************************************
   3190           * Call Back Functions from Security  - API
   3191           */
   3192          
   3193           /*********************************************************************
   3194           * @fn          ZDO_UpdateDeviceIndication
   3195           *
   3196           * @brief       This function notifies the "Trust Center" of a
   3197           *              network when a device joins or leaves the network.
   3198           *
   3199           * @param       extAddr - pointer to 64 bit address of new device
   3200           * @param       status  - 0 if a new device joined securely
   3201           *                      - 1 if a new device joined un-securely
   3202           *                      - 2 if a device left the network
   3203           *
   3204           * @return      true if newly joined device should be allowed to
   3205           *                                              remain on network
   3206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3207          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3208          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3209            // can implement a network access policy based on the
   3210            // IEEE address of newly joining devices...
   3211            (void)extAddr;
   3212            (void)status;
   3213          
   3214            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3215          }
   3216          
   3217          /*********************************************************************
   3218           * @fn          ZDApp_InMsgCB
   3219           *
   3220           * @brief       This function is called to pass up any message that is
   3221           *              not yet supported.  This allows for the developer to
   3222           *              support features themselves..
   3223           *
   3224           * @return      none
   3225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3226          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3227          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3228            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000015   5480         ANL     A,#0x80
   \   000017   703B         JNZ     ??ZDApp_InMsgCB_0
   3229            {
   3230              // Handle the response message
   3231            }
   3232            else
   3233            {
   3234              // Handle the request message by sending a generic "not supported".
   3235              // Device Announce doesn't have a response.
   3236              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001C   7036         JNZ     ??ZDApp_InMsgCB_0
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000024   602E         JZ      ??ZDApp_InMsgCB_0
   3237              {
   3238                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3239                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E9           MOV     A,R1
   \   00002A   4480         ORL     A,#0x80
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   E4           CLR     A
   \   000034   F5..         MOV     ?V0,A
   \   000036   F5..         MOV     ?V1,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   12....       LCALL   ?Subroutine32 & 0xFFFF
   3240              }
   3241            }
   \                     ??CrossCallReturnLabel_36:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   7C84         MOV     R4,#-0x7c
   \   000044   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000047   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??ZDP_GenericRsp?relay; Banked call to: ZDP_GenericRsp
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   3242          }
   \                     ??ZDApp_InMsgCB_0:
   \   000054   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3243          
   3244          
   3245          /*********************************************************************
   3246           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3247           *
   3248           * @brief   Changes the Match Descriptor Response permission.
   3249           *
   3250           * @param   endpoint - endpoint to allow responses
   3251           * @param   action - true to allow responses, false to not
   3252           *
   3253           * @return  none
   3254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3255          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3256          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3257            // Store the action
   3258            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay   ; Banked call to: afSetMatch
   3259          }
   \   000008   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3260          
   3261          /*********************************************************************
   3262           * @fn      ZDApp_NetworkInit()
   3263           *
   3264           * @brief   Used to start the network joining process
   3265           *
   3266           * @param   delay - mSec delay to wait before starting
   3267           *
   3268           * @return  none
   3269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3270          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3272            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3273            {
   3274              // Wait awhile before starting the device
   3275              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3276            }
   3277            else
   3278            {
   3279              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   3280            }
   3281          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine54_0 & 0xFFFF
   3282          
   3283          /*********************************************************************
   3284           * @fn      ZDApp_NwkStateUpdateCB()
   3285           *
   3286           * @brief   This function notifies that this device's network
   3287           *          state info has been changed.
   3288           *
   3289           * @param   none
   3290           *
   3291           * @return  none
   3292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3293          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3294          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3295            // Notify to save info into NV
   3296            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3297            {
   3298              // Trigger to save info into NV
   3299              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   3300            }
   3301          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3302          
   3303          /*********************************************************************
   3304           * @fn      ZDApp_NodeProfileSync()
   3305           *
   3306           * @brief   Sync node with stack profile.
   3307           *
   3308           * @param   stackProfile - stack profile of the network to join
   3309           *
   3310           * @return  none
   3311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3312          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3313          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3314            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   3315            {
   3316              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   3317              {
   3318                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   3319                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   3320                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay; Banked call to: NLME_SetBroadcastFilter
   3321              }
   3322            }
   3323          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3324          
   3325          /*********************************************************************
   3326           * @fn      ZDApp_StartJoiningCycle()
   3327           *
   3328           * @brief   Starts the joining cycle of a device.  This will only
   3329           *          continue an already started (or stopped) joining cycle.
   3330           *
   3331           * @param   none
   3332           *
   3333           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3336          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3337            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3338            {
   3339              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3340              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay; Banked call to: ZDApp_NetworkInit
   3341          
   3342              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3343            }
   3344            else
   3345              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3346          }
   3347          
   3348          /*********************************************************************
   3349           * @fn      ZDApp_StopJoiningCycle()
   3350           *
   3351           * @brief   Stops the joining or rejoining process of a device.
   3352           *
   3353           * @param   none
   3354           *
   3355           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3357          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3358          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3359            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600A         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   640C         XRL     A,#0xc
   \   000014   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3360            {
   3361              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV     DPTR,#continueJoining
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   3362              return ( TRUE );
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3363            }
   3364            else
   3365              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3366          }
   3367          
   3368          /*********************************************************************
   3369           * @fn      ZDApp_AnnounceNewAddress()
   3370           *
   3371           * @brief   Send Device Announce and hold all transmissions for
   3372           *          new address timeout.
   3373           *
   3374           * @param   none
   3375           *
   3376           * @return  none
   3377           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3378          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3379          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3380          #if defined ( ZIGBEEPRO )
   3381            // Turn off data request hold
   3382            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   3383          #endif
   3384          
   3385            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3386                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   ??NLME_GetExtAddr?relay; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   AE..         MOV     R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL   ??NLME_GetShortAddr?relay; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV     ?V0,#0x0
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EE           MOV     A,R6
   \   00002B   FC           MOV     R4,A
   \   00002C   AD..         MOV     R5,?V1
   \   00002E   12....       LCALL   ??ZDP_DeviceAnnce?relay; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   3387          
   3388          #if defined ( ZIGBEEPRO )
   3389            // Setup the timeout
   3390            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV     R2,#0x0
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??APSME_HoldDataRequests?relay; Banked call to: APSME_HoldDataRequests
   3391          #endif
   3392          
   3393            if ( ZSTACK_END_DEVICE_BUILD )
   3394            {
   3395              if ( zgChildAgingEnable == TRUE )
   \   00003D   90....       MOV     DPTR,#zgChildAgingEnable
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6401         XRL     A,#0x1
   \   000043   7027         JNZ     ??ZDApp_AnnounceNewAddress_0
   3396              {
   3397                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3398          
   3399                // Send the message to parent
   3400                NLME_GetCoordExtAddr( coordExtAddr );
   \   000045                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   ??NLME_GetCoordExtAddr?relay; Banked call to: NLME_GetCoordExtAddr
   3401                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3402                                           zgEndDeviceTimeoutValue,
   3403                                           zgEndDeviceConfiguration );
   \   00004C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004C   12....       LCALL   ??NLME_GetCoordShortAddr?relay; Banked call to: NLME_GetCoordShortAddr
   \   00004F                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   00004F   90....       MOV     DPTR,#zgEndDeviceConfiguration
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V0,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#zgEndDeviceTimeoutValue
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?XSTACK_DISP102_8
   \   000064   12....       LCALL   ??NLME_SendEndDevTimeoutReq?relay; Banked call to: NLME_SendEndDevTimeoutReq
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   3404              }
   3405            }
   3406          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   00006C   7408         MOV     A,#0x8
   \   00006E   80..         SJMP    ??Subroutine50_0
   3407          
   3408          /*********************************************************************
   3409           * @fn      ZDApp_SendParentAnnce()
   3410           *
   3411           * @brief   Send Parent Announce message.
   3412           *
   3413           * @param   none
   3414           *
   3415           * @return  none
   3416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3417          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3419            uint8 count;
   3420            uint8 *childInfo;
   3421          
   3422            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   ??AssocMakeListOfRfdChild?relay; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   3423          
   3424            if ( childInfo != NULL )
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V1
   \   000018   6054         JZ      ??ZDApp_SendParentAnnce_0
   3425            {
   3426              if ( count > 0 )
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6044         JZ      ??ZDApp_SendParentAnnce_1
   3427              {
   3428                zAddrType_t dstAddr;
   3429          
   3430                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   7409         MOV     A,#0x9
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   F0           MOVX    @DPTR,A
   3431                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   74FC         MOV     A,#-0x4
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   F0           MOVX    @DPTR,A
   3432          
   3433                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000037                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000037   75..00       MOV     ?V2,#0x0
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..1F       MOV     ?V2,#0x1f
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7405         MOV     A,#0x5
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP102_8
   \   00005B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00005D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00005F   12....       LCALL   ??ZDP_ParentAnnce?relay; Banked call to: ZDP_ParentAnnce
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   3434              }
   3435          
   3436              // Free the list after the message has been sent
   3437              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   3438            }
   3439          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006E   740A         MOV     A,#0xa
   \   000070   02....       LJMP    ??Subroutine53_0 & 0xFFFF
   3440          
   3441          /*********************************************************************
   3442           * @fn          ZDApp_NVUpdate
   3443           *
   3444           * @brief       Set the NV Update Timer.
   3445           *
   3446           * @param       none
   3447           *
   3448           * @return      none
   3449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3450          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3451          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3452          #if defined ( NV_RESTORE )
   3453            if ( (ZSTACK_END_DEVICE_BUILD)
   3454                 || (ZSTACK_ROUTER_BUILD
   3455                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3456            {
   3457              // No need to wait, set the event to save the state
   3458              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   3459            }
   3460            else
   3461            {
   3462              // To allow for more changes to the network state before saving
   3463              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3464            }
   3465          #endif
   3466          }
   \   000010   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3467          
   3468          /*********************************************************************
   3469           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3470           *
   3471           * @brief   Returns a PAN ID for the network layer to use during
   3472           *          a coordinator start and there is another network with
   3473           *          the intended PANID.
   3474           *
   3475           * @param   panid - the intended PAN ID
   3476           *
   3477           * @return  PANID to try
   3478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3479          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3480          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3481            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3482          }
   3483          
   3484          /*********************************************************************
   3485           * @fn          ZDO_SrcRtgIndCB
   3486           *
   3487           * @brief       This function notifies the ZDO available src route record received.
   3488           *
   3489           * @param       srcAddr - source address of the source route
   3490           * @param       relayCnt - number of devices in the relay list
   3491           * @param       relayList - relay list of the source route
   3492           *
   3493           * @return      none
   3494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3495          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3497            zdoSrcRtg_t srcRtg;
   3498          
   3499            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   3500            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_106:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3501            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3502          
   3503            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3504            {
   3505              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   3506            }
   \                     ??CrossCallReturnLabel_57:
   \   00002D   12....       LCALL   ?CALL_IND
   3507          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP    ?Subroutine7 & 0xFFFF
   3508          
   3509          /*********************************************************************
   3510           * @fn          ZDApp_InitZdoCBFunc
   3511           *
   3512           * @brief       Call this function to initialize zdoCBFunc[]
   3513           *
   3514           * @param       none
   3515           *
   3516           * @return      none
   3517           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3518          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3519          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3520            uint8 i;
   3521          
   3522            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3523            {
   3524              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine27 & 0xFFFF
   3525            }
   \                     ??CrossCallReturnLabel_23:
   \   00000C   0A           INC     R2
   \   00000D   EA           MOV     A,R2
   \   00000E   C3           CLR     C
   \   00000F   9409         SUBB    A,#0x9
   \   000011   40F3         JC      ??ZDApp_InitZdoCBFunc_0
   3526          }
   \   000013   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3527          
   3528          /*********************************************************************
   3529           * @fn          ZDO_RegisterForZdoCB
   3530           *
   3531           * @brief       Call this function to register the higher layer (for
   3532           *              example, the Application layer or MT layer) with ZDO
   3533           *              callbacks to get notified of some ZDO indication like
   3534           *              existence of a concentrator or receipt of a source
   3535           *              route record.
   3536           *
   3537           * @param       indID - ZDO Indication ID
   3538           * @param       pFn   - Callback function pointer
   3539           *
   3540           * @return      ZSuccess - successful, ZInvalidParameter if not
   3541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3542          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3543          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3544            // Check the range of the indication ID
   3545            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500C         JNC     ??ZDO_RegisterForZdoCB_0
   3546            {
   3547              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000010   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   3548              return ZSuccess;
   \                     ??CrossCallReturnLabel_103:
   \   000013   7900         MOV     R1,#0x0
   \   000015   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3549            }
   3550          
   3551            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000017   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3552          }
   3553          
   3554          /*********************************************************************
   3555           * @fn          ZDO_DeregisterForZdoCB
   3556           *
   3557           * @brief       Call this function to de-register the higher layer (for
   3558           *              example, the Application layer or MT layer) with ZDO
   3559           *              callbacks to get notified of some ZDO indication like
   3560           *              existence of a concentrator or receipt of a source
   3561           *              route record.
   3562           *
   3563           * @param       indID - ZDO Indication ID
   3564           *
   3565           * @return      ZSuccess - successful, ZInvalidParameter if not
   3566           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3567          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3568          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3569            // Check the range of the indication ID
   3570            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   5008         JNC     ??ZDO_DeregisterForZdoCB_0
   3571            {
   3572              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine27 & 0xFFFF
   3573              return ZSuccess;
   \                     ??CrossCallReturnLabel_24:
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3574            }
   3575          
   3576            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000013   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000015   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3577          }
   3578          
   3579          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3580          #if defined ( REFLECTOR )
   3581          /*********************************************************************
   3582           * @fn          ZDApp_SetPendingBindDefault
   3583           *
   3584           * @brief       This function initializes a specific entry of pending
   3585           *              Bind Request.
   3586           *
   3587           * @param       pendBindReq - pointer to the entry in the table
   3588           *
   3589           * @return      none
   3590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3591          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3592          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3593            // Set it to an initial value
   3594            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   3595          
   3596            // We are checking for age 0 for aged-out records
   3597            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3598          }
   \   00001D   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3599          
   3600          /*********************************************************************
   3601           * @fn          ZDApp_InitPendingBind
   3602           *
   3603           * @brief       This function initializes the buffer that holds
   3604           *              pending Bind Request messages if no valid NWK address
   3605           *              exists in Address Manager and a Network Address Req
   3606           *              has been sent out.
   3607           *
   3608           * @param       none
   3609           *
   3610           * @return      none
   3611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3612          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3614            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3615            {
   3616              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??osal_mem_alloc?relay; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000017   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3617              {
   3618                uint8 i;
   3619          
   3620                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3621                {
   3622                  // Set to default values
   3623                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   3624                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3625              }
   3626            }
   3627          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3628          
   3629          /*********************************************************************
   3630           * @fn          ZDApp_GetEmptyPendingBindReq
   3631           *
   3632           * @brief       This function looks for an empty entry.
   3633           *
   3634           * @param       none
   3635           *
   3636           * @return      Pointer to entry
   3637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3638          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3639          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3640            uint8 i;
   3641          
   3642            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000007   6027         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3643            {
   3644              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV     R4,#0x0
   3645              {
   3646                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   A9F0         MOV     R1,B
   \   000013   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX    A,@DPTR
   \   000017   28           ADD     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   39           ADDC    A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2420         ADD     A,#0x20
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   3B           ADDC    A,R3
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   600B         JZ      ??ZDApp_GetEmptyPendingBindReq_2
   3647                {
   3648                  return ( &ZDAppPendingBindReq[i] );
   3649                }
   3650              }
   \   000029   0C           INC     R4
   \   00002A   EC           MOV     A,R4
   \   00002B   C3           CLR     C
   \   00002C   9403         SUBB    A,#0x3
   \   00002E   40DB         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3651            }
   3652          
   3653            // No empty entry was found
   3654            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000034   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3655          }
   3656          
   3657          /*********************************************************************
   3658           * @fn          ZDApp_ProcessPendingBindReq
   3659           *
   3660           * @brief       Process pending entry based on EXT address.
   3661           *
   3662           * @param       extAddr - of device to look up
   3663           *
   3664           * @return      none
   3665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3666          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3668            uint8 i;
   3669          
   3670            // Loop through all the pending entries for that Ext Address
   3671            // to create Bind Entries and send Bind Rsp
   3672            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3673            {
   3674              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3675              {
   3676                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3677                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV     A,?V0
   \   00001B   75F021       MOV     B,#0x21
   \   00001E   A4           MUL     AB
   \   00001F   FE           MOV     R6,A
   \   000020   AFF0         MOV     R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV     ?V4,?V2
   \   000025   85....       MOV     ?V5,?V3
   \   000028   75..00       MOV     ?V6,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000037   240B         ADD     A,#0xb
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   A9..         MOV     R1,?V4
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3678                {
   3679                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   748C         MOV     A,#-0x74
   \   00005A   F0           MOVX    @DPTR,A
   3680          
   3681                  // Add Bind entry
   3682                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3683                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3684                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3685                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005B   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   2E           ADD     A,R6
   \   000060   F5..         MOV     ?V4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   3F           ADDC    A,R7
   \   000065   F5..         MOV     ?V5,A
   \   000067                ; Setup parameters for call to function APSME_BindRequest
   \   000067   E5..         MOV     A,?V4
   \   000069   2414         ADD     A,#0x14
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V1,A
   \   000075   78..         MOV     R0,#?V1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV     A,?V4
   \   00007C   240B         ADD     A,#0xb
   \   00007E   FC           MOV     R4,A
   \   00007F   E4           CLR     A
   \   000080   35..         ADDC    A,?V5
   \   000082   FD           MOV     R5,A
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000094   85..82       MOV     DPL,?V4
   \   000097   85..83       MOV     DPH,?V5
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   12....       LCALL   ??APSME_BindRequest?relay; Banked call to: APSME_BindRequest
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV     A,R1
   \   0000AD   700B         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3686                  {
   3687                    // valid entry
   3688                    bindStat = ZDP_SUCCESS;
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   E4           CLR     A
   \   0000B6   F0           MOVX    @DPTR,A
   3689          
   3690                    // Notify to save info into NV
   3691                    ZDApp_NVUpdate();
   \   0000B7                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B7   12....       LCALL   ??ZDApp_NVUpdate?relay; Banked call to: ZDApp_NVUpdate
   3692                  }
   3693          
   3694                  // Send back a response message
   3695                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3696                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000BA   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000BD   F5..         MOV     ?V1,A
   \   0000BF   78..         MOV     R0,#?V1
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C9   88..         MOV     ?V4,R0
   \   0000CB   89..         MOV     ?V5,R1
   \   0000CD   78..         MOV     R0,#?V4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   75..21       MOV     ?V4,#0x21
   \   0000D5   75..80       MOV     ?V5,#-0x80
   \   0000D8   78..         MOV     R0,#?V4
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000E0   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000E2   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000E3   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000E6   7405         MOV     A,#0x5
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   3697          
   3698                  // Set the pending request entry to default values
   3699                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000EB                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000EB   12....       LCALL   ?Subroutine34 & 0xFFFF
   3700                }
   3701              }
   \                     ??CrossCallReturnLabel_39:
   \   0000EE   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000F1   05..         INC     ?V0
   \   0000F3   E5..         MOV     A,?V0
   \   0000F5   C3           CLR     C
   \   0000F6   9403         SUBB    A,#0x3
   \   0000F8   5003         JNC     $+5
   \   0000FA   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3702            }
   3703          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003   EA           MOV     A,R2
   \   000004   241E         ADD     A,#0x1e
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3B           ADDC    A,R3
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   3704          
   3705          /*********************************************************************
   3706           * @fn          ZDApp_AgeOutPendingBindEntry
   3707           *
   3708           * @brief       Age out pending Bind Req entries.
   3709           *
   3710           * @param       none
   3711           *
   3712           * @return      none
   3713           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3714          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3715          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3716            uint8 i;
   3717            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3718          
   3719            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3720            {
   3721              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3722              {
   3723                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   FE           MOV     R6,A
   \   00001F   AFF0         MOV     R7,B
   \   000021   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000024   2420         ADD     A,#0x20
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   C3           CLR     C
   \   00002F   9402         SUBB    A,#0x2
   \   000031   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3724                {
   3725                  ZDAppPendingBindReq[i].age--;
   \   000033   E0           MOVX    A,@DPTR
   \   000034   14           DEC     A
   \   000035   F0           MOVX    @DPTR,A
   3726          
   3727                  entryFound = TRUE;
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3728                }
   3729                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   6A           XRL     A,R2
   \   00003F   707F         JNZ     ??ZDApp_AgeOutPendingBindEntry_3
   3730                {
   3731                  // The record has aged out and has valid data
   3732                  AddrMgrEntry_t entry;
   3733                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   748C         MOV     A,#-0x74
   \   000049   F0           MOVX    @DPTR,A
   3734          
   3735                  entry.user = ADDRMGR_USER_BINDING;
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7404         MOV     A,#0x4
   \   000051   F0           MOVX    @DPTR,A
   3736          
   3737                  // Remove the entry in address manager so we do not keep entries
   3738                  // with invalid addresses
   3739                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000052                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000052   E8           MOV     A,R0
   \   000053   240B         ADD     A,#0xb
   \   000055   FC           MOV     R4,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FD           MOV     R5,A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??AddrMgrExtAddrSet?relay; Banked call to: AddrMgrExtAddrSet
   3740          
   3741                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000065                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP101_8
   \   00006A   12....       LCALL   ??AddrMgrEntryLookupExt?relay; Banked call to: AddrMgrEntryLookupExt
   \   00006D   E9           MOV     A,R1
   \   00006E   6401         XRL     A,#0x1
   \   000070   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3742                  {
   3743                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FE         XRL     A,#0xfe
   \   00007A   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00007F   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3744                    {
   3745                      // Release the entry that contains an invalid NWK address
   3746                      AddrMgrEntryRelease( &entry );
   \   000081                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP101_8
   \   000086   12....       LCALL   ??AddrMgrEntryRelease?relay; Banked call to: AddrMgrEntryRelease
   3747                    }
   3748                  }
   3749          
   3750                  // Send the Bind Response with failure status
   3751                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3752                               &(ZDAppPendingBindReq[i].srcAddr),
   3753                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000089   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP100_8
   \   000098   88..         MOV     ?V2,R0
   \   00009A   89..         MOV     ?V3,R1
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   75..21       MOV     ?V2,#0x21
   \   0000A4   75..80       MOV     ?V3,#-0x80
   \   0000A7   78..         MOV     R0,#?V2
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000AF   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000B1   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000B2   12....       LCALL   ??ZDP_SendData?relay ; Banked call to: ZDP_SendData
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   3754          
   3755                  // Clear the record and set to default values
   3756                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000BA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000BA   12....       LCALL   ?Subroutine34 & 0xFFFF
   3757                }
   3758              }
   \                     ??CrossCallReturnLabel_40:
   \   0000BD   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000C0   05..         INC     ?V1
   \   0000C2   E5..         MOV     A,?V1
   \   0000C4   C3           CLR     C
   \   0000C5   9403         SUBB    A,#0x3
   \   0000C7   5003         JNC     $+5
   \   0000C9   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3759            }
   3760          
   3761            if ( entryFound == FALSE )
   \   0000CC   E5..         MOV     A,?V0
   \   0000CE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D0   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3762            {
   3763              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000D2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B10         MOV     R3,#0x10
   \   0000D6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   ??osal_stop_timerEx?relay; Banked call to: osal_stop_timerEx
   \   0000DE   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3764            }
   3765            else
   3766            {
   3767              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3768                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   90....       MOV     DPTR,#__Constant_3e8
   \   0000E3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E6   7A00         MOV     R2,#0x0
   \   0000E8   7B10         MOV     R3,#0x10
   \   0000EA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   3769            }
   3770          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9   80..         SJMP    ??Subroutine53_0
   3771          #endif
   3772          #endif
   3773          
   3774          /*********************************************************************
   3775           * @fn          ZDO_ChangeState
   3776           *
   3777           * @brief       Chance the device state
   3778           *
   3779           * @param       state - new state
   3780           *
   3781           * @return      none
   3782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3783          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3784          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3785            if ( devState != state )
   \   000007   90....       MOV     DPTR,#devState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   600E         JZ      ??ZDApp_ChangeState_0
   3786            {
   3787              devState = state;
   \   00000E   EE           MOV     A,R6
   \   00000F   F0           MOVX    @DPTR,A
   3788              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   7A10         MOV     R2,#0x10
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_set_event?relay; Banked call to: osal_set_event
   3789            }
   3790          }
   \                     ??ZDApp_ChangeState_0:
   \   00001C   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3791          
   3792          /*********************************************************************
   3793           * @fn      ZDApp_SetRejoinScanDuration()
   3794           *
   3795           * @brief   Sets scan duration for rejoin for an end device
   3796           *
   3797           * @param   rejoinScanDuration - milliseconds
   3798           *
   3799           * @return  none
   3800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3801          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3803            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine10
   \   000010                ; // Fall through to label ?Subroutine10
   3804          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?L_MOV_TO_X
   \   000005   80..         SJMP    ??Subroutine54_0
   3805          
   3806          /*********************************************************************
   3807           * @fn      ZDApp_SetRejoinBackoffDuration()
   3808           *
   3809           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3810           *
   3811           * @param   rejoinBackoffDuration - milliseconds
   3812           *
   3813           * @return  none
   3814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3815          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3816          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3817            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP    ?Subroutine10
   3818          }
   3819          
   3820          /*********************************************************************
   3821           * @fn          ZDApp_SetParentAnnceTimer
   3822           *
   3823           * @brief       This function sets up the link status timer.
   3824           *
   3825           * @param       none
   3826           *
   3827           * @return      none
   3828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3829          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   3830          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3831            // Parent Announce shall be sent no earlier than 10 seconds
   3832            uint32 timeout = 10000;
   3833          
   3834            // Add with jitter of up to 10 seconds
   3835            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   3836          
   3837            // Set timer to send the message
   3838            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   5410         ANL     A,#0x10
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   5427         ANL     A,#0x27
   \   000010   F5..         MOV     ?V1,A
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V2,A
   \   000015   F5..         MOV     ?V3,A
   \   000017   90....       MOV     DPTR,#__Constant_2710
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?L_ADD_X
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B40         MOV     R3,#0x40
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP    ?Subroutine9 & 0xFFFF
   3839          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   C0D40100     DD 120000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1770:
   \   000000   70170000     DD 6000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ForceConcentratorChange?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PermitJoinCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkStatusCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendParentAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetPendingBindDefault?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitPendingBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_GetEmptyPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AgeOutPendingBindEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetRejoinScanDuration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetRejoinBackoffDuration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetParentAnnceTimer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer
   3840          
   3841          /*********************************************************************
   3842          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     16   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     26   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     30   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     24   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     41   ZDApp_LeaveUpdate
        0     24   -> AddrMgrWriteNVRequest
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      2     16   ZDApp_NVUpdate
        2      0   -> osal_set_event
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     32   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     50   ZDApp_ProcessMsgCBs
        0     35   -> ZDApp_ProcessPendingBindReq
        0     35   -> ZDO_ParseAddrRsp
        0     35   -> ZDO_ParseBindUnbindReq
        0     35   -> ZDO_ProcessBindUnbindReq
        0     35   -> ZDO_UpdateAddrManager
        0     35   -> osal_mem_free
      0     29   ZDApp_ProcessNetworkJoin
        0     14   -> NLME_GetShortAddr
        0     14   -> NLME_NwkDiscTerm
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_ResetTimerStart
        0     14   -> ZDApp_RestoreNwkKey
        0     14   -> ZMacSetReq
        0     14   -> nwkNeighborInitTable
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      0     33   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_ChangeState
        0     15   -> ZDApp_NetworkInit
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDApp_ProcessSecMsg
        0     15   -> ZDApp_RestoreNwkKey
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> sAddrExtCpy
      0     56   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrSaveApsLinkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
      2     15   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0     25   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     30   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     25   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     68   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     44   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     41   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     25   ZDOInitDevice
        0     16   -> NLME_InitNV
        0     16   -> NLME_SetBroadcastFilter
        0     16   -> NLME_SetDefaultNV
        0     16   -> ZDAppDetermineDeviceType
        0     16   -> ZDApp_LeaveCtrlInit
        0     16   -> ZDApp_NetworkInit
        0     16   -> ZDApp_ReadNetworkRestoreState
        0     16   -> ZDApp_RestoreNetworkState
        0     16   -> ZDApp_SecInit
        0     16   -> ZDConfig_InitDescriptors
        0     16   -> ZDSecMgrClearNVKeyValues
        0     16   -> osal_rand
        0     16   -> zgInitItems
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0     12   ZDO_SyncIndicationCB
        0     12   -> ZDApp_SendMsg
        0     12   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for prevDevState>
       1  ?<Initializer for zdoDiscCounter>
       6  ??AddrMgrWriteNVRequest?relay
      10  ??Subroutine39_0
       7  ??Subroutine40_0
       6  ??Subroutine41_0
       2  ??Subroutine42_0
       6  ??Subroutine43_0
       5  ??Subroutine44_0
       6  ??Subroutine45_0
       6  ??Subroutine46_0
       6  ??Subroutine47_0
       6  ??Subroutine48_0
       4  ??Subroutine49_0
       3  ??Subroutine50_0
       5  ??Subroutine51_0
       6  ??Subroutine52_0
       3  ??Subroutine53_0
       5  ??Subroutine54_0
       6  ??ZDAppCheckForHoldKey?relay
       6  ??ZDAppDetermineDeviceType?relay
       6  ??ZDApp_AgeOutPendingBindEntry?relay
       6  ??ZDApp_AnnounceNewAddress?relay
       6  ??ZDApp_ChangeMatchDescRespPermission?relay
       6  ??ZDApp_ChangeState?relay
       6  ??ZDApp_CoordStartPANIDConflictCB?relay
       6  ??ZDApp_DeviceAuthEvt?relay
       6  ??ZDApp_DeviceConfigured?relay
       6  ??ZDApp_ForceConcentratorChange?relay
       6  ??ZDApp_GetEmptyPendingBindReq?relay
       6  ??ZDApp_InMsgCB?relay
       6  ??ZDApp_Init?relay
       6  ??ZDApp_InitPendingBind?relay
       6  ??ZDApp_InitUserDesc?relay
       6  ??ZDApp_InitZdoCBFunc?relay
       6  ??ZDApp_JoinReq?relay
       6  ??ZDApp_LeaveCtrlBypass?relay
       6  ??ZDApp_LeaveCtrlInit?relay
       6  ??ZDApp_LeaveCtrlReset?relay
       6  ??ZDApp_LeaveCtrlSet?relay
       6  ??ZDApp_LeaveCtrlStartup?relay
       6  ??ZDApp_LeaveReset?relay
       6  ??ZDApp_LeaveUpdate?relay
       6  ??ZDApp_NVUpdate?relay
       6  ??ZDApp_NetworkDiscoveryReq?relay
       6  ??ZDApp_NetworkInit?relay
       6  ??ZDApp_NetworkStartEvt?relay
       6  ??ZDApp_NodeProfileSync?relay
       6  ??ZDApp_NwkDescListProcessing?relay
       6  ??ZDApp_NwkStateUpdateCB?relay
       6  ??ZDApp_ProcessMsgCBs?relay
       6  ??ZDApp_ProcessNetworkJoin?relay
       6  ??ZDApp_ProcessOSALMsg?relay
       6  ??ZDApp_ProcessPendingBindReq?relay
       6  ??ZDApp_ProcessSecEvent?relay
       6  ??ZDApp_ProcessSecMsg?relay
       6  ??ZDApp_ReadNetworkRestoreState?relay
       6  ??ZDApp_RegisterCBs?relay
       6  ??ZDApp_ResetNwkKey?relay
       6  ??ZDApp_ResetTimerCancel?relay
       6  ??ZDApp_ResetTimerStart?relay
       6  ??ZDApp_RestoreNetworkState?relay
       6  ??ZDApp_RestoreNwkKey?relay
       6  ??ZDApp_SaveNetworkStateEvt?relay
       6  ??ZDApp_SaveNwkKey?relay
       6  ??ZDApp_SecInit?relay
       6  ??ZDApp_SendEventMsg?relay
       6  ??ZDApp_SendMsg?relay
       6  ??ZDApp_SendParentAnnce?relay
       6  ??ZDApp_SetParentAnnceTimer?relay
       6  ??ZDApp_SetPendingBindDefault?relay
       6  ??ZDApp_SetRejoinBackoffDuration?relay
       6  ??ZDApp_SetRejoinScanDuration?relay
       6  ??ZDApp_StartJoiningCycle?relay
       6  ??ZDApp_StopJoiningCycle?relay
       6  ??ZDApp_event_loop?relay
       6  ??ZDOInitDevice?relay
       6  ??ZDO_AddrChangeIndicationCB?relay
       6  ??ZDO_ConcentratorIndicationCB?relay
       6  ??ZDO_DeregisterForZdoCB?relay
       6  ??ZDO_JoinConfirmCB?relay
       6  ??ZDO_JoinIndicationCB?relay
       6  ??ZDO_LeaveCnf?relay
       6  ??ZDO_LeaveInd?relay
       6  ??ZDO_ManytoOneFailureIndicationCB?relay
       6  ??ZDO_NetworkDiscoveryConfirmCB?relay
       6  ??ZDO_NetworkFormationConfirmCB?relay
       6  ??ZDO_NetworkStatusCB?relay
       6  ??ZDO_PermitJoinCB?relay
       6  ??ZDO_PollConfirmCB?relay
       6  ??ZDO_RegisterForZdoCB?relay
       6  ??ZDO_SrcRtgIndCB?relay
       6  ??ZDO_StartRouterConfirmCB?relay
       6  ??ZDO_SyncIndicationCB?relay
       6  ??ZDO_UpdateDeviceIndication?relay
       6  ??ZDO_beaconNotifyIndCB?relay
      10  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine10
      21  ?Subroutine11
       2  ?Subroutine12
       4  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       9  ?Subroutine16
      12  ?Subroutine17
       3  ?Subroutine18
      14  ?Subroutine19
       5  ?Subroutine2
       5  ?Subroutine20
       1  ?Subroutine21
      14  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
      11  ?Subroutine25
      12  ?Subroutine26
       8  ?Subroutine27
       9  ?Subroutine28
       5  ?Subroutine29
       3  ?Subroutine3
       8  ?Subroutine30
      10  ?Subroutine31
      10  ?Subroutine32
      14  ?Subroutine33
      11  ?Subroutine34
       6  ?Subroutine35
       1  ?Subroutine36
      15  ?Subroutine37
      11  ?Subroutine38
      35  ?Subroutine4
       2  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
      28  AddrMgrWriteNVRequest
      24  ZDAppCheckForHoldKey
      82  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     251  ZDApp_AgeOutPendingBindEntry
     112  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      31  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      67  ZDApp_DeviceAuthEvt
      89  ZDApp_DeviceConfigured
     129  ZDApp_ForceConcentratorChange
      55  ZDApp_GetEmptyPendingBindReq
      87  ZDApp_InMsgCB
      91  ZDApp_Init
      61  ZDApp_InitPendingBind
     111  ZDApp_InitUserDesc
      22  ZDApp_InitZdoCBFunc
      70  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      75  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
     135  ZDApp_LeaveReset
     119  ZDApp_LeaveUpdate
      19  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      57  ZDApp_NetworkInit
     116  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     273  ZDApp_NwkDescListProcessing
      28  ZDApp_NwkStateUpdateCB
     152  ZDApp_ProcessMsgCBs
     549  ZDApp_ProcessNetworkJoin
     684  ZDApp_ProcessOSALMsg
     258  ZDApp_ProcessPendingBindReq
      77  ZDApp_ProcessSecEvent
      56  ZDApp_ProcessSecMsg
      23  ZDApp_ReadNetworkRestoreState
      55  ZDApp_RegisterCBs
      66  ZDApp_ResetNwkKey
      31  ZDApp_ResetTimerCancel
      57  ZDApp_ResetTimerStart
      77  ZDApp_RestoreNetworkState
     218  ZDApp_RestoreNwkKey
      19  ZDApp_SaveNetworkStateEvt
      75  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     134  ZDApp_SecInit
      21  ZDApp_SendEventMsg
      91  ZDApp_SendMsg
     115  ZDApp_SendParentAnnce
      51  ZDApp_SetParentAnnceTimer
      32  ZDApp_SetPendingBindDefault
      18  ZDApp_SetRejoinBackoffDuration
      16  ZDApp_SetRejoinScanDuration
      39  ZDApp_StartJoiningCycle
      36  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     335  ZDApp_event_loop
     189  ZDOInitDevice
     109  ZDO_AddrChangeIndicationCB
      45  ZDO_ConcentratorIndicationCB
      24  ZDO_DeregisterForZdoCB
     235  ZDO_JoinConfirmCB
     220  ZDO_JoinIndicationCB
      62  ZDO_LeaveCnf
     188  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      64  ZDO_NetworkDiscoveryConfirmCB
      51  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      28  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      51  ZDO_StartRouterConfirmCB
      69  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     619  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_1770
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  initFailCounter
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 8 078 bytes in segment BANKED_CODE
   468 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    28 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 8 560 bytes of CODE  memory
     0 bytes of CONST memory (+ 28 bytes shared)
    80 bytes of XDATA memory

Errors: none
Warnings: none
